{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { global } from \"@/stores/global\";\nimport Closebtn from \"@/components/ui/closebtn.vue\";\nimport { onMounted, ref } from \"vue\";\nimport gsap from \"gsap\";\nimport { Engine, Bodies, Composite, Events, Body, Mouse, MouseConstraint } from \"matter-js\";\nexport default {\n  __name: 'rank',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = global();\n    const player = store.player;\n    // 进行排名展示的玩家数据\n    const players_data = ref([]);\n    // rank控制对象\n    const rank = {\n      // DOM元素\n      container: null,\n      balls: null,\n      middle: null,\n      // matter配置项\n      engine: null,\n      //引擎\n      world: null,\n      //物理世界\n      edges: null,\n      //物理世界里面的所有边界墙\n      if_run_engine: false,\n      //是否运行引擎\n      //当前被选中展示的玩家index\n      current_index: ref(0),\n      animater: null,\n      //动画播放器\n      if_visible: ref(false),\n      //rank是否可见\n      init() {\n        this.create_engine();\n        this.container = document.querySelector(\".rank\");\n        this.balls = [...document.querySelectorAll(\".rank_playerball\")];\n        this.middle = document.querySelector(\".rank_middle\");\n        window.addEventListener(\"resize\", this.resize.bind(this));\n        // 创建中间球体的物理模型\n        this.create_bady(this.middle, true);\n      },\n      // 创建物理引擎\n      create_engine() {\n        this.engine = Engine.create({\n          constraintIterations: 1\n        });\n        this.world = this.engine.world;\n      },\n      // 尺寸改变，重新生成所有物理模型以适配新的尺寸\n      resize() {\n        // 移除，并重新生成中间球体\n        Composite.remove(this.world, this.middle.body, false);\n        this.create_bady(this.middle, true);\n        //如果没有运行引擎的话，边界和小球是空的，不执行后续内容\n        if (!this.if_run_engine) return;\n        // 移除，并重新生成边界\n        Composite.remove(this.world, this.edges, false);\n        this.create_edges();\n        // 重新为所有小球绑定物理模型模拟\n        this.balls.forEach(ball => {\n          Composite.remove(this.world, ball.body, false); //移除小球的物理模型\n          this.create_bady(ball); // 重新生成\n        });\n      },\n      // 创建边界墙\n      create_edges() {\n        this.edges = [];\n        // 获取视口宽高\n        const view_width = innerWidth;\n        const view_height = innerHeight;\n        // 创建视口边界 (下左右)：这里不设置顶部，因为小球会从顶部掉落进来\n        this.edges = [Bodies.rectangle(view_width / 2, view_height + 5, view_width, 10, {\n          isStatic: true\n        }),\n        // 底部\n        Bodies.rectangle(-5, view_height / 2, 10, view_height, {\n          isStatic: true\n        }),\n        // 左侧\n        Bodies.rectangle(view_width + 5, view_height / 2, 10, view_height, {\n          isStatic: true\n        }) // 右侧\n        ];\n        // 将边界加入到物理世界\n        Composite.add(this.world, this.edges);\n      },\n      // 初始化所有小球\n      init_balls() {\n        this.balls.forEach((ball, index) => {\n          // 所有小球按序号从下往上，从左往右依次排列\n          let row = parseInt(index % 4);\n          let line = parseInt(index / 4);\n          ball.style.left = `${25 * row}%`;\n          ball.style.top = `${25 * line}%`;\n          // 生成小球的物理模型\n          this.create_bady(ball);\n        });\n      },\n      // 生成DOM元素的物理模型body\n      create_bady(ele, if_static = false) {\n        const rect = ele.getBoundingClientRect();\n        const body = Bodies.circle(rect.left + rect.width / 2,\n        //x位置\n        rect.top + rect.width / 2,\n        //y位置\n        rect.width / 2,\n        //半径\n        {\n          isStatic: if_static\n        } //球体是否静止:是否可以与其他模型发生碰撞\n        );\n        //将body和元素绑定，方便直接通过元素控制body\n        ele.body = body;\n        Composite.add(this.world, body); // 将body加入到物理世界\n      },\n      // 运行引擎\n      run_engine() {\n        // 引擎不能自动开关：所以用if_run_engine手动控制引擎开关\n        if (!this.if_run_engine) return;\n        Engine.update(this.engine); //更新引擎\n        // 将body物理模型的物理状态设置到DOM元素上\n        this.balls.forEach(ball => {\n          // 小球小于一定速度则停止移动：停止设置transform，释放性能\n          if (ball.body.speed <= 0.2) return;\n          gsap.set(ball, {\n            left: `${ball.body.position.x - ball.offsetWidth / 2}px`,\n            top: `${ball.body.position.y - ball.offsetHeight / 2}px`,\n            rotate: `${ball.body.angle}deg`\n          });\n        });\n        requestAnimationFrame(() => {\n          this.run_engine();\n        });\n      },\n      // 重置物理引擎和动画样式\n      reset() {\n        this.world.gravity.y = 1.5; //恢复物理世界重力\n        // 重新创建边界墙和所有小球的物理模型\n        this.create_edges();\n        this.init_balls();\n        // 运行引擎\n        this.if_run_engine = true;\n        this.run_engine();\n        gsap.set(this.container, {\n          clipPath: \"polygon(0% 0%, 100% 0%, 100% 0%, 0% 0%)\"\n        });\n      },\n      // 显示rank\n      show(immediate) {\n        // 动画播放器存在且正在播放动画：不执行函数，否则会因为动画冲突导致BUG\n        if (this.animater && this.animater.isActive()) return;\n        if (immediate) immediate(); //存在立即执行代码，则立即执行\n        this.get_rank_list();\n        this.reset(); //重置\n        this.if_visible.value = true; //显示rank\n        // 播放动画\n        this.animater = gsap.to(this.container, {\n          clipPath: \"polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)\",\n          duration: 1,\n          ease: \"power3.inOut\"\n        });\n      },\n      // 隐藏rank\n      hidden() {\n        // 动画播放器存在且正在播放动画：不执行函数，否则会因为动画冲突导致BUG\n        if (this.animater && this.animater.isActive()) return;\n        //  移除底部边界，并加大重力，让所有小球掉下\n        Composite.remove(this.engine.world, this.edges, false);\n        this.world.gravity.y = innerHeight / 250; //根据屏幕高度设置重力，避免小球掉落太快或者太慢\n        // 播放动画\n        this.animater = gsap.to(this.container, {\n          clipPath: \"polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)\",\n          duration: 1,\n          ease: \"power3.inOut\",\n          onComplete: () => {\n            this.if_visible.value = false; //隐藏rank\n            this.if_run_engine = false; //停止引擎\n            // 移除所有小球的物理模型\n            this.balls.forEach(ball => {\n              Composite.remove(this.engine.world, ball.body, false);\n            });\n          }\n        });\n      },\n      // 获取所有玩家的排名名单\n      get_rank_list() {\n        // 更新默认显示的玩家index，默认选中第一名\n        this.current_index.value = 0;\n        (async () => {\n          const response = await fetch(\"https://put_your_server.com/api\");\n          players_data.value = await response.json();\n          // 为所有玩家添加排名参数\n          players_data.value.forEach((data, index) => {\n            data.rank = index + 1;\n          });\n          // 如果当前玩家的分数存在的话：查找其分数所对应的排名\n          if (player.score !== null) this.get_rank();\n        })();\n      },\n      // 获取玩家分数对应的排名\n      get_rank() {\n        let request = new XMLHttpRequest();\n        request.open(\"POST\", \"https://put_your_server.com/api\", true);\n        request.setRequestHeader(\"Content-type\", \"application/json\");\n        request.send(JSON.stringify({\n          score: player.score\n        }));\n        request.onreadystatechange = () => {\n          if (request.status == 200 && request.readyState == 4) {\n            player.rank = JSON.parse(request.responseText).rank;\n            // 如果玩家在15名内：则默认选中玩家所对应的小球，优先显示玩家信息\n            if (player.rank <= 15) {\n              this.current_index.value = player.rank - 1;\n            } else {\n              // 如果玩家在15名外：则让最后一个小球显示玩家的对应信息\n              players_data.value[players_data.value.length - 1] = {\n                name: player.name,\n                rank: player.rank,\n                wave: player.wave,\n                lives: player.lives,\n                score: player.score\n              };\n              // 同上，优先显示玩家信息\n              this.current_index.value = players_data.value.length - 1;\n            }\n          }\n        };\n      }\n    };\n    // 储存全局功能函数\n    store.show_rank = () => {\n      // 这里将按钮音效播放放在show函数内部，是为了避免多次点击而多次播放音效的BUG\n      rank.show(() => {\n        store.audio_controller.button.play();\n      });\n    };\n    onMounted(() => {\n      rank.init();\n    });\n    const __returned__ = {\n      store,\n      player,\n      players_data,\n      rank,\n      get global() {\n        return global;\n      },\n      Closebtn,\n      onMounted,\n      ref,\n      get gsap() {\n        return gsap;\n      },\n      get Engine() {\n        return Engine;\n      },\n      get Bodies() {\n        return Bodies;\n      },\n      get Composite() {\n        return Composite;\n      },\n      get Events() {\n        return Events;\n      },\n      get Body() {\n        return Body;\n      },\n      get Mouse() {\n        return Mouse;\n      },\n      get MouseConstraint() {\n        return MouseConstraint;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["global","Closebtn","onMounted","ref","gsap","Engine","Bodies","Composite","Events","Body","Mouse","MouseConstraint","store","player","players_data","rank","container","balls","middle","engine","world","edges","if_run_engine","current_index","animater","if_visible","init","create_engine","document","querySelector","querySelectorAll","window","addEventListener","resize","bind","create_bady","create","constraintIterations","remove","body","create_edges","forEach","ball","view_width","innerWidth","view_height","innerHeight","rectangle","isStatic","add","init_balls","index","row","parseInt","line","style","left","top","ele","if_static","rect","getBoundingClientRect","circle","width","run_engine","update","speed","set","position","x","offsetWidth","y","offsetHeight","rotate","angle","requestAnimationFrame","reset","gravity","clipPath","show","immediate","isActive","get_rank_list","value","to","duration","ease","hidden","onComplete","response","fetch","json","data","score","get_rank","request","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","onreadystatechange","status","readyState","parse","responseText","length","name","wave","lives","show_rank","audio_controller","button","play"],"sources":["E:/SnakeBall/src/components/sections/rank.vue"],"sourcesContent":["<template>\r\n    <div class=\"rank _fullscreen\" :class=\"{'_hidden':!rank.if_visible.value}\">\r\n        <div class=\"rank_middle _middle_ball\">\r\n            <div class=\"rank_middle_data\">\r\n                <p class=\"_font_2\">RANK</p>\r\n                <p class=\"_font_2\">{{players_data.length?players_data[rank.current_index.value].rank:'loading'}}</p>\r\n            </div>\r\n            <div class=\"rank_middle_data\">\r\n                <p class=\"_font_2\">SCORE</p>\r\n                <p class=\"_font_2\">{{players_data.length?players_data[rank.current_index.value].score:'loading'}}</p>\r\n            </div>\r\n            <div class=\"rank_middle_data\">\r\n                <p class=\"_font_2\">LIVES</p>\r\n                <p class=\"_font_2\">{{players_data.length?players_data[rank.current_index.value].lives:'loading'}}</p>\r\n            </div>\r\n            <div class=\"rank_middle_data\">\r\n                <p class=\"_font_2\">WAVE</p>\r\n                <p class=\"_font_2\">{{players_data.length?players_data[rank.current_index.value].wave:'loading'}}</p>\r\n            </div>\r\n            <div class=\"rank_middle_closebtn\" @click=\"rank.hidden\">\r\n                <Closebtn />\r\n            </div>\r\n        </div>\r\n        <div\r\n            class=\"rank_playerball\"\r\n            v-for=\"index in 15\"\r\n            :key=\"index\"\r\n            :class=\"{'rank_playerball_selected':index==rank.current_index.value+1}\"\r\n            :style=\"{'--r': (15 - 1-index) * 0.8 / 20+1}\"\r\n            @click=\" rank.current_index.value = index-1\"\r\n        >\r\n            <p class=\"rank_playerball_rank _font_5\">{{players_data[index-1]?(players_data[index-1].rank > 99?'99+':players_data[index-1].rank):'?'}}</p>\r\n            <p class=\"rank_playerball_name _font_1\">{{players_data[index-1]?players_data[index-1].name:'loading'}}</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { global } from \"@/stores/global\";\r\nimport Closebtn from \"@/components/ui/closebtn.vue\";\r\nimport { onMounted, ref } from \"vue\";\r\nimport gsap from \"gsap\";\r\nimport { Engine, Bodies, Composite, Events, Body, Mouse, MouseConstraint } from \"matter-js\";\r\nconst store = global();\r\nconst player = store.player;\r\n// 进行排名展示的玩家数据\r\nconst players_data = ref([]);\r\n// rank控制对象\r\nconst rank = {\r\n    // DOM元素\r\n    container: null,\r\n    balls: null,\r\n    middle: null,\r\n    // matter配置项\r\n    engine: null, //引擎\r\n    world: null, //物理世界\r\n    edges: null, //物理世界里面的所有边界墙\r\n    if_run_engine: false, //是否运行引擎\r\n    //当前被选中展示的玩家index\r\n    current_index: ref(0),\r\n    animater: null, //动画播放器\r\n    if_visible: ref(false), //rank是否可见\r\n    init() {\r\n        this.create_engine();\r\n        this.container = document.querySelector(\".rank\");\r\n        this.balls = [...document.querySelectorAll(\".rank_playerball\")];\r\n        this.middle = document.querySelector(\".rank_middle\");\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        // 创建中间球体的物理模型\r\n        this.create_bady(this.middle, true);\r\n    },\r\n    // 创建物理引擎\r\n    create_engine() {\r\n        this.engine = Engine.create({\r\n            constraintIterations: 1,\r\n        });\r\n        this.world = this.engine.world;\r\n    },\r\n    // 尺寸改变，重新生成所有物理模型以适配新的尺寸\r\n    resize() {\r\n        // 移除，并重新生成中间球体\r\n        Composite.remove(this.world, this.middle.body, false);\r\n        this.create_bady(this.middle, true);\r\n        //如果没有运行引擎的话，边界和小球是空的，不执行后续内容\r\n        if (!this.if_run_engine) return;\r\n        // 移除，并重新生成边界\r\n        Composite.remove(this.world, this.edges, false);\r\n        this.create_edges();\r\n        // 重新为所有小球绑定物理模型模拟\r\n        this.balls.forEach((ball) => {\r\n            Composite.remove(this.world, ball.body, false); //移除小球的物理模型\r\n            this.create_bady(ball); // 重新生成\r\n        });\r\n    },\r\n    // 创建边界墙\r\n    create_edges() {\r\n        this.edges = [];\r\n        // 获取视口宽高\r\n        const view_width = innerWidth;\r\n        const view_height = innerHeight;\r\n        // 创建视口边界 (下左右)：这里不设置顶部，因为小球会从顶部掉落进来\r\n        this.edges = [\r\n            Bodies.rectangle(view_width / 2, view_height + 5, view_width, 10, {\r\n                isStatic: true,\r\n            }), // 底部\r\n            Bodies.rectangle(-5, view_height / 2, 10, view_height, { isStatic: true }), // 左侧\r\n            Bodies.rectangle(view_width + 5, view_height / 2, 10, view_height, {\r\n                isStatic: true,\r\n            }), // 右侧\r\n        ];\r\n        // 将边界加入到物理世界\r\n        Composite.add(this.world, this.edges);\r\n    },\r\n    // 初始化所有小球\r\n    init_balls() {\r\n        this.balls.forEach((ball, index) => {\r\n            // 所有小球按序号从下往上，从左往右依次排列\r\n            let row = parseInt(index % 4);\r\n            let line = parseInt(index / 4);\r\n            ball.style.left = `${25 * row}%`;\r\n            ball.style.top = `${25 * line}%`;\r\n            // 生成小球的物理模型\r\n            this.create_bady(ball);\r\n        });\r\n    },\r\n    // 生成DOM元素的物理模型body\r\n    create_bady(ele, if_static = false) {\r\n        const rect = ele.getBoundingClientRect();\r\n        const body = Bodies.circle(\r\n            rect.left + rect.width / 2, //x位置\r\n            rect.top + rect.width / 2, //y位置\r\n            rect.width / 2, //半径\r\n            { isStatic: if_static } //球体是否静止:是否可以与其他模型发生碰撞\r\n        );\r\n        //将body和元素绑定，方便直接通过元素控制body\r\n        ele.body = body;\r\n        Composite.add(this.world, body); // 将body加入到物理世界\r\n    },\r\n    // 运行引擎\r\n    run_engine() {\r\n        // 引擎不能自动开关：所以用if_run_engine手动控制引擎开关\r\n        if (!this.if_run_engine) return;\r\n        Engine.update(this.engine); //更新引擎\r\n        // 将body物理模型的物理状态设置到DOM元素上\r\n        this.balls.forEach((ball) => {\r\n            // 小球小于一定速度则停止移动：停止设置transform，释放性能\r\n            if (ball.body.speed <= 0.2) return;\r\n            gsap.set(ball, {\r\n                left: `${ball.body.position.x - ball.offsetWidth / 2}px`,\r\n                top: `${ball.body.position.y - ball.offsetHeight / 2}px`,\r\n                rotate: `${ball.body.angle}deg`,\r\n            });\r\n        });\r\n        requestAnimationFrame(() => {\r\n            this.run_engine();\r\n        });\r\n    },\r\n    // 重置物理引擎和动画样式\r\n    reset() {\r\n        this.world.gravity.y = 1.5; //恢复物理世界重力\r\n        // 重新创建边界墙和所有小球的物理模型\r\n        this.create_edges();\r\n        this.init_balls();\r\n        // 运行引擎\r\n        this.if_run_engine = true;\r\n        this.run_engine();\r\n        gsap.set(this.container, {\r\n            clipPath: \"polygon(0% 0%, 100% 0%, 100% 0%, 0% 0%)\",\r\n        });\r\n    },\r\n    // 显示rank\r\n    show(immediate) {\r\n        // 动画播放器存在且正在播放动画：不执行函数，否则会因为动画冲突导致BUG\r\n        if (this.animater && this.animater.isActive()) return;\r\n        if (immediate) immediate(); //存在立即执行代码，则立即执行\r\n        this.get_rank_list();\r\n        this.reset(); //重置\r\n        this.if_visible.value = true; //显示rank\r\n        // 播放动画\r\n        this.animater = gsap.to(this.container, {\r\n            clipPath: \"polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)\",\r\n            duration: 1,\r\n            ease: \"power3.inOut\",\r\n        });\r\n    },\r\n    // 隐藏rank\r\n    hidden() {\r\n        // 动画播放器存在且正在播放动画：不执行函数，否则会因为动画冲突导致BUG\r\n        if (this.animater && this.animater.isActive()) return;\r\n        //  移除底部边界，并加大重力，让所有小球掉下\r\n        Composite.remove(this.engine.world, this.edges, false);\r\n        this.world.gravity.y = innerHeight / 250; //根据屏幕高度设置重力，避免小球掉落太快或者太慢\r\n        // 播放动画\r\n        this.animater = gsap.to(this.container, {\r\n            clipPath: \"polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)\",\r\n            duration: 1,\r\n            ease: \"power3.inOut\",\r\n            onComplete: () => {\r\n                this.if_visible.value = false; //隐藏rank\r\n                this.if_run_engine = false; //停止引擎\r\n                // 移除所有小球的物理模型\r\n                this.balls.forEach((ball) => {\r\n                    Composite.remove(this.engine.world, ball.body, false);\r\n                });\r\n            },\r\n        });\r\n    },\r\n    // 获取所有玩家的排名名单\r\n    get_rank_list() {\r\n        // 更新默认显示的玩家index，默认选中第一名\r\n        this.current_index.value = 0;\r\n        (async () => {\r\n            const response = await fetch(\"https://put_your_server.com/api\");\r\n            players_data.value = await response.json();\r\n            // 为所有玩家添加排名参数\r\n            players_data.value.forEach((data, index) => {\r\n                data.rank = index + 1;\r\n            });\r\n            // 如果当前玩家的分数存在的话：查找其分数所对应的排名\r\n            if (player.score !== null) this.get_rank();\r\n        })();\r\n    },\r\n    // 获取玩家分数对应的排名\r\n    get_rank() {\r\n        let request = new XMLHttpRequest();\r\n        request.open(\"POST\", \"https://put_your_server.com/api\", true);\r\n        request.setRequestHeader(\"Content-type\", \"application/json\");\r\n        request.send(JSON.stringify({ score: player.score }));\r\n        request.onreadystatechange = () => {\r\n            if (request.status == 200 && request.readyState == 4) {\r\n                player.rank = JSON.parse(request.responseText).rank;\r\n                // 如果玩家在15名内：则默认选中玩家所对应的小球，优先显示玩家信息\r\n                if (player.rank <= 15) {\r\n                    this.current_index.value = player.rank - 1;\r\n                } else {\r\n                    // 如果玩家在15名外：则让最后一个小球显示玩家的对应信息\r\n                    players_data.value[players_data.value.length - 1] = {\r\n                        name: player.name,\r\n                        rank: player.rank,\r\n                        wave: player.wave,\r\n                        lives: player.lives,\r\n                        score: player.score,\r\n                    };\r\n                    // 同上，优先显示玩家信息\r\n                    this.current_index.value = players_data.value.length - 1;\r\n                }\r\n            }\r\n        };\r\n    },\r\n};\r\n// 储存全局功能函数\r\nstore.show_rank = () => {\r\n    // 这里将按钮音效播放放在show函数内部，是为了避免多次点击而多次播放音效的BUG\r\n    rank.show(() => {\r\n        store.audio_controller.button.play();\r\n    });\r\n};\r\nonMounted(() => {\r\n    rank.init();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.rank {\r\n    --scale: 1;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: var(--color_back);\r\n    z-index: 1000;\r\n}\r\n.rank_middle {\r\n    flex-direction: column;\r\n    position: absolute;\r\n    align-items: center;\r\n}\r\n.rank_middle_data {\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-top: calc(var(--scale) * 3rem);\r\n}\r\n.rank_middle .rank_middle_data:first-child {\r\n    margin-top: var(--margin_ball_y);\r\n}\r\n.rank_middle_data P:nth-child(1) {\r\n    color: var(--color_gray);\r\n}\r\n.rank_middle_data P:nth-child(2) {\r\n    color: var(--color_back);\r\n}\r\n.rank_middle_closebtn {\r\n    position: absolute;\r\n    bottom: var(--margin_ball_y);\r\n}\r\n.rank_playerball {\r\n    flex-direction: column;\r\n    position: absolute;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: calc(var(--scale) * 25rem * var(--r));\r\n    height: calc(var(--scale) * 25rem * var(--r));\r\n    border-radius: 50%;\r\n    background-color: var(--color_gray);\r\n    overflow: hidden;\r\n    transition: background-color 0.5s var(--ease_out);\r\n    cursor: pointer;\r\n}\r\n.rank_playerball p {\r\n    color: var(--color_back);\r\n    transition: color 0.5s var(--ease_out);\r\n}\r\n.rank_playerball_rank {\r\n    font-family: title;\r\n    line-height: calc(var(--scale) * 13rem);\r\n}\r\n\r\n@media (hover: hover) {\r\n    .rank_playerball:hover p {\r\n        color: var(--color_front);\r\n    }\r\n}\r\n.rank_playerball_selected {\r\n    background-color: var(--color_front);\r\n}\r\n@media (hover: hover) {\r\n    .rank_playerball_selected:hover p {\r\n        color: var(--color_back);\r\n    }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}