{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.filter.js\");\nrequire(\"core-js/modules/es.iterator.map.js\");\n/*!\n * matter-js 0.20.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"Matter\", [], factory);else if (typeof exports === 'object') exports[\"Matter\"] = factory();else root[\"Matter\"] = factory();\n})(this, function () {\n  return /******/function (modules) {\n    // webpackBootstrap\n    /******/ // The module cache\n    /******/\n    var installedModules = {};\n    /******/\n    /******/ // The require function\n    /******/\n    function __webpack_require__(moduleId) {\n      /******/\n      /******/ // Check if module is in cache\n      /******/if (installedModules[moduleId]) {\n        /******/return installedModules[moduleId].exports;\n        /******/\n      }\n      /******/ // Create a new module (and put it into the cache)\n      /******/\n      var module = installedModules[moduleId] = {\n        /******/i: moduleId,\n        /******/l: false,\n        /******/exports: {}\n        /******/\n      };\n      /******/\n      /******/ // Execute the module function\n      /******/\n      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n      /******/\n      /******/ // Flag the module as loaded\n      /******/\n      module.l = true;\n      /******/\n      /******/ // Return the exports of the module\n      /******/\n      return module.exports;\n      /******/\n    }\n    /******/\n    /******/\n    /******/ // expose the modules object (__webpack_modules__)\n    /******/\n    __webpack_require__.m = modules;\n    /******/\n    /******/ // expose the module cache\n    /******/\n    __webpack_require__.c = installedModules;\n    /******/\n    /******/ // define getter function for harmony exports\n    /******/\n    __webpack_require__.d = function (exports, name, getter) {\n      /******/if (!__webpack_require__.o(exports, name)) {\n        /******/Object.defineProperty(exports, name, {\n          enumerable: true,\n          get: getter\n        });\n        /******/\n      }\n      /******/\n    };\n    /******/\n    /******/ // define __esModule on exports\n    /******/\n    __webpack_require__.r = function (exports) {\n      /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n        /******/Object.defineProperty(exports, Symbol.toStringTag, {\n          value: 'Module'\n        });\n        /******/\n      }\n      /******/\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      /******/\n    };\n    /******/\n    /******/ // create a fake namespace object\n    /******/ // mode & 1: value is a module id, require it\n    /******/ // mode & 2: merge all properties of value into the ns\n    /******/ // mode & 4: return value when already ns object\n    /******/ // mode & 8|1: behave like require\n    /******/\n    __webpack_require__.t = function (value, mode) {\n      /******/if (mode & 1) value = __webpack_require__(value);\n      /******/\n      if (mode & 8) return value;\n      /******/\n      if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n      /******/\n      var ns = Object.create(null);\n      /******/\n      __webpack_require__.r(ns);\n      /******/\n      Object.defineProperty(ns, 'default', {\n        enumerable: true,\n        value: value\n      });\n      /******/\n      if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n        return value[key];\n      }.bind(null, key));\n      /******/\n      return ns;\n      /******/\n    };\n    /******/\n    /******/ // getDefaultExport function for compatibility with non-harmony modules\n    /******/\n    __webpack_require__.n = function (module) {\n      /******/var getter = module && module.__esModule ? /******/function getDefault() {\n        return module['default'];\n      } : /******/function getModuleExports() {\n        return module;\n      };\n      /******/\n      __webpack_require__.d(getter, 'a', getter);\n      /******/\n      return getter;\n      /******/\n    };\n    /******/\n    /******/ // Object.prototype.hasOwnProperty.call\n    /******/\n    __webpack_require__.o = function (object, property) {\n      return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    /******/\n    /******/ // __webpack_public_path__\n    /******/\n    __webpack_require__.p = \"\";\n    /******/\n    /******/\n    /******/ // Load entry module and return exports\n    /******/\n    return __webpack_require__(__webpack_require__.s = 20);\n    /******/\n  }\n  /************************************************************************/\n  /******/([(/* 0 */\n  /***/function (module, exports) {\n    /**\n    * The `Matter.Common` module contains utility functions that are common to all modules.\n    *\n    * @class Common\n    */\n\n    var Common = {};\n    module.exports = Common;\n    (function () {\n      Common._baseDelta = 1000 / 60;\n      Common._nextId = 0;\n      Common._seed = 0;\n      Common._nowStartTime = +new Date();\n      Common._warnedOnce = {};\n      Common._decomp = null;\n\n      /**\n       * Extends the object in the first argument using the object in the second argument.\n       * @method extend\n       * @param {} obj\n       * @param {boolean} deep\n       * @return {} obj extended\n       */\n      Common.extend = function (obj, deep) {\n        var argsStart, args, deepClone;\n        if (typeof deep === 'boolean') {\n          argsStart = 2;\n          deepClone = deep;\n        } else {\n          argsStart = 1;\n          deepClone = true;\n        }\n        for (var i = argsStart; i < arguments.length; i++) {\n          var source = arguments[i];\n          if (source) {\n            for (var prop in source) {\n              if (deepClone && source[prop] && source[prop].constructor === Object) {\n                if (!obj[prop] || obj[prop].constructor === Object) {\n                  obj[prop] = obj[prop] || {};\n                  Common.extend(obj[prop], deepClone, source[prop]);\n                } else {\n                  obj[prop] = source[prop];\n                }\n              } else {\n                obj[prop] = source[prop];\n              }\n            }\n          }\n        }\n        return obj;\n      };\n\n      /**\n       * Creates a new clone of the object, if deep is true references will also be cloned.\n       * @method clone\n       * @param {} obj\n       * @param {bool} deep\n       * @return {} obj cloned\n       */\n      Common.clone = function (obj, deep) {\n        return Common.extend({}, deep, obj);\n      };\n\n      /**\n       * Returns the list of keys for the given object.\n       * @method keys\n       * @param {} obj\n       * @return {string[]} keys\n       */\n      Common.keys = function (obj) {\n        if (Object.keys) return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj) keys.push(key);\n        return keys;\n      };\n\n      /**\n       * Returns the list of values for the given object.\n       * @method values\n       * @param {} obj\n       * @return {array} Array of the objects property values\n       */\n      Common.values = function (obj) {\n        var values = [];\n        if (Object.keys) {\n          var keys = Object.keys(obj);\n          for (var i = 0; i < keys.length; i++) {\n            values.push(obj[keys[i]]);\n          }\n          return values;\n        }\n\n        // avoid hasOwnProperty for performance\n        for (var key in obj) values.push(obj[key]);\n        return values;\n      };\n\n      /**\n       * Gets a value from `base` relative to the `path` string.\n       * @method get\n       * @param {} obj The base object\n       * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n       * @param {number} [begin] Path slice begin\n       * @param {number} [end] Path slice end\n       * @return {} The object at the given path\n       */\n      Common.get = function (obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n        for (var i = 0; i < path.length; i += 1) {\n          obj = obj[path[i]];\n        }\n        return obj;\n      };\n\n      /**\n       * Sets a value on `base` relative to the given `path` string.\n       * @method set\n       * @param {} obj The base object\n       * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n       * @param {} val The value to set\n       * @param {number} [begin] Path slice begin\n       * @param {number} [end] Path slice end\n       * @return {} Pass through `val` for chaining\n       */\n      Common.set = function (obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n      };\n\n      /**\n       * Shuffles the given array in-place.\n       * The function uses a seeded random generator.\n       * @method shuffle\n       * @param {array} array\n       * @return {array} array shuffled randomly\n       */\n      Common.shuffle = function (array) {\n        for (var i = array.length - 1; i > 0; i--) {\n          var j = Math.floor(Common.random() * (i + 1));\n          var temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n        }\n        return array;\n      };\n\n      /**\n       * Randomly chooses a value from a list with equal probability.\n       * The function uses a seeded random generator.\n       * @method choose\n       * @param {array} choices\n       * @return {object} A random choice object from the array\n       */\n      Common.choose = function (choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n      };\n\n      /**\n       * Returns true if the object is a HTMLElement, otherwise false.\n       * @method isElement\n       * @param {object} obj\n       * @return {boolean} True if the object is a HTMLElement, otherwise false\n       */\n      Common.isElement = function (obj) {\n        if (typeof HTMLElement !== 'undefined') {\n          return obj instanceof HTMLElement;\n        }\n        return !!(obj && obj.nodeType && obj.nodeName);\n      };\n\n      /**\n       * Returns true if the object is an array.\n       * @method isArray\n       * @param {object} obj\n       * @return {boolean} True if the object is an array, otherwise false\n       */\n      Common.isArray = function (obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n      };\n\n      /**\n       * Returns true if the object is a function.\n       * @method isFunction\n       * @param {object} obj\n       * @return {boolean} True if the object is a function, otherwise false\n       */\n      Common.isFunction = function (obj) {\n        return typeof obj === \"function\";\n      };\n\n      /**\n       * Returns true if the object is a plain object.\n       * @method isPlainObject\n       * @param {object} obj\n       * @return {boolean} True if the object is a plain object, otherwise false\n       */\n      Common.isPlainObject = function (obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n      };\n\n      /**\n       * Returns true if the object is a string.\n       * @method isString\n       * @param {object} obj\n       * @return {boolean} True if the object is a string, otherwise false\n       */\n      Common.isString = function (obj) {\n        return toString.call(obj) === '[object String]';\n      };\n\n      /**\n       * Returns the given value clamped between a minimum and maximum value.\n       * @method clamp\n       * @param {number} value\n       * @param {number} min\n       * @param {number} max\n       * @return {number} The value clamped between min and max inclusive\n       */\n      Common.clamp = function (value, min, max) {\n        if (value < min) return min;\n        if (value > max) return max;\n        return value;\n      };\n\n      /**\n       * Returns the sign of the given value.\n       * @method sign\n       * @param {number} value\n       * @return {number} -1 if negative, +1 if 0 or positive\n       */\n      Common.sign = function (value) {\n        return value < 0 ? -1 : 1;\n      };\n\n      /**\n       * Returns the current timestamp since the time origin (e.g. from page load).\n       * The result is in milliseconds and will use high-resolution timing if available.\n       * @method now\n       * @return {number} the current timestamp in milliseconds\n       */\n      Common.now = function () {\n        if (typeof window !== 'undefined' && window.performance) {\n          if (window.performance.now) {\n            return window.performance.now();\n          } else if (window.performance.webkitNow) {\n            return window.performance.webkitNow();\n          }\n        }\n        if (Date.now) {\n          return Date.now();\n        }\n        return new Date() - Common._nowStartTime;\n      };\n\n      /**\n       * Returns a random value between a minimum and a maximum value inclusive.\n       * The function uses a seeded random generator.\n       * @method random\n       * @param {number} min\n       * @param {number} max\n       * @return {number} A random number between min and max inclusive\n       */\n      Common.random = function (min, max) {\n        min = typeof min !== \"undefined\" ? min : 0;\n        max = typeof max !== \"undefined\" ? max : 1;\n        return min + _seededRandom() * (max - min);\n      };\n      var _seededRandom = function () {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n      };\n\n      /**\n       * Converts a CSS hex colour string into an integer.\n       * @method colorToNumber\n       * @param {string} colorString\n       * @return {number} An integer representing the CSS hex string\n       */\n      Common.colorToNumber = function (colorString) {\n        colorString = colorString.replace('#', '');\n        if (colorString.length == 3) {\n          colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n        }\n        return parseInt(colorString, 16);\n      };\n\n      /**\n       * The console logging level to use, where each level includes all levels above and excludes the levels below.\n       * The default level is 'debug' which shows all console messages.  \n       *\n       * Possible level values are:\n       * - 0 = None\n       * - 1 = Debug\n       * - 2 = Info\n       * - 3 = Warn\n       * - 4 = Error\n       * @static\n       * @property logLevel\n       * @type {Number}\n       * @default 1\n       */\n      Common.logLevel = 1;\n\n      /**\n       * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n       * The message will be prefixed with 'matter-js' to make it easily identifiable.\n       * @method log\n       * @param ...objs {} The objects to log.\n       */\n      Common.log = function () {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n          console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n      };\n\n      /**\n       * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n       * The message will be prefixed with 'matter-js' to make it easily identifiable.\n       * @method info\n       * @param ...objs {} The objects to log.\n       */\n      Common.info = function () {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n          console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n      };\n\n      /**\n       * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n       * The message will be prefixed with 'matter-js' to make it easily identifiable.\n       * @method warn\n       * @param ...objs {} The objects to log.\n       */\n      Common.warn = function () {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n          console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n      };\n\n      /**\n       * Uses `Common.warn` to log the given message one time only.\n       * @method warnOnce\n       * @param ...objs {} The objects to log.\n       */\n      Common.warnOnce = function () {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n        if (!Common._warnedOnce[message]) {\n          Common.warn(message);\n          Common._warnedOnce[message] = true;\n        }\n      };\n\n      /**\n       * Shows a deprecated console warning when the function on the given object is called.\n       * The target function will be replaced with a new function that first shows the warning\n       * and then calls the original function.\n       * @method deprecated\n       * @param {object} obj The object or module\n       * @param {string} name The property name of the function on obj\n       * @param {string} warning The one-time message to show if the function is called\n       */\n      Common.deprecated = function (obj, prop, warning) {\n        obj[prop] = Common.chain(function () {\n          Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n      };\n\n      /**\n       * Returns the next unique sequential ID.\n       * @method nextId\n       * @return {Number} Unique sequential ID\n       */\n      Common.nextId = function () {\n        return Common._nextId++;\n      };\n\n      /**\n       * A cross browser compatible indexOf implementation.\n       * @method indexOf\n       * @param {array} haystack\n       * @param {object} needle\n       * @return {number} The position of needle in haystack, otherwise -1.\n       */\n      Common.indexOf = function (haystack, needle) {\n        if (haystack.indexOf) return haystack.indexOf(needle);\n        for (var i = 0; i < haystack.length; i++) {\n          if (haystack[i] === needle) return i;\n        }\n        return -1;\n      };\n\n      /**\n       * A cross browser compatible array map implementation.\n       * @method map\n       * @param {array} list\n       * @param {function} func\n       * @return {array} Values from list transformed by func.\n       */\n      Common.map = function (list, func) {\n        if (list.map) {\n          return list.map(func);\n        }\n        var mapped = [];\n        for (var i = 0; i < list.length; i += 1) {\n          mapped.push(func(list[i]));\n        }\n        return mapped;\n      };\n\n      /**\n       * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n       * Circular dependencies are allowed.\n       * @method topologicalSort\n       * @param {object} graph\n       * @return {array} Partially ordered set of vertices in topological order.\n       */\n      Common.topologicalSort = function (graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n          visited = [],\n          temp = [];\n        for (var node in graph) {\n          if (!visited[node] && !temp[node]) {\n            Common._topologicalSort(node, visited, temp, graph, result);\n          }\n        }\n        return result;\n      };\n      Common._topologicalSort = function (node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n        for (var i = 0; i < neighbors.length; i += 1) {\n          var neighbor = neighbors[i];\n          if (temp[neighbor]) {\n            // skip circular dependencies\n            continue;\n          }\n          if (!visited[neighbor]) {\n            Common._topologicalSort(neighbor, visited, temp, graph, result);\n          }\n        }\n        temp[node] = false;\n        visited[node] = true;\n        result.push(node);\n      };\n\n      /**\n       * Takes _n_ functions as arguments and returns a new function that calls them in order.\n       * The arguments applied when calling the new function will also be applied to every function passed.\n       * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n       * Therefore if a passed function does not return a value, the previously returned value is maintained.\n       * After all passed functions have been called the new function returns the last returned value (if any).\n       * If any of the passed functions are a chain, then the chain will be flattened.\n       * @method chain\n       * @param ...funcs {function} The functions to chain.\n       * @return {function} A new function that calls the passed functions in order.\n       */\n      Common.chain = function () {\n        var funcs = [];\n        for (var i = 0; i < arguments.length; i += 1) {\n          var func = arguments[i];\n          if (func._chained) {\n            // flatten already chained functions\n            funcs.push.apply(funcs, func._chained);\n          } else {\n            funcs.push(func);\n          }\n        }\n        var chain = function () {\n          // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n          var lastResult,\n            args = new Array(arguments.length);\n          for (var i = 0, l = arguments.length; i < l; i++) {\n            args[i] = arguments[i];\n          }\n          for (i = 0; i < funcs.length; i += 1) {\n            var result = funcs[i].apply(lastResult, args);\n            if (typeof result !== 'undefined') {\n              lastResult = result;\n            }\n          }\n          return lastResult;\n        };\n        chain._chained = funcs;\n        return chain;\n      };\n\n      /**\n       * Chains a function to excute before the original function on the given `path` relative to `base`.\n       * See also docs for `Common.chain`.\n       * @method chainPathBefore\n       * @param {} base The base object\n       * @param {string} path The path relative to `base`\n       * @param {function} func The function to chain before the original\n       * @return {function} The chained function that replaced the original\n       */\n      Common.chainPathBefore = function (base, path, func) {\n        return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n      };\n\n      /**\n       * Chains a function to excute after the original function on the given `path` relative to `base`.\n       * See also docs for `Common.chain`.\n       * @method chainPathAfter\n       * @param {} base The base object\n       * @param {string} path The path relative to `base`\n       * @param {function} func The function to chain after the original\n       * @return {function} The chained function that replaced the original\n       */\n      Common.chainPathAfter = function (base, path, func) {\n        return Common.set(base, path, Common.chain(Common.get(base, path), func));\n      };\n\n      /**\n       * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n       * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n       * @method setDecomp\n       * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n       */\n      Common.setDecomp = function (decomp) {\n        Common._decomp = decomp;\n      };\n\n      /**\n       * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n       * otherwise returns the global `decomp` if set.\n       * @method getDecomp\n       * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n       */\n      Common.getDecomp = function () {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n        try {\n          // otherwise from window global\n          if (!decomp && typeof window !== 'undefined') {\n            decomp = window.decomp;\n          }\n\n          // otherwise from node global\n          if (!decomp && typeof global !== 'undefined') {\n            decomp = global.decomp;\n          }\n        } catch (e) {\n          // decomp not available\n          decomp = null;\n        }\n        return decomp;\n      };\n    })();\n\n    /***/\n  }), (/* 1 */\n  /***/function (module, exports) {\n    /**\n    * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n    *\n    * @class Bounds\n    */\n\n    var Bounds = {};\n    module.exports = Bounds;\n    (function () {\n      /**\n       * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n       * @method create\n       * @param {vertices} vertices\n       * @return {bounds} A new bounds object\n       */\n      Bounds.create = function (vertices) {\n        var bounds = {\n          min: {\n            x: 0,\n            y: 0\n          },\n          max: {\n            x: 0,\n            y: 0\n          }\n        };\n        if (vertices) Bounds.update(bounds, vertices);\n        return bounds;\n      };\n\n      /**\n       * Updates bounds using the given vertices and extends the bounds given a velocity.\n       * @method update\n       * @param {bounds} bounds\n       * @param {vertices} vertices\n       * @param {vector} velocity\n       */\n      Bounds.update = function (bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n        for (var i = 0; i < vertices.length; i++) {\n          var vertex = vertices[i];\n          if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n          if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n          if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n          if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        if (velocity) {\n          if (velocity.x > 0) {\n            bounds.max.x += velocity.x;\n          } else {\n            bounds.min.x += velocity.x;\n          }\n          if (velocity.y > 0) {\n            bounds.max.y += velocity.y;\n          } else {\n            bounds.min.y += velocity.y;\n          }\n        }\n      };\n\n      /**\n       * Returns true if the bounds contains the given point.\n       * @method contains\n       * @param {bounds} bounds\n       * @param {vector} point\n       * @return {boolean} True if the bounds contain the point, otherwise false\n       */\n      Bounds.contains = function (bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n      };\n\n      /**\n       * Returns true if the two bounds intersect.\n       * @method overlaps\n       * @param {bounds} boundsA\n       * @param {bounds} boundsB\n       * @return {boolean} True if the bounds overlap, otherwise false\n       */\n      Bounds.overlaps = function (boundsA, boundsB) {\n        return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n      };\n\n      /**\n       * Translates the bounds by the given vector.\n       * @method translate\n       * @param {bounds} bounds\n       * @param {vector} vector\n       */\n      Bounds.translate = function (bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n      };\n\n      /**\n       * Shifts the bounds to the given position.\n       * @method shift\n       * @param {bounds} bounds\n       * @param {vector} position\n       */\n      Bounds.shift = function (bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n          deltaY = bounds.max.y - bounds.min.y;\n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n      };\n    })();\n\n    /***/\n  }), (/* 2 */\n  /***/function (module, exports) {\n    /**\n    * The `Matter.Vector` module contains methods for creating and manipulating vectors.\n    * Vectors are the basis of all the geometry related operations in the engine.\n    * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Vector\n    */\n\n    // TODO: consider params for reusing vector objects\n\n    var Vector = {};\n    module.exports = Vector;\n    (function () {\n      /**\n       * Creates a new vector.\n       * @method create\n       * @param {number} x\n       * @param {number} y\n       * @return {vector} A new vector\n       */\n      Vector.create = function (x, y) {\n        return {\n          x: x || 0,\n          y: y || 0\n        };\n      };\n\n      /**\n       * Returns a new vector with `x` and `y` copied from the given `vector`.\n       * @method clone\n       * @param {vector} vector\n       * @return {vector} A new cloned vector\n       */\n      Vector.clone = function (vector) {\n        return {\n          x: vector.x,\n          y: vector.y\n        };\n      };\n\n      /**\n       * Returns the magnitude (length) of a vector.\n       * @method magnitude\n       * @param {vector} vector\n       * @return {number} The magnitude of the vector\n       */\n      Vector.magnitude = function (vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n      };\n\n      /**\n       * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n       * @method magnitudeSquared\n       * @param {vector} vector\n       * @return {number} The squared magnitude of the vector\n       */\n      Vector.magnitudeSquared = function (vector) {\n        return vector.x * vector.x + vector.y * vector.y;\n      };\n\n      /**\n       * Rotates the vector about (0, 0) by specified angle.\n       * @method rotate\n       * @param {vector} vector\n       * @param {number} angle\n       * @param {vector} [output]\n       * @return {vector} The vector rotated about (0, 0)\n       */\n      Vector.rotate = function (vector, angle, output) {\n        var cos = Math.cos(angle),\n          sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n      };\n\n      /**\n       * Rotates the vector about a specified point by specified angle.\n       * @method rotateAbout\n       * @param {vector} vector\n       * @param {number} angle\n       * @param {vector} point\n       * @param {vector} [output]\n       * @return {vector} A new vector rotated about the point\n       */\n      Vector.rotateAbout = function (vector, angle, point, output) {\n        var cos = Math.cos(angle),\n          sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n      };\n\n      /**\n       * Normalises a vector (such that its magnitude is `1`).\n       * @method normalise\n       * @param {vector} vector\n       * @return {vector} A new vector normalised\n       */\n      Vector.normalise = function (vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0) return {\n          x: 0,\n          y: 0\n        };\n        return {\n          x: vector.x / magnitude,\n          y: vector.y / magnitude\n        };\n      };\n\n      /**\n       * Returns the dot-product of two vectors.\n       * @method dot\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @return {number} The dot product of the two vectors\n       */\n      Vector.dot = function (vectorA, vectorB) {\n        return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n      };\n\n      /**\n       * Returns the cross-product of two vectors.\n       * @method cross\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @return {number} The cross product of the two vectors\n       */\n      Vector.cross = function (vectorA, vectorB) {\n        return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n      };\n\n      /**\n       * Returns the cross-product of three vectors.\n       * @method cross3\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @param {vector} vectorC\n       * @return {number} The cross product of the three vectors\n       */\n      Vector.cross3 = function (vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n      };\n\n      /**\n       * Adds the two vectors.\n       * @method add\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @param {vector} [output]\n       * @return {vector} A new vector of vectorA and vectorB added\n       */\n      Vector.add = function (vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n      };\n\n      /**\n       * Subtracts the two vectors.\n       * @method sub\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @param {vector} [output]\n       * @return {vector} A new vector of vectorA and vectorB subtracted\n       */\n      Vector.sub = function (vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n      };\n\n      /**\n       * Multiplies a vector and a scalar.\n       * @method mult\n       * @param {vector} vector\n       * @param {number} scalar\n       * @return {vector} A new vector multiplied by scalar\n       */\n      Vector.mult = function (vector, scalar) {\n        return {\n          x: vector.x * scalar,\n          y: vector.y * scalar\n        };\n      };\n\n      /**\n       * Divides a vector and a scalar.\n       * @method div\n       * @param {vector} vector\n       * @param {number} scalar\n       * @return {vector} A new vector divided by scalar\n       */\n      Vector.div = function (vector, scalar) {\n        return {\n          x: vector.x / scalar,\n          y: vector.y / scalar\n        };\n      };\n\n      /**\n       * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n       * @method perp\n       * @param {vector} vector\n       * @param {bool} [negate=false]\n       * @return {vector} The perpendicular vector\n       */\n      Vector.perp = function (vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return {\n          x: negate * -vector.y,\n          y: negate * vector.x\n        };\n      };\n\n      /**\n       * Negates both components of a vector such that it points in the opposite direction.\n       * @method neg\n       * @param {vector} vector\n       * @return {vector} The negated vector\n       */\n      Vector.neg = function (vector) {\n        return {\n          x: -vector.x,\n          y: -vector.y\n        };\n      };\n\n      /**\n       * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n       * @method angle\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @return {number} The angle in radians\n       */\n      Vector.angle = function (vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n      };\n\n      /**\n       * Temporary vector pool (not thread-safe).\n       * @property _temp\n       * @type {vector[]}\n       * @private\n       */\n      Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n    })();\n\n    /***/\n  }), (/* 3 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n    * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n    * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Vertices\n    */\n\n    var Vertices = {};\n    module.exports = Vertices;\n    var Vector = __webpack_require__(2);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Creates a new set of `Matter.Body` compatible vertices.\n       * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n       *\n       *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n       *\n       * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n       * but with some additional references required for efficient collision detection routines.\n       *\n       * Vertices must be specified in clockwise order.\n       *\n       * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n       *\n       * @method create\n       * @param {vector[]} points\n       * @param {body} body\n       */\n      Vertices.create = function (points, body) {\n        var vertices = [];\n        for (var i = 0; i < points.length; i++) {\n          var point = points[i],\n            vertex = {\n              x: point.x,\n              y: point.y,\n              index: i,\n              body: body,\n              isInternal: false\n            };\n          vertices.push(vertex);\n        }\n        return vertices;\n      };\n\n      /**\n       * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n       * into a `Matter.Vertices` object for the given `Matter.Body`.\n       * For parsing SVG paths, see `Svg.pathToVertices`.\n       * @method fromPath\n       * @param {string} path\n       * @param {body} body\n       * @return {vertices} vertices\n       */\n      Vertices.fromPath = function (path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n          points = [];\n        path.replace(pathPattern, function (match, x, y) {\n          points.push({\n            x: parseFloat(x),\n            y: parseFloat(y)\n          });\n        });\n        return Vertices.create(points, body);\n      };\n\n      /**\n       * Returns the centre (centroid) of the set of vertices.\n       * @method centre\n       * @param {vertices} vertices\n       * @return {vector} The centre point\n       */\n      Vertices.centre = function (vertices) {\n        var area = Vertices.area(vertices, true),\n          centre = {\n            x: 0,\n            y: 0\n          },\n          cross,\n          temp,\n          j;\n        for (var i = 0; i < vertices.length; i++) {\n          j = (i + 1) % vertices.length;\n          cross = Vector.cross(vertices[i], vertices[j]);\n          temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n          centre = Vector.add(centre, temp);\n        }\n        return Vector.div(centre, 6 * area);\n      };\n\n      /**\n       * Returns the average (mean) of the set of vertices.\n       * @method mean\n       * @param {vertices} vertices\n       * @return {vector} The average point\n       */\n      Vertices.mean = function (vertices) {\n        var average = {\n          x: 0,\n          y: 0\n        };\n        for (var i = 0; i < vertices.length; i++) {\n          average.x += vertices[i].x;\n          average.y += vertices[i].y;\n        }\n        return Vector.div(average, vertices.length);\n      };\n\n      /**\n       * Returns the area of the set of vertices.\n       * @method area\n       * @param {vertices} vertices\n       * @param {bool} signed\n       * @return {number} The area\n       */\n      Vertices.area = function (vertices, signed) {\n        var area = 0,\n          j = vertices.length - 1;\n        for (var i = 0; i < vertices.length; i++) {\n          area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n          j = i;\n        }\n        if (signed) return area / 2;\n        return Math.abs(area) / 2;\n      };\n\n      /**\n       * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n       * @method inertia\n       * @param {vertices} vertices\n       * @param {number} mass\n       * @return {number} The polygon's moment of inertia\n       */\n      Vertices.inertia = function (vertices, mass) {\n        var numerator = 0,\n          denominator = 0,\n          v = vertices,\n          cross,\n          j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n          j = (n + 1) % v.length;\n          cross = Math.abs(Vector.cross(v[j], v[n]));\n          numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n          denominator += cross;\n        }\n        return mass / 6 * (numerator / denominator);\n      };\n\n      /**\n       * Translates the set of vertices in-place.\n       * @method translate\n       * @param {vertices} vertices\n       * @param {vector} vector\n       * @param {number} scalar\n       */\n      Vertices.translate = function (vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n        var verticesLength = vertices.length,\n          translateX = vector.x * scalar,\n          translateY = vector.y * scalar,\n          i;\n        for (i = 0; i < verticesLength; i++) {\n          vertices[i].x += translateX;\n          vertices[i].y += translateY;\n        }\n        return vertices;\n      };\n\n      /**\n       * Rotates the set of vertices in-place.\n       * @method rotate\n       * @param {vertices} vertices\n       * @param {number} angle\n       * @param {vector} point\n       */\n      Vertices.rotate = function (vertices, angle, point) {\n        if (angle === 0) return;\n        var cos = Math.cos(angle),\n          sin = Math.sin(angle),\n          pointX = point.x,\n          pointY = point.y,\n          verticesLength = vertices.length,\n          vertex,\n          dx,\n          dy,\n          i;\n        for (i = 0; i < verticesLength; i++) {\n          vertex = vertices[i];\n          dx = vertex.x - pointX;\n          dy = vertex.y - pointY;\n          vertex.x = pointX + (dx * cos - dy * sin);\n          vertex.y = pointY + (dx * sin + dy * cos);\n        }\n        return vertices;\n      };\n\n      /**\n       * Returns `true` if the `point` is inside the set of `vertices`.\n       * @method contains\n       * @param {vertices} vertices\n       * @param {vector} point\n       * @return {boolean} True if the vertices contains point, otherwise false\n       */\n      Vertices.contains = function (vertices, point) {\n        var pointX = point.x,\n          pointY = point.y,\n          verticesLength = vertices.length,\n          vertex = vertices[verticesLength - 1],\n          nextVertex;\n        for (var i = 0; i < verticesLength; i++) {\n          nextVertex = vertices[i];\n          if ((pointX - vertex.x) * (nextVertex.y - vertex.y) + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n            return false;\n          }\n          vertex = nextVertex;\n        }\n        return true;\n      };\n\n      /**\n       * Scales the vertices from a point (default is centre) in-place.\n       * @method scale\n       * @param {vertices} vertices\n       * @param {number} scaleX\n       * @param {number} scaleY\n       * @param {vector} point\n       */\n      Vertices.scale = function (vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1) return vertices;\n        point = point || Vertices.centre(vertices);\n        var vertex, delta;\n        for (var i = 0; i < vertices.length; i++) {\n          vertex = vertices[i];\n          delta = Vector.sub(vertex, point);\n          vertices[i].x = point.x + delta.x * scaleX;\n          vertices[i].y = point.y + delta.y * scaleY;\n        }\n        return vertices;\n      };\n\n      /**\n       * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n       * The radius parameter is a single number or an array to specify the radius for each vertex.\n       * @method chamfer\n       * @param {vertices} vertices\n       * @param {number[]} radius\n       * @param {number} quality\n       * @param {number} qualityMin\n       * @param {number} qualityMax\n       */\n      Vertices.chamfer = function (vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n          radius = [radius];\n        } else {\n          radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = typeof quality !== 'undefined' ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n        var newVertices = [];\n        for (var i = 0; i < vertices.length; i++) {\n          var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n            vertex = vertices[i],\n            nextVertex = vertices[(i + 1) % vertices.length],\n            currentRadius = radius[i < radius.length ? i : radius.length - 1];\n          if (currentRadius === 0) {\n            newVertices.push(vertex);\n            continue;\n          }\n          var prevNormal = Vector.normalise({\n            x: vertex.y - prevVertex.y,\n            y: prevVertex.x - vertex.x\n          });\n          var nextNormal = Vector.normalise({\n            x: nextVertex.y - vertex.y,\n            y: vertex.x - nextVertex.x\n          });\n          var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n            radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n            midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n            scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n          var precision = quality;\n          if (quality === -1) {\n            // automatically decide precision\n            precision = Math.pow(currentRadius, 0.32) * 1.75;\n          }\n          precision = Common.clamp(precision, qualityMin, qualityMax);\n\n          // use an even value for precision, more likely to reduce axes by using symmetry\n          if (precision % 2 === 1) precision += 1;\n          var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n            theta = alpha / precision;\n          for (var j = 0; j < precision; j++) {\n            newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n          }\n        }\n        return newVertices;\n      };\n\n      /**\n       * Sorts the input vertices into clockwise order in place.\n       * @method clockwiseSort\n       * @param {vertices} vertices\n       * @return {vertices} vertices\n       */\n      Vertices.clockwiseSort = function (vertices) {\n        var centre = Vertices.mean(vertices);\n        vertices.sort(function (vertexA, vertexB) {\n          return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n        return vertices;\n      };\n\n      /**\n       * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n       * @method isConvex\n       * @param {vertices} vertices\n       * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n       */\n      Vertices.isConvex = function (vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n          n = vertices.length,\n          i,\n          j,\n          k,\n          z;\n        if (n < 3) return null;\n        for (i = 0; i < n; i++) {\n          j = (i + 1) % n;\n          k = (i + 2) % n;\n          z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n          z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n          if (z < 0) {\n            flag |= 1;\n          } else if (z > 0) {\n            flag |= 2;\n          }\n          if (flag === 3) {\n            return false;\n          }\n        }\n        if (flag !== 0) {\n          return true;\n        } else {\n          return null;\n        }\n      };\n\n      /**\n       * Returns the convex hull of the input vertices as a new array of points.\n       * @method hull\n       * @param {vertices} vertices\n       * @return [vertex] vertices\n       */\n      Vertices.hull = function (vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n          lower = [],\n          vertex,\n          i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function (vertexA, vertexB) {\n          var dx = vertexA.x - vertexB.x;\n          return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n          vertex = vertices[i];\n          while (lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n            lower.pop();\n          }\n          lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n          vertex = vertices[i];\n          while (upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n            upper.pop();\n          }\n          upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n        return upper.concat(lower);\n      };\n    })();\n\n    /***/\n  }), (/* 4 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Body` module contains methods for creating and manipulating rigid bodies.\n    * For creating bodies with common configurations such as rectangles, circles and other polygons see the module `Matter.Bodies`.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    \n    * @class Body\n    */\n\n    var Body = {};\n    module.exports = Body;\n    var Vertices = __webpack_require__(3);\n    var Vector = __webpack_require__(2);\n    var Sleeping = __webpack_require__(7);\n    var Common = __webpack_require__(0);\n    var Bounds = __webpack_require__(1);\n    var Axes = __webpack_require__(11);\n    (function () {\n      Body._timeCorrection = true;\n      Body._inertiaScale = 4;\n      Body._nextCollidingGroupId = 1;\n      Body._nextNonCollidingGroupId = -1;\n      Body._nextCategory = 0x0001;\n      Body._baseDelta = 1000 / 60;\n\n      /**\n       * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n       * All properties have default values, and many are pre-calculated automatically based on other properties.\n       * Vertices must be specified in clockwise order.\n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {} options\n       * @return {body} body\n       */\n      Body.create = function (options) {\n        var defaults = {\n          id: Common.nextId(),\n          type: 'body',\n          label: 'Body',\n          parts: [],\n          plugin: {},\n          angle: 0,\n          vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n          position: {\n            x: 0,\n            y: 0\n          },\n          force: {\n            x: 0,\n            y: 0\n          },\n          torque: 0,\n          positionImpulse: {\n            x: 0,\n            y: 0\n          },\n          constraintImpulse: {\n            x: 0,\n            y: 0,\n            angle: 0\n          },\n          totalContacts: 0,\n          speed: 0,\n          angularSpeed: 0,\n          velocity: {\n            x: 0,\n            y: 0\n          },\n          angularVelocity: 0,\n          isSensor: false,\n          isStatic: false,\n          isSleeping: false,\n          motion: 0,\n          sleepThreshold: 60,\n          density: 0.001,\n          restitution: 0,\n          friction: 0.1,\n          frictionStatic: 0.5,\n          frictionAir: 0.01,\n          collisionFilter: {\n            category: 0x0001,\n            mask: 0xFFFFFFFF,\n            group: 0\n          },\n          slop: 0.05,\n          timeScale: 1,\n          render: {\n            visible: true,\n            opacity: 1,\n            strokeStyle: null,\n            fillStyle: null,\n            lineWidth: null,\n            sprite: {\n              xScale: 1,\n              yScale: 1,\n              xOffset: 0,\n              yOffset: 0\n            }\n          },\n          events: null,\n          bounds: null,\n          chamfer: null,\n          circleRadius: 0,\n          positionPrev: null,\n          anglePrev: 0,\n          parent: null,\n          axes: null,\n          area: 0,\n          mass: 0,\n          inertia: 0,\n          deltaTime: 1000 / 60,\n          _original: null\n        };\n        var body = Common.extend(defaults, options);\n        _initProperties(body, options);\n        return body;\n      };\n\n      /**\n       * Returns the next unique group index for which bodies will collide.\n       * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n       * See `body.collisionFilter` for more information.\n       * @method nextGroup\n       * @param {bool} [isNonColliding=false]\n       * @return {Number} Unique group index\n       */\n      Body.nextGroup = function (isNonColliding) {\n        if (isNonColliding) return Body._nextNonCollidingGroupId--;\n        return Body._nextCollidingGroupId++;\n      };\n\n      /**\n       * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n       * There are 32 available. See `body.collisionFilter` for more information.\n       * @method nextCategory\n       * @return {Number} Unique category bitfield\n       */\n      Body.nextCategory = function () {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n      };\n\n      /**\n       * Initialises body properties.\n       * @method _initProperties\n       * @private\n       * @param {body} body\n       * @param {} [options]\n       */\n      var _initProperties = function (body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n          bounds: body.bounds || Bounds.create(body.vertices),\n          positionPrev: body.positionPrev || Vector.clone(body.position),\n          anglePrev: body.anglePrev || body.angle,\n          vertices: body.vertices,\n          parts: body.parts || [body],\n          isStatic: body.isStatic,\n          isSleeping: body.isSleeping,\n          parent: body.parent || body\n        });\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n          axes: options.axes || body.axes,\n          area: options.area || body.area,\n          mass: options.mass || body.mass,\n          inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1']),\n          defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n          defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n      };\n\n      /**\n       * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n       * Prefer to use the actual setter functions in performance critical situations.\n       * @method set\n       * @param {body} body\n       * @param {} settings A property name (or map of properties and values) to set on the body.\n       * @param {} value The value to set if `settings` is a single property name.\n       */\n      Body.set = function (body, settings, value) {\n        var property;\n        if (typeof settings === 'string') {\n          property = settings;\n          settings = {};\n          settings[property] = value;\n        }\n        for (property in settings) {\n          if (!Object.prototype.hasOwnProperty.call(settings, property)) continue;\n          value = settings[property];\n          switch (property) {\n            case 'isStatic':\n              Body.setStatic(body, value);\n              break;\n            case 'isSleeping':\n              Sleeping.set(body, value);\n              break;\n            case 'mass':\n              Body.setMass(body, value);\n              break;\n            case 'density':\n              Body.setDensity(body, value);\n              break;\n            case 'inertia':\n              Body.setInertia(body, value);\n              break;\n            case 'vertices':\n              Body.setVertices(body, value);\n              break;\n            case 'position':\n              Body.setPosition(body, value);\n              break;\n            case 'angle':\n              Body.setAngle(body, value);\n              break;\n            case 'velocity':\n              Body.setVelocity(body, value);\n              break;\n            case 'angularVelocity':\n              Body.setAngularVelocity(body, value);\n              break;\n            case 'speed':\n              Body.setSpeed(body, value);\n              break;\n            case 'angularSpeed':\n              Body.setAngularSpeed(body, value);\n              break;\n            case 'parts':\n              Body.setParts(body, value);\n              break;\n            case 'centre':\n              Body.setCentre(body, value);\n              break;\n            default:\n              body[property] = value;\n          }\n        }\n      };\n\n      /**\n       * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n       * @method setStatic\n       * @param {body} body\n       * @param {bool} isStatic\n       */\n      Body.setStatic = function (body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n          var part = body.parts[i];\n          if (isStatic) {\n            if (!part.isStatic) {\n              part._original = {\n                restitution: part.restitution,\n                friction: part.friction,\n                mass: part.mass,\n                inertia: part.inertia,\n                density: part.density,\n                inverseMass: part.inverseMass,\n                inverseInertia: part.inverseInertia\n              };\n            }\n            part.restitution = 0;\n            part.friction = 1;\n            part.mass = part.inertia = part.density = Infinity;\n            part.inverseMass = part.inverseInertia = 0;\n            part.positionPrev.x = part.position.x;\n            part.positionPrev.y = part.position.y;\n            part.anglePrev = part.angle;\n            part.angularVelocity = 0;\n            part.speed = 0;\n            part.angularSpeed = 0;\n            part.motion = 0;\n          } else if (part._original) {\n            part.restitution = part._original.restitution;\n            part.friction = part._original.friction;\n            part.mass = part._original.mass;\n            part.inertia = part._original.inertia;\n            part.density = part._original.density;\n            part.inverseMass = part._original.inverseMass;\n            part.inverseInertia = part._original.inverseInertia;\n            part._original = null;\n          }\n          part.isStatic = isStatic;\n        }\n      };\n\n      /**\n       * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n       * @method setMass\n       * @param {body} body\n       * @param {number} mass\n       */\n      Body.setMass = function (body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n      };\n\n      /**\n       * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n       * @method setDensity\n       * @param {body} body\n       * @param {number} density\n       */\n      Body.setDensity = function (body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n      };\n\n      /**\n       * Sets the moment of inertia of the body. This is the second moment of area in two dimensions.\n       * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n       * @method setInertia\n       * @param {body} body\n       * @param {number} inertia\n       */\n      Body.setInertia = function (body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n      };\n\n      /**\n       * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n       * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n       * They are then automatically translated to world space based on `body.position`.\n       *\n       * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n       * Vertices must form a convex hull. Concave vertices must be decomposed into convex parts.\n       * \n       * @method setVertices\n       * @param {body} body\n       * @param {vector[]} vertices\n       */\n      Body.setVertices = function (body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n          body.vertices = vertices;\n        } else {\n          body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n      };\n\n      /**\n       * Sets the parts of the `body`. \n       * \n       * See `body.parts` for details and requirements on how parts are used.\n       * \n       * See Bodies.fromVertices for a related utility.\n       * \n       * This function updates `body` mass, inertia and centroid based on the parts geometry.  \n       * Sets each `part.parent` to be this `body`.  \n       * \n       * The convex hull is computed and set on this `body` (unless `autoHull` is `false`).  \n       * Automatically ensures that the first part in `body.parts` is the `body`.\n       * @method setParts\n       * @param {body} body\n       * @param {body[]} parts\n       * @param {bool} [autoHull=true]\n       */\n      Body.setParts = function (body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n        for (i = 0; i < parts.length; i++) {\n          var part = parts[i];\n          if (part !== body) {\n            part.parent = body;\n            body.parts.push(part);\n          }\n        }\n        if (body.parts.length === 1) return;\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n          var vertices = [];\n          for (i = 0; i < parts.length; i++) {\n            vertices = vertices.concat(parts[i].vertices);\n          }\n          Vertices.clockwiseSort(vertices);\n          var hull = Vertices.hull(vertices),\n            hullCentre = Vertices.centre(hull);\n          Body.setVertices(body, hull);\n          Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n      };\n\n      /**\n       * Set the centre of mass of the body. \n       * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n       * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n       * This is equal to moving `body.position` but not the `body.vertices`.\n       * Invalid if the `centre` falls outside the body's convex hull.\n       * @method setCentre\n       * @param {body} body\n       * @param {vector} centre\n       * @param {bool} relative\n       */\n      Body.setCentre = function (body, centre, relative) {\n        if (!relative) {\n          body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n          body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n          body.position.x = centre.x;\n          body.position.y = centre.y;\n        } else {\n          body.positionPrev.x += centre.x;\n          body.positionPrev.y += centre.y;\n          body.position.x += centre.x;\n          body.position.y += centre.y;\n        }\n      };\n\n      /**\n       * Sets the position of the body. By default velocity is unchanged.\n       * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n       * @method setPosition\n       * @param {body} body\n       * @param {vector} position\n       * @param {boolean} [updateVelocity=false]\n       */\n      Body.setPosition = function (body, position, updateVelocity) {\n        var delta = Vector.sub(position, body.position);\n        if (updateVelocity) {\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.velocity.x = delta.x;\n          body.velocity.y = delta.y;\n          body.speed = Vector.magnitude(delta);\n        } else {\n          body.positionPrev.x += delta.x;\n          body.positionPrev.y += delta.y;\n        }\n        for (var i = 0; i < body.parts.length; i++) {\n          var part = body.parts[i];\n          part.position.x += delta.x;\n          part.position.y += delta.y;\n          Vertices.translate(part.vertices, delta);\n          Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n      };\n\n      /**\n       * Sets the angle of the body. By default angular velocity is unchanged.\n       * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n       * @method setAngle\n       * @param {body} body\n       * @param {number} angle\n       * @param {boolean} [updateVelocity=false]\n       */\n      Body.setAngle = function (body, angle, updateVelocity) {\n        var delta = angle - body.angle;\n        if (updateVelocity) {\n          body.anglePrev = body.angle;\n          body.angularVelocity = delta;\n          body.angularSpeed = Math.abs(delta);\n        } else {\n          body.anglePrev += delta;\n        }\n        for (var i = 0; i < body.parts.length; i++) {\n          var part = body.parts[i];\n          part.angle += delta;\n          Vertices.rotate(part.vertices, delta, body.position);\n          Axes.rotate(part.axes, delta);\n          Bounds.update(part.bounds, part.vertices, body.velocity);\n          if (i > 0) {\n            Vector.rotateAbout(part.position, delta, body.position, part.position);\n          }\n        }\n      };\n\n      /**\n       * Sets the current linear velocity of the body.  \n       * Affects body speed.\n       * @method setVelocity\n       * @param {body} body\n       * @param {vector} velocity\n       */\n      Body.setVelocity = function (body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.positionPrev.x = body.position.x - velocity.x * timeScale;\n        body.positionPrev.y = body.position.y - velocity.y * timeScale;\n        body.velocity.x = (body.position.x - body.positionPrev.x) / timeScale;\n        body.velocity.y = (body.position.y - body.positionPrev.y) / timeScale;\n        body.speed = Vector.magnitude(body.velocity);\n      };\n\n      /**\n       * Gets the current linear velocity of the body.\n       * @method getVelocity\n       * @param {body} body\n       * @return {vector} velocity\n       */\n      Body.getVelocity = function (body) {\n        var timeScale = Body._baseDelta / body.deltaTime;\n        return {\n          x: (body.position.x - body.positionPrev.x) * timeScale,\n          y: (body.position.y - body.positionPrev.y) * timeScale\n        };\n      };\n\n      /**\n       * Gets the current linear speed of the body.  \n       * Equivalent to the magnitude of its velocity.\n       * @method getSpeed\n       * @param {body} body\n       * @return {number} speed\n       */\n      Body.getSpeed = function (body) {\n        return Vector.magnitude(Body.getVelocity(body));\n      };\n\n      /**\n       * Sets the current linear speed of the body.  \n       * Direction is maintained. Affects body velocity.\n       * @method setSpeed\n       * @param {body} body\n       * @param {number} speed\n       */\n      Body.setSpeed = function (body, speed) {\n        Body.setVelocity(body, Vector.mult(Vector.normalise(Body.getVelocity(body)), speed));\n      };\n\n      /**\n       * Sets the current rotational velocity of the body.  \n       * Affects body angular speed.\n       * @method setAngularVelocity\n       * @param {body} body\n       * @param {number} velocity\n       */\n      Body.setAngularVelocity = function (body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.anglePrev = body.angle - velocity * timeScale;\n        body.angularVelocity = (body.angle - body.anglePrev) / timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n      };\n\n      /**\n       * Gets the current rotational velocity of the body.\n       * @method getAngularVelocity\n       * @param {body} body\n       * @return {number} angular velocity\n       */\n      Body.getAngularVelocity = function (body) {\n        return (body.angle - body.anglePrev) * Body._baseDelta / body.deltaTime;\n      };\n\n      /**\n       * Gets the current rotational speed of the body.  \n       * Equivalent to the magnitude of its angular velocity.\n       * @method getAngularSpeed\n       * @param {body} body\n       * @return {number} angular speed\n       */\n      Body.getAngularSpeed = function (body) {\n        return Math.abs(Body.getAngularVelocity(body));\n      };\n\n      /**\n       * Sets the current rotational speed of the body.  \n       * Direction is maintained. Affects body angular velocity.\n       * @method setAngularSpeed\n       * @param {body} body\n       * @param {number} speed\n       */\n      Body.setAngularSpeed = function (body, speed) {\n        Body.setAngularVelocity(body, Common.sign(Body.getAngularVelocity(body)) * speed);\n      };\n\n      /**\n       * Moves a body by a given vector relative to its current position. By default velocity is unchanged.\n       * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n       * @method translate\n       * @param {body} body\n       * @param {vector} translation\n       * @param {boolean} [updateVelocity=false]\n       */\n      Body.translate = function (body, translation, updateVelocity) {\n        Body.setPosition(body, Vector.add(body.position, translation), updateVelocity);\n      };\n\n      /**\n       * Rotates a body by a given angle relative to its current angle. By default angular velocity is unchanged.\n       * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n       * @method rotate\n       * @param {body} body\n       * @param {number} rotation\n       * @param {vector} [point]\n       * @param {boolean} [updateVelocity=false]\n       */\n      Body.rotate = function (body, rotation, point, updateVelocity) {\n        if (!point) {\n          Body.setAngle(body, body.angle + rotation, updateVelocity);\n        } else {\n          var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            dx = body.position.x - point.x,\n            dy = body.position.y - point.y;\n          Body.setPosition(body, {\n            x: point.x + (dx * cos - dy * sin),\n            y: point.y + (dx * sin + dy * cos)\n          }, updateVelocity);\n          Body.setAngle(body, body.angle + rotation, updateVelocity);\n        }\n      };\n\n      /**\n       * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n       * @method scale\n       * @param {body} body\n       * @param {number} scaleX\n       * @param {number} scaleY\n       * @param {vector} [point]\n       */\n      Body.scale = function (body, scaleX, scaleY, point) {\n        var totalArea = 0,\n          totalInertia = 0;\n        point = point || body.position;\n        for (var i = 0; i < body.parts.length; i++) {\n          var part = body.parts[i];\n\n          // scale vertices\n          Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n          // update properties\n          part.axes = Axes.fromVertices(part.vertices);\n          part.area = Vertices.area(part.vertices);\n          Body.setMass(part, body.density * part.area);\n\n          // update inertia (requires vertices to be at origin)\n          Vertices.translate(part.vertices, {\n            x: -part.position.x,\n            y: -part.position.y\n          });\n          Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n          Vertices.translate(part.vertices, {\n            x: part.position.x,\n            y: part.position.y\n          });\n          if (i > 0) {\n            totalArea += part.area;\n            totalInertia += part.inertia;\n          }\n\n          // scale position\n          part.position.x = point.x + (part.position.x - point.x) * scaleX;\n          part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n          // update bounds\n          Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n          body.area = totalArea;\n          if (!body.isStatic) {\n            Body.setMass(body, body.density * totalArea);\n            Body.setInertia(body, totalInertia);\n          }\n        }\n\n        // handle circles\n        if (body.circleRadius) {\n          if (scaleX === scaleY) {\n            body.circleRadius *= scaleX;\n          } else {\n            // body is no longer a circle\n            body.circleRadius = null;\n          }\n        }\n      };\n\n      /**\n       * Performs an update by integrating the equations of motion on the `body`.\n       * This is applied every update by `Matter.Engine` automatically.\n       * @method update\n       * @param {body} body\n       * @param {number} [deltaTime=16.666]\n       */\n      Body.update = function (body, deltaTime) {\n        deltaTime = (typeof deltaTime !== 'undefined' ? deltaTime : 1000 / 60) * body.timeScale;\n        var deltaTimeSquared = deltaTime * deltaTime,\n          correction = Body._timeCorrection ? deltaTime / (body.deltaTime || deltaTime) : 1;\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * (deltaTime / Common._baseDelta),\n          velocityPrevX = (body.position.x - body.positionPrev.x) * correction,\n          velocityPrevY = (body.position.y - body.positionPrev.y) * correction;\n\n        // update velocity with Verlet integration\n        body.velocity.x = velocityPrevX * frictionAir + body.force.x / body.mass * deltaTimeSquared;\n        body.velocity.y = velocityPrevY * frictionAir + body.force.y / body.mass * deltaTimeSquared;\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n        body.deltaTime = deltaTime;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n          var part = body.parts[i];\n          Vertices.translate(part.vertices, body.velocity);\n          if (i > 0) {\n            part.position.x += body.velocity.x;\n            part.position.y += body.velocity.y;\n          }\n          if (body.angularVelocity !== 0) {\n            Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n            Axes.rotate(part.axes, body.angularVelocity);\n            if (i > 0) {\n              Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n            }\n          }\n          Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n      };\n\n      /**\n       * Updates properties `body.velocity`, `body.speed`, `body.angularVelocity` and `body.angularSpeed` which are normalised in relation to `Body._baseDelta`.\n       * @method updateVelocities\n       * @param {body} body\n       */\n      Body.updateVelocities = function (body) {\n        var timeScale = Body._baseDelta / body.deltaTime,\n          bodyVelocity = body.velocity;\n        bodyVelocity.x = (body.position.x - body.positionPrev.x) * timeScale;\n        bodyVelocity.y = (body.position.y - body.positionPrev.y) * timeScale;\n        body.speed = Math.sqrt(bodyVelocity.x * bodyVelocity.x + bodyVelocity.y * bodyVelocity.y);\n        body.angularVelocity = (body.angle - body.anglePrev) * timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n      };\n\n      /**\n       * Applies the `force` to the `body` from the force origin `position` in world-space, over a single timestep, including applying any resulting angular torque.\n       * \n       * Forces are useful for effects like gravity, wind or rocket thrust, but can be difficult in practice when precise control is needed. In these cases see `Body.setVelocity` and `Body.setPosition` as an alternative.\n       * \n       * The force from this function is only applied once for the duration of a single timestep, in other words the duration depends directly on the current engine update `delta` and the rate of calls to this function.\n       * \n       * Therefore to account for time, you should apply the force constantly over as many engine updates as equivalent to the intended duration.\n       * \n       * If all or part of the force duration is some fraction of a timestep, first multiply the force by `duration / timestep`.\n       * \n       * The force origin `position` in world-space must also be specified. Passing `body.position` will result in zero angular effect as the force origin would be at the centre of mass.\n       * \n       * The `body` will take time to accelerate under a force, the resulting effect depends on duration of the force, the body mass and other forces on the body including friction combined.\n       * @method applyForce\n       * @param {body} body\n       * @param {vector} position The force origin in world-space. Pass `body.position` to avoid angular torque.\n       * @param {vector} force\n       */\n      Body.applyForce = function (body, position, force) {\n        var offset = {\n          x: position.x - body.position.x,\n          y: position.y - body.position.y\n        };\n        body.force.x += force.x;\n        body.force.y += force.y;\n        body.torque += offset.x * force.y - offset.y * force.x;\n      };\n\n      /**\n       * Returns the sums of the properties of all compound parts of the parent body.\n       * @method _totalProperties\n       * @private\n       * @param {body} body\n       * @return {}\n       */\n      Body._totalProperties = function (body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n          mass: 0,\n          area: 0,\n          inertia: 0,\n          centre: {\n            x: 0,\n            y: 0\n          }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n          var part = body.parts[i],\n            mass = part.mass !== Infinity ? part.mass : 1;\n          properties.mass += mass;\n          properties.area += part.area;\n          properties.inertia += part.inertia;\n          properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n        properties.centre = Vector.div(properties.centre, properties.mass);\n        return properties;\n      };\n\n      /*\n      *\n      *  Events Documentation\n      *\n      */\n\n      /**\n      * Fired when a body starts sleeping (where `this` is the body).\n      *\n      * @event sleepStart\n      * @this {body} The body that has started sleeping\n      * @param {} event An event object\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when a body ends sleeping (where `this` is the body).\n      *\n      * @event sleepEnd\n      * @this {body} The body that has ended sleeping\n      * @param {} event An event object\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n       *\n       * @property id\n       * @type number\n       */\n\n      /**\n       * _Read only_. Set by `Body.create`.\n       * \n       * A `String` denoting the type of object.\n       *\n       * @readOnly\n       * @property type\n       * @type string\n       * @default \"body\"\n       */\n\n      /**\n       * An arbitrary `String` name to help the user identify and manage bodies.\n       *\n       * @property label\n       * @type string\n       * @default \"Body\"\n       */\n\n      /**\n       * _Read only_. Use `Body.setParts` to set. \n       * \n       * See `Bodies.fromVertices` for a related utility.\n       * \n       * An array of bodies (the 'parts') that make up this body (the 'parent'). The first body in this array must always be a self-reference to this `body`.  \n       * \n       * The parts are fixed together and therefore perform as a single unified rigid body.\n       * \n       * Parts in relation to each other are allowed to overlap, as well as form gaps or holes, so can be used to create complex concave bodies unlike when using a single part. \n       * \n       * Use properties and functions on the parent `body` rather than on parts.\n       *   \n       * Outside of their geometry, most properties on parts are not considered or updated.  \n       * As such 'per-part' material properties among others are not currently considered.\n       * \n       * Parts should be created specifically for their parent body.  \n       * Parts should not be shared or reused between bodies, only one parent is supported.  \n       * Parts should not have their own parts, they are not handled recursively.  \n       * Parts should not be added to the world directly or any other composite.  \n       * Parts own vertices must be convex and in clockwise order.   \n       * \n       * A body with more than one part is sometimes referred to as a 'compound' body. \n       * \n       * Use `Body.setParts` when setting parts to ensure correct updates of all properties.  \n       *\n       * @readOnly\n       * @property parts\n       * @type body[]\n       */\n\n      /**\n       * An object reserved for storing plugin-specific properties.\n       *\n       * @property plugin\n       * @type {}\n       */\n\n      /**\n       * _Read only_. Updated by `Body.setParts`.\n       * \n       * A reference to the body that this is a part of. See `body.parts`.\n       * This is a self reference if the body is not a part of another body.\n       *\n       * @readOnly\n       * @property parent\n       * @type body\n       */\n\n      /**\n       * A `Number` specifying the angle of the body, in radians.\n       *\n       * @property angle\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * _Read only_. Use `Body.setVertices` or `Body.setParts` to set. See also `Bodies.fromVertices`.\n       * \n       * An array of `Vector` objects that specify the convex hull of the rigid body.\n       * These should be provided about the origin `(0, 0)`. E.g.\n       *\n       * `[{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]`\n       * \n       * Vertices must always be convex, in clockwise order and must not contain any duplicate points.\n       * \n       * Concave vertices should be decomposed into convex `parts`, see `Bodies.fromVertices` and `Body.setParts`.\n       *\n       * When set the vertices are translated such that `body.position` is at the centre of mass.\n       * Many other body properties are automatically calculated from these vertices when set including `density`, `area` and `inertia`.\n       * \n       * The module `Matter.Vertices` contains useful methods for working with vertices.\n       *\n       * @readOnly\n       * @property vertices\n       * @type vector[]\n       */\n\n      /**\n       * _Read only_. Use `Body.setPosition` to set. \n       * \n       * A `Vector` that specifies the current world-space position of the body.\n       * \n       * @readOnly\n       * @property position\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A `Vector` that accumulates the total force applied to the body for a single update.\n       * Force is zeroed after every `Engine.update`, so constant forces should be applied for every update they are needed. See also `Body.applyForce`.\n       * \n       * @property force\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A `Number` that accumulates the total torque (turning force) applied to the body for a single update. See also `Body.applyForce`.\n       * Torque is zeroed after every `Engine.update`, so constant torques should be applied for every update they are needed.\n       *\n       * Torques result in angular acceleration on every update, which depends on body inertia and the engine update delta.\n       * \n       * @property torque\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * _Read only_. Use `Body.setSpeed` to set. \n       * \n       * See `Body.getSpeed` for details.\n       * \n       * Equivalent to the magnitude of `body.velocity` (always positive).\n       * \n       * @readOnly\n       * @property speed\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * _Read only_. Use `Body.setVelocity` to set. \n       * \n       * See `Body.getVelocity` for details.\n       * \n       * Equivalent to the magnitude of `body.angularVelocity` (always positive).\n       * \n       * @readOnly\n       * @property velocity\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * _Read only_. Use `Body.setAngularSpeed` to set. \n       * \n       * See `Body.getAngularSpeed` for details.\n       * \n       * \n       * @readOnly\n       * @property angularSpeed\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * _Read only_. Use `Body.setAngularVelocity` to set. \n       * \n       * See `Body.getAngularVelocity` for details.\n       * \n       *\n       * @readOnly\n       * @property angularVelocity\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * _Read only_. Use `Body.setStatic` to set. \n       * \n       * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n       *\n       * @readOnly\n       * @property isStatic\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n       *\n       * @property isSensor\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * _Read only_. Use `Sleeping.set` to set. \n       * \n       * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n       *\n       * @readOnly\n       * @property isSleeping\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * _Read only_. Calculated during engine update only when sleeping is enabled.\n       * \n       * A `Number` that loosely measures the amount of movement a body currently has.\n       *\n       * Derived from `body.speed^2 + body.angularSpeed^2`. See `Sleeping.update`.\n       * \n       * @readOnly\n       * @property motion\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Number` that defines the length of time during which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n       * \n       * @property sleepThreshold\n       * @type number\n       * @default 60\n       */\n\n      /**\n       * _Read only_. Use `Body.setDensity` to set. \n       * \n       * A `Number` that defines the density of the body (mass per unit area).\n       * \n       * Mass will also be updated when set.\n       *\n       * @readOnly\n       * @property density\n       * @type number\n       * @default 0.001\n       */\n\n      /**\n       * _Read only_. Use `Body.setMass` to set. \n       * \n       * A `Number` that defines the mass of the body.\n       * \n       * Density will also be updated when set.\n       * \n       * @readOnly\n       * @property mass\n       * @type number\n       */\n\n      /**\n       * _Read only_. Use `Body.setMass` to set. \n       * \n       * A `Number` that defines the inverse mass of the body (`1 / mass`).\n       *\n       * @readOnly\n       * @property inverseMass\n       * @type number\n       */\n\n      /**\n       * _Read only_. Automatically calculated when vertices, mass or density are set or set through `Body.setInertia`.\n       * \n       * A `Number` that defines the moment of inertia of the body. This is the second moment of area in two dimensions.\n       * \n       * Can be manually set to `Infinity` to prevent rotation of the body. See `Body.setInertia`.\n       * \n       * @readOnly\n       * @property inertia\n       * @type number\n       */\n\n      /**\n       * _Read only_. Automatically calculated when vertices, mass or density are set or calculated by `Body.setInertia`.\n       * \n       * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n       * \n       * @readOnly\n       * @property inverseInertia\n       * @type number\n       */\n\n      /**\n       * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n       * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n       * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n       * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n       *\n       * `Math.max(bodyA.restitution, bodyB.restitution)`\n       *\n       * @property restitution\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n       * A value of `0` means that the body may slide indefinitely.\n       * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n       *\n       * The effects of the value may be non-linear. \n       * High values may be unstable depending on the body.\n       * The engine uses a Coulomb friction model including static and kinetic friction.\n       * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n       *\n       * `Math.min(bodyA.friction, bodyB.friction)`\n       *\n       * @property friction\n       * @type number\n       * @default 0.1\n       */\n\n      /**\n       * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n       * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n       * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n       * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n       *\n       * @property frictionStatic\n       * @type number\n       * @default 0.5\n       */\n\n      /**\n       * A `Number` that defines the air friction of the body (air resistance). \n       * A value of `0` means the body will never slow as it moves through space.\n       * The higher the value, the faster a body slows when moving through space.\n       * The effects of the value are non-linear. \n       *\n       * @property frictionAir\n       * @type number\n       * @default 0.01\n       */\n\n      /**\n       * An `Object` that specifies the collision filtering properties of this body.\n       *\n       * Collisions between two bodies will obey the following rules:\n       * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n       *   they will always collide if the value is positive, and they will never collide\n       *   if the value is negative.\n       * - If the two bodies have different values of `collisionFilter.group` or if one\n       *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n       *\n       * Each body belongs to a collision category, given by `collisionFilter.category`. This\n       * value is used as a bit field and the category should have only one bit set, meaning that\n       * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n       * different collision categories available.\n       *\n       * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n       * the categories it collides with (the value is the bitwise AND value of all these categories).\n       *\n       * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n       * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n       * are both true.\n       *\n       * @property collisionFilter\n       * @type object\n       */\n\n      /**\n       * An Integer `Number`, that specifies the collision group this body belongs to.\n       * See `body.collisionFilter` for more information.\n       *\n       * @property collisionFilter.group\n       * @type object\n       * @default 0\n       */\n\n      /**\n       * A bit field that specifies the collision category this body belongs to.\n       * The category value should have only one bit set, for example `0x0001`.\n       * This means there are up to 32 unique collision categories available.\n       * See `body.collisionFilter` for more information.\n       *\n       * @property collisionFilter.category\n       * @type object\n       * @default 1\n       */\n\n      /**\n       * A bit mask that specifies the collision categories this body may collide with.\n       * See `body.collisionFilter` for more information.\n       *\n       * @property collisionFilter.mask\n       * @type object\n       * @default -1\n       */\n\n      /**\n       * A `Number` that specifies a thin boundary around the body where it is allowed to slightly sink into other bodies.\n       * \n       * This is required for proper collision response, including friction and restitution effects.\n       * \n       * The default should generally suffice in most cases. You may need to decrease this value for very small bodies that are nearing the default value in scale.\n       *\n       * @property slop\n       * @type number\n       * @default 0.05\n       */\n\n      /**\n       * A `Number` that specifies per-body time scaling.\n       *\n       * @property timeScale\n       * @type number\n       * @default 1\n       */\n\n      /**\n       * _Read only_. Updated during engine update.\n       * \n       * A `Number` that records the last delta time value used to update this body.\n       * Used to calculate speed and velocity.\n       *\n       * @readOnly\n       * @property deltaTime\n       * @type number\n       * @default 1000 / 60\n       */\n\n      /**\n       * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n       *\n       * @property render\n       * @type object\n       */\n\n      /**\n       * A flag that indicates if the body should be rendered.\n       *\n       * @property render.visible\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * Sets the opacity to use when rendering.\n       *\n       * @property render.opacity\n       * @type number\n       * @default 1\n      */\n\n      /**\n       * An `Object` that defines the sprite properties to use when rendering, if any.\n       *\n       * @property render.sprite\n       * @type object\n       */\n\n      /**\n       * An `String` that defines the path to the image to use as the sprite texture, if any.\n       *\n       * @property render.sprite.texture\n       * @type string\n       */\n\n      /**\n       * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n       *\n       * @property render.sprite.xScale\n       * @type number\n       * @default 1\n       */\n\n      /**\n       * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n       *\n       * @property render.sprite.yScale\n       * @type number\n       * @default 1\n       */\n\n      /**\n        * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n        *\n        * @property render.sprite.xOffset\n        * @type number\n        * @default 0\n        */\n\n      /**\n        * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n        *\n        * @property render.sprite.yOffset\n        * @type number\n        * @default 0\n        */\n\n      /**\n       * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n       * A value of `0` means no outline will be rendered.\n       *\n       * @property render.lineWidth\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n       * It is the same as when using a canvas, so it accepts CSS style property values.\n       *\n       * @property render.fillStyle\n       * @type string\n       * @default a random colour\n       */\n\n      /**\n       * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n       * It is the same as when using a canvas, so it accepts CSS style property values.\n       *\n       * @property render.strokeStyle\n       * @type string\n       * @default a random colour\n       */\n\n      /**\n       * _Read only_. Calculated automatically when vertices are set.\n       * \n       * An array of unique axis vectors (edge normals) used for collision detection.\n       * These are automatically calculated when vertices are set.\n       * They are constantly updated by `Body.update` during the simulation.\n       *\n       * @readOnly\n       * @property axes\n       * @type vector[]\n       */\n\n      /**\n       * _Read only_. Calculated automatically when vertices are set.\n       * \n       * A `Number` that measures the area of the body's convex hull.\n       * \n       * @readOnly\n       * @property area\n       * @type string\n       * @default \n       */\n\n      /**\n       * A `Bounds` object that defines the AABB region for the body.\n       * It is automatically calculated when vertices are set and constantly updated by `Body.update` during simulation.\n       * \n       * @property bounds\n       * @type bounds\n       */\n\n      /**\n       * Temporarily may hold parameters to be passed to `Vertices.chamfer` where supported by external functions.\n       * \n       * See `Vertices.chamfer` for possible parameters this object may hold.\n       * \n       * Currently only functions inside `Matter.Bodies` provide a utility using this property as a vertices pre-processing option.\n       * \n       * Alternatively consider using `Vertices.chamfer` directly on vertices before passing them to a body creation function.\n       * \n       * @property chamfer\n       * @type object|null|undefined\n       */\n    })();\n\n    /***/\n  }), (/* 5 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Events` module contains methods to fire and listen to events on other objects.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Events\n    */\n\n    var Events = {};\n    module.exports = Events;\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Subscribes a callback function to the given object's `eventName`.\n       * @method on\n       * @param {} object\n       * @param {string} eventNames\n       * @param {function} callback\n       */\n      Events.on = function (object, eventNames, callback) {\n        var names = eventNames.split(' '),\n          name;\n        for (var i = 0; i < names.length; i++) {\n          name = names[i];\n          object.events = object.events || {};\n          object.events[name] = object.events[name] || [];\n          object.events[name].push(callback);\n        }\n        return callback;\n      };\n\n      /**\n       * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n       * @method off\n       * @param {} object\n       * @param {string} eventNames\n       * @param {function} callback\n       */\n      Events.off = function (object, eventNames, callback) {\n        if (!eventNames) {\n          object.events = {};\n          return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n          callback = eventNames;\n          eventNames = Common.keys(object.events).join(' ');\n        }\n        var names = eventNames.split(' ');\n        for (var i = 0; i < names.length; i++) {\n          var callbacks = object.events[names[i]],\n            newCallbacks = [];\n          if (callback && callbacks) {\n            for (var j = 0; j < callbacks.length; j++) {\n              if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n            }\n          }\n          object.events[names[i]] = newCallbacks;\n        }\n      };\n\n      /**\n       * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n       * @method trigger\n       * @param {} object\n       * @param {string} eventNames\n       * @param {} event\n       */\n      Events.trigger = function (object, eventNames, event) {\n        var names, name, callbacks, eventClone;\n        var events = object.events;\n        if (events && Common.keys(events).length > 0) {\n          if (!event) event = {};\n          names = eventNames.split(' ');\n          for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            callbacks = events[name];\n            if (callbacks) {\n              eventClone = Common.clone(event, false);\n              eventClone.name = name;\n              eventClone.source = object;\n              for (var j = 0; j < callbacks.length; j++) {\n                callbacks[j].apply(object, [eventClone]);\n              }\n            }\n          }\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 6 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n    *\n    * They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n    * A composite could contain anything from a single body all the way up to a whole world.\n    * \n    * When making any changes to composites, use the included functions rather than changing their properties directly.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Composite\n    */\n\n    var Composite = {};\n    module.exports = Composite;\n    var Events = __webpack_require__(5);\n    var Common = __webpack_require__(0);\n    var Bounds = __webpack_require__(1);\n    var Body = __webpack_require__(4);\n    (function () {\n      /**\n       * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n       * See the properites section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {} [options]\n       * @return {composite} A new composite\n       */\n      Composite.create = function (options) {\n        return Common.extend({\n          id: Common.nextId(),\n          type: 'composite',\n          parent: null,\n          isModified: false,\n          bodies: [],\n          constraints: [],\n          composites: [],\n          label: 'Composite',\n          plugin: {},\n          cache: {\n            allBodies: null,\n            allConstraints: null,\n            allComposites: null\n          }\n        }, options);\n      };\n\n      /**\n       * Sets the composite's `isModified` flag. \n       * If `updateParents` is true, all parents will be set (default: false).\n       * If `updateChildren` is true, all children will be set (default: false).\n       * @private\n       * @method setModified\n       * @param {composite} composite\n       * @param {boolean} isModified\n       * @param {boolean} [updateParents=false]\n       * @param {boolean} [updateChildren=false]\n       */\n      Composite.setModified = function (composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n        if (isModified && composite.cache) {\n          composite.cache.allBodies = null;\n          composite.cache.allConstraints = null;\n          composite.cache.allComposites = null;\n        }\n        if (updateParents && composite.parent) {\n          Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n        if (updateChildren) {\n          for (var i = 0; i < composite.composites.length; i++) {\n            var childComposite = composite.composites[i];\n            Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n          }\n        }\n      };\n\n      /**\n       * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n       * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n       * @method add\n       * @param {composite} composite\n       * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n       * @return {composite} The original composite with the objects added\n       */\n      Composite.add = function (composite, object) {\n        var objects = [].concat(object);\n        Events.trigger(composite, 'beforeAdd', {\n          object: object\n        });\n        for (var i = 0; i < objects.length; i++) {\n          var obj = objects[i];\n          switch (obj.type) {\n            case 'body':\n              // skip adding compound parts\n              if (obj.parent !== obj) {\n                Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                break;\n              }\n              Composite.addBody(composite, obj);\n              break;\n            case 'constraint':\n              Composite.addConstraint(composite, obj);\n              break;\n            case 'composite':\n              Composite.addComposite(composite, obj);\n              break;\n            case 'mouseConstraint':\n              Composite.addConstraint(composite, obj.constraint);\n              break;\n          }\n        }\n        Events.trigger(composite, 'afterAdd', {\n          object: object\n        });\n        return composite;\n      };\n\n      /**\n       * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n       * Optionally searching its children recursively.\n       * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n       * @method remove\n       * @param {composite} composite\n       * @param {object|array} object\n       * @param {boolean} [deep=false]\n       * @return {composite} The original composite with the objects removed\n       */\n      Composite.remove = function (composite, object, deep) {\n        var objects = [].concat(object);\n        Events.trigger(composite, 'beforeRemove', {\n          object: object\n        });\n        for (var i = 0; i < objects.length; i++) {\n          var obj = objects[i];\n          switch (obj.type) {\n            case 'body':\n              Composite.removeBody(composite, obj, deep);\n              break;\n            case 'constraint':\n              Composite.removeConstraint(composite, obj, deep);\n              break;\n            case 'composite':\n              Composite.removeComposite(composite, obj, deep);\n              break;\n            case 'mouseConstraint':\n              Composite.removeConstraint(composite, obj.constraint);\n              break;\n          }\n        }\n        Events.trigger(composite, 'afterRemove', {\n          object: object\n        });\n        return composite;\n      };\n\n      /**\n       * Adds a composite to the given composite.\n       * @private\n       * @method addComposite\n       * @param {composite} compositeA\n       * @param {composite} compositeB\n       * @return {composite} The original compositeA with the objects from compositeB added\n       */\n      Composite.addComposite = function (compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n      };\n\n      /**\n       * Removes a composite from the given composite, and optionally searching its children recursively.\n       * @private\n       * @method removeComposite\n       * @param {composite} compositeA\n       * @param {composite} compositeB\n       * @param {boolean} [deep=false]\n       * @return {composite} The original compositeA with the composite removed\n       */\n      Composite.removeComposite = function (compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n          var bodies = Composite.allBodies(compositeB);\n          Composite.removeCompositeAt(compositeA, position);\n          for (var i = 0; i < bodies.length; i++) {\n            bodies[i].sleepCounter = 0;\n          }\n        }\n        if (deep) {\n          for (var i = 0; i < compositeA.composites.length; i++) {\n            Composite.removeComposite(compositeA.composites[i], compositeB, true);\n          }\n        }\n        return compositeA;\n      };\n\n      /**\n       * Removes a composite from the given composite.\n       * @private\n       * @method removeCompositeAt\n       * @param {composite} composite\n       * @param {number} position\n       * @return {composite} The original composite with the composite removed\n       */\n      Composite.removeCompositeAt = function (composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Adds a body to the given composite.\n       * @private\n       * @method addBody\n       * @param {composite} composite\n       * @param {body} body\n       * @return {composite} The original composite with the body added\n       */\n      Composite.addBody = function (composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Removes a body from the given composite, and optionally searching its children recursively.\n       * @private\n       * @method removeBody\n       * @param {composite} composite\n       * @param {body} body\n       * @param {boolean} [deep=false]\n       * @return {composite} The original composite with the body removed\n       */\n      Composite.removeBody = function (composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n          Composite.removeBodyAt(composite, position);\n          body.sleepCounter = 0;\n        }\n        if (deep) {\n          for (var i = 0; i < composite.composites.length; i++) {\n            Composite.removeBody(composite.composites[i], body, true);\n          }\n        }\n        return composite;\n      };\n\n      /**\n       * Removes a body from the given composite.\n       * @private\n       * @method removeBodyAt\n       * @param {composite} composite\n       * @param {number} position\n       * @return {composite} The original composite with the body removed\n       */\n      Composite.removeBodyAt = function (composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Adds a constraint to the given composite.\n       * @private\n       * @method addConstraint\n       * @param {composite} composite\n       * @param {constraint} constraint\n       * @return {composite} The original composite with the constraint added\n       */\n      Composite.addConstraint = function (composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Removes a constraint from the given composite, and optionally searching its children recursively.\n       * @private\n       * @method removeConstraint\n       * @param {composite} composite\n       * @param {constraint} constraint\n       * @param {boolean} [deep=false]\n       * @return {composite} The original composite with the constraint removed\n       */\n      Composite.removeConstraint = function (composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n          Composite.removeConstraintAt(composite, position);\n        }\n        if (deep) {\n          for (var i = 0; i < composite.composites.length; i++) {\n            Composite.removeConstraint(composite.composites[i], constraint, true);\n          }\n        }\n        return composite;\n      };\n\n      /**\n       * Removes a body from the given composite.\n       * @private\n       * @method removeConstraintAt\n       * @param {composite} composite\n       * @param {number} position\n       * @return {composite} The original composite with the constraint removed\n       */\n      Composite.removeConstraintAt = function (composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Removes all bodies, constraints and composites from the given composite.\n       * Optionally clearing its children recursively.\n       * @method clear\n       * @param {composite} composite\n       * @param {boolean} keepStatic\n       * @param {boolean} [deep=false]\n       */\n      Composite.clear = function (composite, keepStatic, deep) {\n        if (deep) {\n          for (var i = 0; i < composite.composites.length; i++) {\n            Composite.clear(composite.composites[i], keepStatic, true);\n          }\n        }\n        if (keepStatic) {\n          composite.bodies = composite.bodies.filter(function (body) {\n            return body.isStatic;\n          });\n        } else {\n          composite.bodies.length = 0;\n        }\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Returns all bodies in the given composite, including all bodies in its children, recursively.\n       * @method allBodies\n       * @param {composite} composite\n       * @return {body[]} All the bodies\n       */\n      Composite.allBodies = function (composite) {\n        if (composite.cache && composite.cache.allBodies) {\n          return composite.cache.allBodies;\n        }\n        var bodies = [].concat(composite.bodies);\n        for (var i = 0; i < composite.composites.length; i++) bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n        if (composite.cache) {\n          composite.cache.allBodies = bodies;\n        }\n        return bodies;\n      };\n\n      /**\n       * Returns all constraints in the given composite, including all constraints in its children, recursively.\n       * @method allConstraints\n       * @param {composite} composite\n       * @return {constraint[]} All the constraints\n       */\n      Composite.allConstraints = function (composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n          return composite.cache.allConstraints;\n        }\n        var constraints = [].concat(composite.constraints);\n        for (var i = 0; i < composite.composites.length; i++) constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n        if (composite.cache) {\n          composite.cache.allConstraints = constraints;\n        }\n        return constraints;\n      };\n\n      /**\n       * Returns all composites in the given composite, including all composites in its children, recursively.\n       * @method allComposites\n       * @param {composite} composite\n       * @return {composite[]} All the composites\n       */\n      Composite.allComposites = function (composite) {\n        if (composite.cache && composite.cache.allComposites) {\n          return composite.cache.allComposites;\n        }\n        var composites = [].concat(composite.composites);\n        for (var i = 0; i < composite.composites.length; i++) composites = composites.concat(Composite.allComposites(composite.composites[i]));\n        if (composite.cache) {\n          composite.cache.allComposites = composites;\n        }\n        return composites;\n      };\n\n      /**\n       * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n       * @method get\n       * @param {composite} composite\n       * @param {number} id\n       * @param {string} type\n       * @return {object} The requested object, if found\n       */\n      Composite.get = function (composite, id, type) {\n        var objects, object;\n        switch (type) {\n          case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n          case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n          case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n        if (!objects) return null;\n        object = objects.filter(function (object) {\n          return object.id.toString() === id.toString();\n        });\n        return object.length === 0 ? null : object[0];\n      };\n\n      /**\n       * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n       * @method move\n       * @param {compositeA} compositeA\n       * @param {object[]} objects\n       * @param {compositeB} compositeB\n       * @return {composite} Returns compositeA\n       */\n      Composite.move = function (compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n      };\n\n      /**\n       * Assigns new ids for all objects in the composite, recursively.\n       * @method rebase\n       * @param {composite} composite\n       * @return {composite} Returns composite\n       */\n      Composite.rebase = function (composite) {\n        var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n        for (var i = 0; i < objects.length; i++) {\n          objects[i].id = Common.nextId();\n        }\n        return composite;\n      };\n\n      /**\n       * Translates all children in the composite by a given vector relative to their current positions, \n       * without imparting any velocity.\n       * @method translate\n       * @param {composite} composite\n       * @param {vector} translation\n       * @param {bool} [recursive=true]\n       */\n      Composite.translate = function (composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n        for (var i = 0; i < bodies.length; i++) {\n          Body.translate(bodies[i], translation);\n        }\n        return composite;\n      };\n\n      /**\n       * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n       * @method rotate\n       * @param {composite} composite\n       * @param {number} rotation\n       * @param {vector} point\n       * @param {bool} [recursive=true]\n       */\n      Composite.rotate = function (composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n          sin = Math.sin(rotation),\n          bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            dx = body.position.x - point.x,\n            dy = body.position.y - point.y;\n          Body.setPosition(body, {\n            x: point.x + (dx * cos - dy * sin),\n            y: point.y + (dx * sin + dy * cos)\n          });\n          Body.rotate(body, rotation);\n        }\n        return composite;\n      };\n\n      /**\n       * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n       * @method scale\n       * @param {composite} composite\n       * @param {number} scaleX\n       * @param {number} scaleY\n       * @param {vector} point\n       * @param {bool} [recursive=true]\n       */\n      Composite.scale = function (composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            dx = body.position.x - point.x,\n            dy = body.position.y - point.y;\n          Body.setPosition(body, {\n            x: point.x + dx * scaleX,\n            y: point.y + dy * scaleY\n          });\n          Body.scale(body, scaleX, scaleY);\n        }\n        return composite;\n      };\n\n      /**\n       * Returns the union of the bounds of all of the composite's bodies.\n       * @method bounds\n       * @param {composite} composite The composite.\n       * @returns {bounds} The composite bounds.\n       */\n      Composite.bounds = function (composite) {\n        var bodies = Composite.allBodies(composite),\n          vertices = [];\n        for (var i = 0; i < bodies.length; i += 1) {\n          var body = bodies[i];\n          vertices.push(body.bounds.min, body.bounds.max);\n        }\n        return Bounds.create(vertices);\n      };\n\n      /*\n      *\n      *  Events Documentation\n      *\n      */\n\n      /**\n      * Fired when a call to `Composite.add` is made, before objects have been added.\n      *\n      * @event beforeAdd\n      * @param {} event An event object\n      * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when a call to `Composite.add` is made, after objects have been added.\n      *\n      * @event afterAdd\n      * @param {} event An event object\n      * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when a call to `Composite.remove` is made, before objects have been removed.\n      *\n      * @event beforeRemove\n      * @param {} event An event object\n      * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when a call to `Composite.remove` is made, after objects have been removed.\n      *\n      * @event afterRemove\n      * @param {} event An event object\n      * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n       *\n       * @property id\n       * @type number\n       */\n\n      /**\n       * A `String` denoting the type of object.\n       *\n       * @property type\n       * @type string\n       * @default \"composite\"\n       * @readOnly\n       */\n\n      /**\n       * An arbitrary `String` name to help the user identify and manage composites.\n       *\n       * @property label\n       * @type string\n       * @default \"Composite\"\n       */\n\n      /**\n       * A flag that specifies whether the composite has been modified during the current step.\n       * This is automatically managed when bodies, constraints or composites are added or removed.\n       *\n       * @property isModified\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n       *\n       * @property parent\n       * @type composite\n       * @default null\n       */\n\n      /**\n       * An array of `Body` that are _direct_ children of this composite.\n       * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n       * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n       *\n       * @property bodies\n       * @type body[]\n       * @default []\n       */\n\n      /**\n       * An array of `Constraint` that are _direct_ children of this composite.\n       * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n       * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n       *\n       * @property constraints\n       * @type constraint[]\n       * @default []\n       */\n\n      /**\n       * An array of `Composite` that are _direct_ children of this composite.\n       * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n       * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n       *\n       * @property composites\n       * @type composite[]\n       * @default []\n       */\n\n      /**\n       * An object reserved for storing plugin-specific properties.\n       *\n       * @property plugin\n       * @type {}\n       */\n\n      /**\n       * An object used for storing cached results for performance reasons.\n       * This is used internally only and is automatically managed.\n       *\n       * @private\n       * @property cache\n       * @type {}\n       */\n    })();\n\n    /***/\n  }), (/* 7 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n    *\n    * @class Sleeping\n    */\n\n    var Sleeping = {};\n    module.exports = Sleeping;\n    var Body = __webpack_require__(4);\n    var Events = __webpack_require__(5);\n    var Common = __webpack_require__(0);\n    (function () {\n      Sleeping._motionWakeThreshold = 0.18;\n      Sleeping._motionSleepThreshold = 0.08;\n      Sleeping._minBias = 0.9;\n\n      /**\n       * Puts bodies to sleep or wakes them up depending on their motion.\n       * @method update\n       * @param {body[]} bodies\n       * @param {number} delta\n       */\n      Sleeping.update = function (bodies, delta) {\n        var timeScale = delta / Common._baseDelta,\n          motionSleepThreshold = Sleeping._motionSleepThreshold;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            speed = Body.getSpeed(body),\n            angularSpeed = Body.getAngularSpeed(body),\n            motion = speed * speed + angularSpeed * angularSpeed;\n\n          // wake up bodies if they have a force applied\n          if (body.force.x !== 0 || body.force.y !== 0) {\n            Sleeping.set(body, false);\n            continue;\n          }\n          var minMotion = Math.min(body.motion, motion),\n            maxMotion = Math.max(body.motion, motion);\n\n          // biased average motion estimation between frames\n          body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n          if (body.sleepThreshold > 0 && body.motion < motionSleepThreshold) {\n            body.sleepCounter += 1;\n            if (body.sleepCounter >= body.sleepThreshold / timeScale) {\n              Sleeping.set(body, true);\n            }\n          } else if (body.sleepCounter > 0) {\n            body.sleepCounter -= 1;\n          }\n        }\n      };\n\n      /**\n       * Given a set of colliding pairs, wakes the sleeping bodies involved.\n       * @method afterCollisions\n       * @param {pair[]} pairs\n       */\n      Sleeping.afterCollisions = function (pairs) {\n        var motionSleepThreshold = Sleeping._motionSleepThreshold;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n          var pair = pairs[i];\n\n          // don't wake inactive pairs\n          if (!pair.isActive) continue;\n          var collision = pair.collision,\n            bodyA = collision.bodyA.parent,\n            bodyB = collision.bodyB.parent;\n\n          // don't wake if at least one body is static\n          if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n          if (bodyA.isSleeping || bodyB.isSleeping) {\n            var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB,\n              movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n            if (!sleepingBody.isStatic && movingBody.motion > motionSleepThreshold) {\n              Sleeping.set(sleepingBody, false);\n            }\n          }\n        }\n      };\n\n      /**\n       * Set a body as sleeping or awake.\n       * @method set\n       * @param {body} body\n       * @param {boolean} isSleeping\n       */\n      Sleeping.set = function (body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n        if (isSleeping) {\n          body.isSleeping = true;\n          body.sleepCounter = body.sleepThreshold;\n          body.positionImpulse.x = 0;\n          body.positionImpulse.y = 0;\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.anglePrev = body.angle;\n          body.speed = 0;\n          body.angularSpeed = 0;\n          body.motion = 0;\n          if (!wasSleeping) {\n            Events.trigger(body, 'sleepStart');\n          }\n        } else {\n          body.isSleeping = false;\n          body.sleepCounter = 0;\n          if (wasSleeping) {\n            Events.trigger(body, 'sleepEnd');\n          }\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 8 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n    *\n    * For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n    *\n    * See `Matter.Engine` for collision events.\n    *\n    * @class Collision\n    */\n\n    var Collision = {};\n    module.exports = Collision;\n    var Vertices = __webpack_require__(3);\n    var Pair = __webpack_require__(9);\n    (function () {\n      var _supports = [];\n      var _overlapAB = {\n        overlap: 0,\n        axis: null\n      };\n      var _overlapBA = {\n        overlap: 0,\n        axis: null\n      };\n\n      /**\n       * Creates a new collision record.\n       * @method create\n       * @param {body} bodyA The first body part represented by the collision record\n       * @param {body} bodyB The second body part represented by the collision record\n       * @return {collision} A new collision record\n       */\n      Collision.create = function (bodyA, bodyB) {\n        return {\n          pair: null,\n          collided: false,\n          bodyA: bodyA,\n          bodyB: bodyB,\n          parentA: bodyA.parent,\n          parentB: bodyB.parent,\n          depth: 0,\n          normal: {\n            x: 0,\n            y: 0\n          },\n          tangent: {\n            x: 0,\n            y: 0\n          },\n          penetration: {\n            x: 0,\n            y: 0\n          },\n          supports: [null, null],\n          supportCount: 0\n        };\n      };\n\n      /**\n       * Detect collision between two bodies.\n       * @method collides\n       * @param {body} bodyA\n       * @param {body} bodyB\n       * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n       * @return {collision|null} A collision record if detected, otherwise null\n       */\n      Collision.collides = function (bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n        if (_overlapAB.overlap <= 0) {\n          return null;\n        }\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n        if (_overlapBA.overlap <= 0) {\n          return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n          collision;\n        if (!pair) {\n          collision = Collision.create(bodyA, bodyB);\n          collision.collided = true;\n          collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n          collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n          collision.parentA = collision.bodyA.parent;\n          collision.parentB = collision.bodyB.parent;\n        } else {\n          collision = pair.collision;\n        }\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n        var minOverlap;\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n          minOverlap = _overlapAB;\n        } else {\n          minOverlap = _overlapBA;\n        }\n        var normal = collision.normal,\n          tangent = collision.tangent,\n          penetration = collision.penetration,\n          supports = collision.supports,\n          depth = minOverlap.overlap,\n          minAxis = minOverlap.axis,\n          normalX = minAxis.x,\n          normalY = minAxis.y,\n          deltaX = bodyB.position.x - bodyA.position.x,\n          deltaY = bodyB.position.y - bodyA.position.y;\n\n        // ensure normal is facing away from bodyA\n        if (normalX * deltaX + normalY * deltaY >= 0) {\n          normalX = -normalX;\n          normalY = -normalY;\n        }\n        normal.x = normalX;\n        normal.y = normalY;\n        tangent.x = -normalY;\n        tangent.y = normalX;\n        penetration.x = normalX * depth;\n        penetration.y = normalY * depth;\n        collision.depth = depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n          supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n          supports[supportCount++] = supportsB[0];\n        }\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n          supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n          var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n          if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n            supports[supportCount++] = supportsA[0];\n          }\n          if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n            supports[supportCount++] = supportsA[1];\n          }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n          supports[supportCount++] = supportsB[0];\n        }\n\n        // update support count\n        collision.supportCount = supportCount;\n        return collision;\n      };\n\n      /**\n       * Find the overlap between two sets of vertices.\n       * @method _overlapAxes\n       * @private\n       * @param {object} result\n       * @param {vertices} verticesA\n       * @param {vertices} verticesB\n       * @param {axes} axes\n       */\n      Collision._overlapAxes = function (result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n          verticesBLength = verticesB.length,\n          verticesAX = verticesA[0].x,\n          verticesAY = verticesA[0].y,\n          verticesBX = verticesB[0].x,\n          verticesBY = verticesB[0].y,\n          axesLength = axes.length,\n          overlapMin = Number.MAX_VALUE,\n          overlapAxisNumber = 0,\n          overlap,\n          overlapAB,\n          overlapBA,\n          dot,\n          i,\n          j;\n        for (i = 0; i < axesLength; i++) {\n          var axis = axes[i],\n            axisX = axis.x,\n            axisY = axis.y,\n            minA = verticesAX * axisX + verticesAY * axisY,\n            minB = verticesBX * axisX + verticesBY * axisY,\n            maxA = minA,\n            maxB = minB;\n          for (j = 1; j < verticesALength; j += 1) {\n            dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n            if (dot > maxA) {\n              maxA = dot;\n            } else if (dot < minA) {\n              minA = dot;\n            }\n          }\n          for (j = 1; j < verticesBLength; j += 1) {\n            dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n            if (dot > maxB) {\n              maxB = dot;\n            } else if (dot < minB) {\n              minB = dot;\n            }\n          }\n          overlapAB = maxA - minB;\n          overlapBA = maxB - minA;\n          overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n          if (overlap < overlapMin) {\n            overlapMin = overlap;\n            overlapAxisNumber = i;\n            if (overlap <= 0) {\n              // can not be intersecting\n              break;\n            }\n          }\n        }\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n      };\n\n      /**\n       * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n       * @method _findSupports\n       * @private\n       * @param {body} bodyA\n       * @param {body} bodyB\n       * @param {vector} normal\n       * @param {number} direction\n       * @return [vector]\n       */\n      Collision._findSupports = function (bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n          verticesLength = vertices.length,\n          bodyAPositionX = bodyA.position.x,\n          bodyAPositionY = bodyA.position.y,\n          normalX = normal.x * direction,\n          normalY = normal.y * direction,\n          vertexA = vertices[0],\n          vertexB = vertexA,\n          nearestDistance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y),\n          vertexC,\n          distance,\n          j;\n\n        // find deepest vertex relative to the axis\n        for (j = 1; j < verticesLength; j += 1) {\n          vertexB = vertices[j];\n          distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n          // convex hill-climbing\n          if (distance < nearestDistance) {\n            nearestDistance = distance;\n            vertexA = vertexB;\n          }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n          _supports[0] = vertexA;\n          _supports[1] = vertexB;\n          return _supports;\n        }\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n        return _supports;\n      };\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * A reference to the pair using this collision record, if there is one.\n       *\n       * @property pair\n       * @type {pair|null}\n       * @default null\n       */\n\n      /**\n       * A flag that indicates if the bodies were colliding when the collision was last updated.\n       * \n       * @property collided\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * The first body part represented by the collision (see also `collision.parentA`).\n       * \n       * @property bodyA\n       * @type body\n       */\n\n      /**\n       * The second body part represented by the collision (see also `collision.parentB`).\n       * \n       * @property bodyB\n       * @type body\n       */\n\n      /**\n       * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n       * \n       * @property parentA\n       * @type body\n       */\n\n      /**\n       * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n       * \n       * @property parentB\n       * @type body\n       */\n\n      /**\n       * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n       *\n       * @readOnly\n       * @property depth\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n       *\n       * @property normal\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A normalised `Vector` that is the tangent direction to the collision normal.\n       *\n       * @property tangent\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A `Vector` that represents the direction and depth of the collision.\n       *\n       * @property penetration\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * An array of body vertices that represent the support points in the collision.\n       * \n       * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n       * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n       * \n       * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n       *\n       * @property supports\n       * @type vector[]\n       * @default []\n       */\n\n      /**\n       * The number of active supports for this collision found in `collision.supports`.\n       * \n       * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n       * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n       *\n       * @property supportCount\n       * @type number\n       * @default 0\n       */\n    })();\n\n    /***/\n  }), (/* 9 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n    *\n    * @class Pair\n    */\n\n    var Pair = {};\n    module.exports = Pair;\n    var Contact = __webpack_require__(16);\n    (function () {\n      /**\n       * Creates a pair.\n       * @method create\n       * @param {collision} collision\n       * @param {number} timestamp\n       * @return {pair} A new pair\n       */\n      Pair.create = function (collision, timestamp) {\n        var bodyA = collision.bodyA,\n          bodyB = collision.bodyB;\n        var pair = {\n          id: Pair.id(bodyA, bodyB),\n          bodyA: bodyA,\n          bodyB: bodyB,\n          collision: collision,\n          contacts: [Contact.create(), Contact.create()],\n          contactCount: 0,\n          separation: 0,\n          isActive: true,\n          isSensor: bodyA.isSensor || bodyB.isSensor,\n          timeCreated: timestamp,\n          timeUpdated: timestamp,\n          inverseMass: 0,\n          friction: 0,\n          frictionStatic: 0,\n          restitution: 0,\n          slop: 0\n        };\n        Pair.update(pair, collision, timestamp);\n        return pair;\n      };\n\n      /**\n       * Updates a pair given a collision.\n       * @method update\n       * @param {pair} pair\n       * @param {collision} collision\n       * @param {number} timestamp\n       */\n      Pair.update = function (pair, collision, timestamp) {\n        var supports = collision.supports,\n          supportCount = collision.supportCount,\n          contacts = pair.contacts,\n          parentA = collision.parentA,\n          parentB = collision.parentB;\n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n        pair.contactCount = supportCount;\n        collision.pair = pair;\n        var supportA = supports[0],\n          contactA = contacts[0],\n          supportB = supports[1],\n          contactB = contacts[1];\n\n        // match contacts to supports\n        if (contactB.vertex === supportA || contactA.vertex === supportB) {\n          contacts[1] = contactA;\n          contacts[0] = contactA = contactB;\n          contactB = contacts[1];\n        }\n\n        // update contacts\n        contactA.vertex = supportA;\n        contactB.vertex = supportB;\n      };\n\n      /**\n       * Set a pair as active or inactive.\n       * @method setActive\n       * @param {pair} pair\n       * @param {bool} isActive\n       * @param {number} timestamp\n       */\n      Pair.setActive = function (pair, isActive, timestamp) {\n        if (isActive) {\n          pair.isActive = true;\n          pair.timeUpdated = timestamp;\n        } else {\n          pair.isActive = false;\n          pair.contactCount = 0;\n        }\n      };\n\n      /**\n       * Get the id for the given pair.\n       * @method id\n       * @param {body} bodyA\n       * @param {body} bodyB\n       * @return {string} Unique pairId\n       */\n      Pair.id = function (bodyA, bodyB) {\n        return bodyA.id < bodyB.id ? bodyA.id.toString(36) + ':' + bodyB.id.toString(36) : bodyB.id.toString(36) + ':' + bodyA.id.toString(36);\n      };\n    })();\n\n    /***/\n  }), (/* 10 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n    * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n    * The stiffness of constraints can be modified to create springs or elastic.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Constraint\n    */\n\n    var Constraint = {};\n    module.exports = Constraint;\n    var Vertices = __webpack_require__(3);\n    var Vector = __webpack_require__(2);\n    var Sleeping = __webpack_require__(7);\n    var Bounds = __webpack_require__(1);\n    var Axes = __webpack_require__(11);\n    var Common = __webpack_require__(0);\n    (function () {\n      Constraint._warming = 0.4;\n      Constraint._torqueDampen = 1;\n      Constraint._minLength = 0.000001;\n\n      /**\n       * Creates a new constraint.\n       * All properties have default values, and many are pre-calculated automatically based on other properties.\n       * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n       * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n       * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {} options\n       * @return {constraint} constraint\n       */\n      Constraint.create = function (options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n          x: 0,\n          y: 0\n        };\n        if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n          x: 0,\n          y: 0\n        };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n          initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n          length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n          visible: true,\n          lineWidth: 2,\n          strokeStyle: '#ffffff',\n          type: 'line',\n          anchors: true\n        };\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n          render.type = 'pin';\n          render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n          render.type = 'spring';\n        }\n        constraint.render = Common.extend(render, constraint.render);\n        return constraint;\n      };\n\n      /**\n       * Prepares for solving by constraint warming.\n       * @private\n       * @method preSolveAll\n       * @param {body[]} bodies\n       */\n      Constraint.preSolveAll = function (bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n          var body = bodies[i],\n            impulse = body.constraintImpulse;\n          if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n            continue;\n          }\n          body.position.x += impulse.x;\n          body.position.y += impulse.y;\n          body.angle += impulse.angle;\n        }\n      };\n\n      /**\n       * Solves all constraints in a list of collisions.\n       * @private\n       * @method solveAll\n       * @param {constraint[]} constraints\n       * @param {number} delta\n       */\n      Constraint.solveAll = function (constraints, delta) {\n        var timeScale = Common.clamp(delta / Common._baseDelta, 0, 1);\n\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n          var constraint = constraints[i],\n            fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n            fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n          if (fixedA || fixedB) {\n            Constraint.solve(constraints[i], timeScale);\n          }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n          constraint = constraints[i];\n          fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n          fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n          if (!fixedA && !fixedB) {\n            Constraint.solve(constraints[i], timeScale);\n          }\n        }\n      };\n\n      /**\n       * Solves a distance constraint with Gauss-Siedel method.\n       * @private\n       * @method solve\n       * @param {constraint} constraint\n       * @param {number} timeScale\n       */\n      Constraint.solve = function (constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n          bodyB = constraint.bodyB,\n          pointA = constraint.pointA,\n          pointB = constraint.pointB;\n        if (!bodyA && !bodyB) return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n          Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n          constraint.angleA = bodyA.angle;\n        }\n\n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n          Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n          constraint.angleB = bodyB.angle;\n        }\n        var pointAWorld = pointA,\n          pointBWorld = pointB;\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n        if (!pointAWorld || !pointBWorld) return;\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n          currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n          currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n          isRigid = constraint.stiffness >= 1 || constraint.length === 0,\n          stiffness = isRigid ? constraint.stiffness * timeScale : constraint.stiffness * timeScale * timeScale,\n          damping = constraint.damping * timeScale,\n          force = Vector.mult(delta, difference * stiffness),\n          massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n          inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n          resistanceTotal = massTotal + inertiaTotal,\n          torque,\n          share,\n          normal,\n          normalVelocity,\n          relativeVelocity;\n        if (damping > 0) {\n          var zero = Vector.create();\n          normal = Vector.div(delta, currentLength);\n          relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n          normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n        if (bodyA && !bodyA.isStatic) {\n          share = bodyA.inverseMass / massTotal;\n\n          // keep track of applied impulses for post solving\n          bodyA.constraintImpulse.x -= force.x * share;\n          bodyA.constraintImpulse.y -= force.y * share;\n\n          // apply forces\n          bodyA.position.x -= force.x * share;\n          bodyA.position.y -= force.y * share;\n\n          // apply damping\n          if (damping > 0) {\n            bodyA.positionPrev.x -= damping * normal.x * normalVelocity * share;\n            bodyA.positionPrev.y -= damping * normal.y * normalVelocity * share;\n          }\n\n          // apply torque\n          torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n          bodyA.constraintImpulse.angle -= torque;\n          bodyA.angle -= torque;\n        }\n        if (bodyB && !bodyB.isStatic) {\n          share = bodyB.inverseMass / massTotal;\n\n          // keep track of applied impulses for post solving\n          bodyB.constraintImpulse.x += force.x * share;\n          bodyB.constraintImpulse.y += force.y * share;\n\n          // apply forces\n          bodyB.position.x += force.x * share;\n          bodyB.position.y += force.y * share;\n\n          // apply damping\n          if (damping > 0) {\n            bodyB.positionPrev.x += damping * normal.x * normalVelocity * share;\n            bodyB.positionPrev.y += damping * normal.y * normalVelocity * share;\n          }\n\n          // apply torque\n          torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n          bodyB.constraintImpulse.angle += torque;\n          bodyB.angle += torque;\n        }\n      };\n\n      /**\n       * Performs body updates required after solving constraints.\n       * @private\n       * @method postSolveAll\n       * @param {body[]} bodies\n       */\n      Constraint.postSolveAll = function (bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            impulse = body.constraintImpulse;\n          if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n            continue;\n          }\n          Sleeping.set(body, false);\n\n          // update geometry and reset\n          for (var j = 0; j < body.parts.length; j++) {\n            var part = body.parts[j];\n            Vertices.translate(part.vertices, impulse);\n            if (j > 0) {\n              part.position.x += impulse.x;\n              part.position.y += impulse.y;\n            }\n            if (impulse.angle !== 0) {\n              Vertices.rotate(part.vertices, impulse.angle, body.position);\n              Axes.rotate(part.axes, impulse.angle);\n              if (j > 0) {\n                Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n              }\n            }\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n\n          // dampen the cached impulse for warming next step\n          impulse.angle *= Constraint._warming;\n          impulse.x *= Constraint._warming;\n          impulse.y *= Constraint._warming;\n        }\n      };\n\n      /**\n       * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n       * @method pointAWorld\n       * @param {constraint} constraint\n       * @returns {vector} the world-space position\n       */\n      Constraint.pointAWorld = function (constraint) {\n        return {\n          x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + (constraint.pointA ? constraint.pointA.x : 0),\n          y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + (constraint.pointA ? constraint.pointA.y : 0)\n        };\n      };\n\n      /**\n       * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n       * @method pointBWorld\n       * @param {constraint} constraint\n       * @returns {vector} the world-space position\n       */\n      Constraint.pointBWorld = function (constraint) {\n        return {\n          x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + (constraint.pointB ? constraint.pointB.x : 0),\n          y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + (constraint.pointB ? constraint.pointB.y : 0)\n        };\n      };\n\n      /**\n       * Returns the current length of the constraint. \n       * This is the distance between both of the constraint's end points.\n       * See `constraint.length` for the target rest length.\n       * @method currentLength\n       * @param {constraint} constraint\n       * @returns {number} the current length\n       */\n      Constraint.currentLength = function (constraint) {\n        var pointAX = (constraint.bodyA ? constraint.bodyA.position.x : 0) + (constraint.pointA ? constraint.pointA.x : 0);\n        var pointAY = (constraint.bodyA ? constraint.bodyA.position.y : 0) + (constraint.pointA ? constraint.pointA.y : 0);\n        var pointBX = (constraint.bodyB ? constraint.bodyB.position.x : 0) + (constraint.pointB ? constraint.pointB.x : 0);\n        var pointBY = (constraint.bodyB ? constraint.bodyB.position.y : 0) + (constraint.pointB ? constraint.pointB.y : 0);\n        var deltaX = pointAX - pointBX;\n        var deltaY = pointAY - pointBY;\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n      };\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n       *\n       * @property id\n       * @type number\n       */\n\n      /**\n       * A `String` denoting the type of object.\n       *\n       * @property type\n       * @type string\n       * @default \"constraint\"\n       * @readOnly\n       */\n\n      /**\n       * An arbitrary `String` name to help the user identify and manage bodies.\n       *\n       * @property label\n       * @type string\n       * @default \"Constraint\"\n       */\n\n      /**\n       * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n       *\n       * @property render\n       * @type object\n       */\n\n      /**\n       * A flag that indicates if the constraint should be rendered.\n       *\n       * @property render.visible\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * A `Number` that defines the line width to use when rendering the constraint outline.\n       * A value of `0` means no outline will be rendered.\n       *\n       * @property render.lineWidth\n       * @type number\n       * @default 2\n       */\n\n      /**\n       * A `String` that defines the stroke style to use when rendering the constraint outline.\n       * It is the same as when using a canvas, so it accepts CSS style property values.\n       *\n       * @property render.strokeStyle\n       * @type string\n       * @default a random colour\n       */\n\n      /**\n       * A `String` that defines the constraint rendering type. \n       * The possible values are 'line', 'pin', 'spring'.\n       * An appropriate render type will be automatically chosen unless one is given in options.\n       *\n       * @property render.type\n       * @type string\n       * @default 'line'\n       */\n\n      /**\n       * A `Boolean` that defines if the constraint's anchor points should be rendered.\n       *\n       * @property render.anchors\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * The first possible `Body` that this constraint is attached to.\n       *\n       * @property bodyA\n       * @type body\n       * @default null\n       */\n\n      /**\n       * The second possible `Body` that this constraint is attached to.\n       *\n       * @property bodyB\n       * @type body\n       * @default null\n       */\n\n      /**\n       * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n       *\n       * @property pointA\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n       *\n       * @property pointB\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n       * A value of `1` means the constraint should be very stiff.\n       * A value of `0.2` means the constraint acts like a soft spring.\n       *\n       * @property stiffness\n       * @type number\n       * @default 1\n       */\n\n      /**\n       * A `Number` that specifies the damping of the constraint, \n       * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n       * Damping will only be apparent when the constraint also has a very low `stiffness`.\n       * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n       * A value of `0` means the constraint will apply no damping.\n       *\n       * @property damping\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Number` that specifies the target resting length of the constraint. \n       * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n       *\n       * @property length\n       * @type number\n       */\n\n      /**\n       * An object reserved for storing plugin-specific properties.\n       *\n       * @property plugin\n       * @type {}\n       */\n    })();\n\n    /***/\n  }), (/* 11 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n    *\n    * @class Axes\n    */\n\n    var Axes = {};\n    module.exports = Axes;\n    var Vector = __webpack_require__(2);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Creates a new set of axes from the given vertices.\n       * @method fromVertices\n       * @param {vertices} vertices\n       * @return {axes} A new axes from the given vertices\n       */\n      Axes.fromVertices = function (vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n          var j = (i + 1) % vertices.length,\n            normal = Vector.normalise({\n              x: vertices[j].y - vertices[i].y,\n              y: vertices[i].x - vertices[j].x\n            }),\n            gradient = normal.y === 0 ? Infinity : normal.x / normal.y;\n\n          // limit precision\n          gradient = gradient.toFixed(3).toString();\n          axes[gradient] = normal;\n        }\n        return Common.values(axes);\n      };\n\n      /**\n       * Rotates a set of axes by the given angle.\n       * @method rotate\n       * @param {axes} axes\n       * @param {number} angle\n       */\n      Axes.rotate = function (axes, angle) {\n        if (angle === 0) return;\n        var cos = Math.cos(angle),\n          sin = Math.sin(angle);\n        for (var i = 0; i < axes.length; i++) {\n          var axis = axes[i],\n            xx;\n          xx = axis.x * cos - axis.y * sin;\n          axis.y = axis.x * sin + axis.y * cos;\n          axis.x = xx;\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 12 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Bodies` module contains factory methods for creating rigid body models \n    * with commonly used body configurations (such as rectangles, circles and other polygons).\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Bodies\n    */\n\n    // TODO: true circle bodies\n\n    var Bodies = {};\n    module.exports = Bodies;\n    var Vertices = __webpack_require__(3);\n    var Common = __webpack_require__(0);\n    var Body = __webpack_require__(4);\n    var Bounds = __webpack_require__(1);\n    var Vector = __webpack_require__(2);\n    (function () {\n      /**\n       * Creates a new rigid body model with a rectangle hull. \n       * The options parameter is an object that specifies any properties you wish to override the defaults.\n       * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n       * @method rectangle\n       * @param {number} x\n       * @param {number} y\n       * @param {number} width\n       * @param {number} height\n       * @param {object} [options]\n       * @return {body} A new rectangle body\n       */\n      Bodies.rectangle = function (x, y, width, height, options) {\n        options = options || {};\n        var rectangle = {\n          label: 'Rectangle Body',\n          position: {\n            x: x,\n            y: y\n          },\n          vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n        if (options.chamfer) {\n          var chamfer = options.chamfer;\n          rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n          delete options.chamfer;\n        }\n        return Body.create(Common.extend({}, rectangle, options));\n      };\n\n      /**\n       * Creates a new rigid body model with a trapezoid hull. \n       * The `slope` is parameterised as a fraction of `width` and must be < 1 to form a valid trapezoid. \n       * The options parameter is an object that specifies any properties you wish to override the defaults.\n       * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n       * @method trapezoid\n       * @param {number} x\n       * @param {number} y\n       * @param {number} width\n       * @param {number} height\n       * @param {number} slope Must be a number < 1.\n       * @param {object} [options]\n       * @return {body} A new trapezoid body\n       */\n      Bodies.trapezoid = function (x, y, width, height, slope, options) {\n        options = options || {};\n        if (slope >= 1) {\n          Common.warn('Bodies.trapezoid: slope parameter must be < 1.');\n        }\n        slope *= 0.5;\n        var roof = (1 - slope * 2) * width;\n        var x1 = width * slope,\n          x2 = x1 + roof,\n          x3 = x2 + x1,\n          verticesPath;\n        if (slope < 0.5) {\n          verticesPath = 'L 0 0 L ' + x1 + ' ' + -height + ' L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n        } else {\n          verticesPath = 'L 0 0 L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n        }\n        var trapezoid = {\n          label: 'Trapezoid Body',\n          position: {\n            x: x,\n            y: y\n          },\n          vertices: Vertices.fromPath(verticesPath)\n        };\n        if (options.chamfer) {\n          var chamfer = options.chamfer;\n          trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n          delete options.chamfer;\n        }\n        return Body.create(Common.extend({}, trapezoid, options));\n      };\n\n      /**\n       * Creates a new rigid body model with a circle hull. \n       * The options parameter is an object that specifies any properties you wish to override the defaults.\n       * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n       * @method circle\n       * @param {number} x\n       * @param {number} y\n       * @param {number} radius\n       * @param {object} [options]\n       * @param {number} [maxSides]\n       * @return {body} A new circle body\n       */\n      Bodies.circle = function (x, y, radius, options, maxSides) {\n        options = options || {};\n        var circle = {\n          label: 'Circle Body',\n          circleRadius: radius\n        };\n\n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1) sides += 1;\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n      };\n\n      /**\n       * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n       * The options parameter is an object that specifies any properties you wish to override the defaults.\n       * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n       * @method polygon\n       * @param {number} x\n       * @param {number} y\n       * @param {number} sides\n       * @param {number} radius\n       * @param {object} [options]\n       * @return {body} A new regular polygon body\n       */\n      Bodies.polygon = function (x, y, sides, radius, options) {\n        options = options || {};\n        if (sides < 3) return Bodies.circle(x, y, radius, options);\n        var theta = 2 * Math.PI / sides,\n          path = '',\n          offset = theta * 0.5;\n        for (var i = 0; i < sides; i += 1) {\n          var angle = offset + i * theta,\n            xx = Math.cos(angle) * radius,\n            yy = Math.sin(angle) * radius;\n          path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n        var polygon = {\n          label: 'Polygon Body',\n          position: {\n            x: x,\n            y: y\n          },\n          vertices: Vertices.fromPath(path)\n        };\n        if (options.chamfer) {\n          var chamfer = options.chamfer;\n          polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n          delete options.chamfer;\n        }\n        return Body.create(Common.extend({}, polygon, options));\n      };\n\n      /**\n       * Utility to create a compound body based on set(s) of vertices.\n       * \n       * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n       * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n       * \n       * The resulting vertices are reorientated about their centre of mass,\n       * and offset such that `body.position` corresponds to this point.\n       * \n       * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n       * To later move the centre of mass see `Body.setCentre`.\n       * \n       * Note that automatic conconcave decomposition results are not always optimal. \n       * For best results, simplify the input vertices as much as possible first.\n       * By default this function applies some addtional simplification to help.\n       * \n       * Some outputs may also require further manual processing afterwards to be robust.\n       * In particular some parts may need to be overlapped to avoid collision gaps.\n       * Thin parts and sharp points should be avoided or removed where possible.\n       *\n       * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n       * \n       * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n       * @method fromVertices\n       * @param {number} x\n       * @param {number} y\n       * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n       * @param {object} [options] The body options.\n       * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n       * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n       * @param {number} [minimumArea=10] Threshold when removing small parts.\n       * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n       * @return {body}\n       */\n      Bodies.fromVertices = function (x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n          canDecomp,\n          body,\n          parts,\n          isConvex,\n          isConcave,\n          vertices,\n          i,\n          j,\n          k,\n          v,\n          z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n        options = options || {};\n        parts = [];\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n          vertexSets = [vertexSets];\n        }\n        for (v = 0; v < vertexSets.length; v += 1) {\n          vertices = vertexSets[v];\n          isConvex = Vertices.isConvex(vertices);\n          isConcave = !isConvex;\n          if (isConcave && !canDecomp) {\n            Common.warnOnce('Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.');\n          }\n          if (isConvex || !canDecomp) {\n            if (isConvex) {\n              vertices = Vertices.clockwiseSort(vertices);\n            } else {\n              // fallback to convex hull when decomposition is not possible\n              vertices = Vertices.hull(vertices);\n            }\n            parts.push({\n              position: {\n                x: x,\n                y: y\n              },\n              vertices: vertices\n            });\n          } else {\n            // initialise a decomposition\n            var concave = vertices.map(function (vertex) {\n              return [vertex.x, vertex.y];\n            });\n\n            // vertices are concave and simple, we can decompose into parts\n            decomp.makeCCW(concave);\n            if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear);\n            if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints) decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n            // use the quick decomposition algorithm (Bayazit)\n            var decomposed = decomp.quickDecomp(concave);\n\n            // for each decomposed chunk\n            for (i = 0; i < decomposed.length; i++) {\n              var chunk = decomposed[i];\n\n              // convert vertices into the correct structure\n              var chunkVertices = chunk.map(function (vertices) {\n                return {\n                  x: vertices[0],\n                  y: vertices[1]\n                };\n              });\n\n              // skip small chunks\n              if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue;\n\n              // create a compound part\n              parts.push({\n                position: Vertices.centre(chunkVertices),\n                vertices: chunkVertices\n              });\n            }\n          }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n          parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n          var coincident_max_dist = 5;\n          for (i = 0; i < parts.length; i++) {\n            var partA = parts[i];\n            for (j = i + 1; j < parts.length; j++) {\n              var partB = parts[j];\n              if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                var pav = partA.vertices,\n                  pbv = partB.vertices;\n\n                // iterate vertices of both parts\n                for (k = 0; k < partA.vertices.length; k++) {\n                  for (z = 0; z < partB.vertices.length; z++) {\n                    // find distances between the vertices\n                    var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                      db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                    // if both vertices are very close, consider the edge concident (internal)\n                    if (da < coincident_max_dist && db < coincident_max_dist) {\n                      pav[k].isInternal = true;\n                      pbv[z].isInternal = true;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (parts.length > 1) {\n          // create the parent body to be returned, that contains generated compound parts\n          body = Body.create(Common.extend({\n            parts: parts.slice(0)\n          }, options));\n\n          // offset such that body.position is at the centre off mass\n          Body.setPosition(body, {\n            x: x,\n            y: y\n          });\n          return body;\n        } else {\n          return parts[0];\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 13 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n    *\n    * @class Detector\n    */\n\n    var Detector = {};\n    module.exports = Detector;\n    var Common = __webpack_require__(0);\n    var Collision = __webpack_require__(8);\n    (function () {\n      /**\n       * Creates a new collision detector.\n       * @method create\n       * @param {} options\n       * @return {detector} A new collision detector\n       */\n      Detector.create = function (options) {\n        var defaults = {\n          bodies: [],\n          collisions: [],\n          pairs: null\n        };\n        return Common.extend(defaults, options);\n      };\n\n      /**\n       * Sets the list of bodies in the detector.\n       * @method setBodies\n       * @param {detector} detector\n       * @param {body[]} bodies\n       */\n      Detector.setBodies = function (detector, bodies) {\n        detector.bodies = bodies.slice(0);\n      };\n\n      /**\n       * Clears the detector including its list of bodies.\n       * @method clear\n       * @param {detector} detector\n       */\n      Detector.clear = function (detector) {\n        detector.bodies = [];\n        detector.collisions = [];\n      };\n\n      /**\n       * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n       * \n       * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n       * If a specific ordering is required then apply a sort to the resulting array.\n       * @method collisions\n       * @param {detector} detector\n       * @return {collision[]} collisions\n       */\n      Detector.collisions = function (detector) {\n        var pairs = detector.pairs,\n          bodies = detector.bodies,\n          bodiesLength = bodies.length,\n          canCollide = Detector.canCollide,\n          collides = Collision.collides,\n          collisions = detector.collisions,\n          collisionIndex = 0,\n          i,\n          j;\n        bodies.sort(Detector._compareBoundsX);\n        for (i = 0; i < bodiesLength; i++) {\n          var bodyA = bodies[i],\n            boundsA = bodyA.bounds,\n            boundXMax = bodyA.bounds.max.x,\n            boundYMax = bodyA.bounds.max.y,\n            boundYMin = bodyA.bounds.min.y,\n            bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n            partsALength = bodyA.parts.length,\n            partsASingle = partsALength === 1;\n          for (j = i + 1; j < bodiesLength; j++) {\n            var bodyB = bodies[j],\n              boundsB = bodyB.bounds;\n            if (boundsB.min.x > boundXMax) {\n              break;\n            }\n            if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n              continue;\n            }\n            if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n              continue;\n            }\n            if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n              continue;\n            }\n            var partsBLength = bodyB.parts.length;\n            if (partsASingle && partsBLength === 1) {\n              var collision = collides(bodyA, bodyB, pairs);\n              if (collision) {\n                collisions[collisionIndex++] = collision;\n              }\n            } else {\n              var partsAStart = partsALength > 1 ? 1 : 0,\n                partsBStart = partsBLength > 1 ? 1 : 0;\n              for (var k = partsAStart; k < partsALength; k++) {\n                var partA = bodyA.parts[k],\n                  boundsA = partA.bounds;\n                for (var z = partsBStart; z < partsBLength; z++) {\n                  var partB = bodyB.parts[z],\n                    boundsB = partB.bounds;\n                  if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                    continue;\n                  }\n                  var collision = collides(partA, partB, pairs);\n                  if (collision) {\n                    collisions[collisionIndex++] = collision;\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (collisions.length !== collisionIndex) {\n          collisions.length = collisionIndex;\n        }\n        return collisions;\n      };\n\n      /**\n       * Returns `true` if both supplied collision filters will allow a collision to occur.\n       * See `body.collisionFilter` for more information.\n       * @method canCollide\n       * @param {} filterA\n       * @param {} filterB\n       * @return {bool} `true` if collision can occur\n       */\n      Detector.canCollide = function (filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n      };\n\n      /**\n       * The comparison function used in the broadphase algorithm.\n       * Returns the signed delta of the bodies bounds on the x-axis.\n       * @private\n       * @method _sortCompare\n       * @param {body} bodyA\n       * @param {body} bodyB\n       * @return {number} The signed delta used for sorting\n       */\n      Detector._compareBoundsX = function (bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n      };\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * The array of `Matter.Body` between which the detector finds collisions.\n       * \n       * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n       * @property bodies\n       * @type body[]\n       * @default []\n       */\n\n      /**\n       * The array of `Matter.Collision` found in the last call to `Detector.collisions` on this detector.\n       * @property collisions\n       * @type collision[]\n       * @default []\n       */\n\n      /**\n       * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n       * @property pairs\n       * @type {pairs|null}\n       * @default null\n       */\n    })();\n\n    /***/\n  }), (/* 14 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n    *\n    * @class Mouse\n    */\n\n    var Mouse = {};\n    module.exports = Mouse;\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Creates a mouse input.\n       * @method create\n       * @param {HTMLElement} element\n       * @return {mouse} A new mouse\n       */\n      Mouse.create = function (element) {\n        var mouse = {};\n        if (!element) {\n          Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        mouse.element = element || document.body;\n        mouse.absolute = {\n          x: 0,\n          y: 0\n        };\n        mouse.position = {\n          x: 0,\n          y: 0\n        };\n        mouse.mousedownPosition = {\n          x: 0,\n          y: 0\n        };\n        mouse.mouseupPosition = {\n          x: 0,\n          y: 0\n        };\n        mouse.offset = {\n          x: 0,\n          y: 0\n        };\n        mouse.scale = {\n          x: 1,\n          y: 1\n        };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n        mouse.sourceEvents = {\n          mousemove: null,\n          mousedown: null,\n          mouseup: null,\n          mousewheel: null\n        };\n        mouse.mousemove = function (event) {\n          var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n            touches = event.changedTouches;\n          if (touches) {\n            mouse.button = 0;\n            event.preventDefault();\n          }\n          mouse.absolute.x = position.x;\n          mouse.absolute.y = position.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n          mouse.sourceEvents.mousemove = event;\n        };\n        mouse.mousedown = function (event) {\n          var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n            touches = event.changedTouches;\n          if (touches) {\n            mouse.button = 0;\n            event.preventDefault();\n          } else {\n            mouse.button = event.button;\n          }\n          mouse.absolute.x = position.x;\n          mouse.absolute.y = position.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n          mouse.mousedownPosition.x = mouse.position.x;\n          mouse.mousedownPosition.y = mouse.position.y;\n          mouse.sourceEvents.mousedown = event;\n        };\n        mouse.mouseup = function (event) {\n          var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n            touches = event.changedTouches;\n          if (touches) {\n            event.preventDefault();\n          }\n          mouse.button = -1;\n          mouse.absolute.x = position.x;\n          mouse.absolute.y = position.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n          mouse.mouseupPosition.x = mouse.position.x;\n          mouse.mouseupPosition.y = mouse.position.y;\n          mouse.sourceEvents.mouseup = event;\n        };\n        mouse.mousewheel = function (event) {\n          mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n          event.preventDefault();\n          mouse.sourceEvents.mousewheel = event;\n        };\n        Mouse.setElement(mouse, mouse.element);\n        return mouse;\n      };\n\n      /**\n       * Sets the element the mouse is bound to (and relative to).\n       * @method setElement\n       * @param {mouse} mouse\n       * @param {HTMLElement} element\n       */\n      Mouse.setElement = function (mouse, element) {\n        mouse.element = element;\n        element.addEventListener('mousemove', mouse.mousemove, {\n          passive: true\n        });\n        element.addEventListener('mousedown', mouse.mousedown, {\n          passive: true\n        });\n        element.addEventListener('mouseup', mouse.mouseup, {\n          passive: true\n        });\n        element.addEventListener('wheel', mouse.mousewheel, {\n          passive: false\n        });\n        element.addEventListener('touchmove', mouse.mousemove, {\n          passive: false\n        });\n        element.addEventListener('touchstart', mouse.mousedown, {\n          passive: false\n        });\n        element.addEventListener('touchend', mouse.mouseup, {\n          passive: false\n        });\n      };\n\n      /**\n       * Clears all captured source events.\n       * @method clearSourceEvents\n       * @param {mouse} mouse\n       */\n      Mouse.clearSourceEvents = function (mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n      };\n\n      /**\n       * Sets the mouse position offset.\n       * @method setOffset\n       * @param {mouse} mouse\n       * @param {vector} offset\n       */\n      Mouse.setOffset = function (mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n      };\n\n      /**\n       * Sets the mouse position scale.\n       * @method setScale\n       * @param {mouse} mouse\n       * @param {vector} scale\n       */\n      Mouse.setScale = function (mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n      };\n\n      /**\n       * Gets the mouse position relative to an element given a screen pixel ratio.\n       * @method _getRelativeMousePosition\n       * @private\n       * @param {} event\n       * @param {} element\n       * @param {number} pixelRatio\n       * @return {}\n       */\n      Mouse._getRelativeMousePosition = function (event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n          rootNode = document.documentElement || document.body.parentNode || document.body,\n          scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft,\n          scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop,\n          touches = event.changedTouches,\n          x,\n          y;\n        if (touches) {\n          x = touches[0].pageX - elementBounds.left - scrollX;\n          y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n          x = event.pageX - elementBounds.left - scrollX;\n          y = event.pageY - elementBounds.top - scrollY;\n        }\n        return {\n          x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n          y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n      };\n    })();\n\n    /***/\n  }), (/* 15 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n    *\n    * @class Plugin\n    */\n\n    var Plugin = {};\n    module.exports = Plugin;\n    var Common = __webpack_require__(0);\n    (function () {\n      Plugin._registry = {};\n\n      /**\n       * Registers a plugin object so it can be resolved later by name.\n       * @method register\n       * @param plugin {} The plugin to register.\n       * @return {object} The plugin.\n       */\n      Plugin.register = function (plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n          Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n        if (plugin.name in Plugin._registry) {\n          var registered = Plugin._registry[plugin.name],\n            pluginVersion = Plugin.versionParse(plugin.version).number,\n            registeredVersion = Plugin.versionParse(registered.version).number;\n          if (pluginVersion > registeredVersion) {\n            Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n            Plugin._registry[plugin.name] = plugin;\n          } else if (pluginVersion < registeredVersion) {\n            Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n          } else if (plugin !== registered) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n          }\n        } else {\n          Plugin._registry[plugin.name] = plugin;\n        }\n        return plugin;\n      };\n\n      /**\n       * Resolves a dependency to a plugin object from the registry if it exists. \n       * The `dependency` may contain a version, but only the name matters when resolving.\n       * @method resolve\n       * @param dependency {string} The dependency.\n       * @return {object} The plugin if resolved, otherwise `undefined`.\n       */\n      Plugin.resolve = function (dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n      };\n\n      /**\n       * Returns a pretty printed plugin name and version.\n       * @method toString\n       * @param plugin {} The plugin.\n       * @return {string} Pretty printed plugin name and version.\n       */\n      Plugin.toString = function (plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n      };\n\n      /**\n       * Returns `true` if the object meets the minimum standard to be considered a plugin.\n       * This means it must define the following properties:\n       * - `name`\n       * - `version`\n       * - `install`\n       * @method isPlugin\n       * @param obj {} The obj to test.\n       * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n       */\n      Plugin.isPlugin = function (obj) {\n        return obj && obj.name && obj.version && obj.install;\n      };\n\n      /**\n       * Returns `true` if a plugin with the given `name` been installed on `module`.\n       * @method isUsed\n       * @param module {} The module.\n       * @param name {string} The plugin name.\n       * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n       */\n      Plugin.isUsed = function (module, name) {\n        return module.used.indexOf(name) > -1;\n      };\n\n      /**\n       * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n       * If `plugin.for` is not specified then it is assumed to be applicable.\n       * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n       * @method isFor\n       * @param plugin {} The plugin.\n       * @param module {} The module.\n       * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n       */\n      Plugin.isFor = function (plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n      };\n\n      /**\n       * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n       * For installing plugins on `Matter` see the convenience function `Matter.use`.\n       * Plugins may be specified either by their name or a reference to the plugin object.\n       * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n       * Order is important, a topological sort is performed to find the best resulting order of installation.\n       * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n       * This function logs the resulting status of each dependency in the console, along with any warnings.\n       * - A green tick ✅ indicates a dependency was resolved and installed.\n       * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n       * - A red cross ❌ indicates a dependency could not be resolved.\n       * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n       * @method use\n       * @param module {} The module install plugins on.\n       * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n       */\n      Plugin.use = function (module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n        if (module.uses.length === 0) {\n          Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n          return;\n        }\n        var dependencies = Plugin.dependencies(module),\n          sortedDependencies = Common.topologicalSort(dependencies),\n          status = [];\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n          if (sortedDependencies[i] === module.name) {\n            continue;\n          }\n          var plugin = Plugin.resolve(sortedDependencies[i]);\n          if (!plugin) {\n            status.push('❌ ' + sortedDependencies[i]);\n            continue;\n          }\n          if (Plugin.isUsed(module, plugin.name)) {\n            continue;\n          }\n          if (!Plugin.isFor(plugin, module)) {\n            Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n            plugin._warned = true;\n          }\n          if (plugin.install) {\n            plugin.install(module);\n          } else {\n            Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n            plugin._warned = true;\n          }\n          if (plugin._warned) {\n            status.push('🔶 ' + Plugin.toString(plugin));\n            delete plugin._warned;\n          } else {\n            status.push('✅ ' + Plugin.toString(plugin));\n          }\n          module.used.push(plugin.name);\n        }\n        if (status.length > 0) {\n          Common.info(status.join('  '));\n        }\n      };\n\n      /**\n       * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n       * @method dependencies\n       * @param module {} The module.\n       * @return {object} A dependency graph.\n       */\n      Plugin.dependencies = function (module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n          name = parsedBase.name;\n        tracked = tracked || {};\n        if (name in tracked) {\n          return;\n        }\n        module = Plugin.resolve(module) || module;\n        tracked[name] = Common.map(module.uses || [], function (dependency) {\n          if (Plugin.isPlugin(dependency)) {\n            Plugin.register(dependency);\n          }\n          var parsed = Plugin.dependencyParse(dependency),\n            resolved = Plugin.resolve(dependency);\n          if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n            Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n            resolved._warned = true;\n            module._warned = true;\n          } else if (!resolved) {\n            Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n            module._warned = true;\n          }\n          return parsed.name;\n        });\n        for (var i = 0; i < tracked[name].length; i += 1) {\n          Plugin.dependencies(tracked[name][i], tracked);\n        }\n        return tracked;\n      };\n\n      /**\n       * Parses a dependency string into its components.\n       * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n       * See documentation for `Plugin.versionParse` for a description of the format.\n       * This function can also handle dependencies that are already resolved (e.g. a module object).\n       * @method dependencyParse\n       * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n       * @return {object} The dependency parsed into its components.\n       */\n      Plugin.dependencyParse = function (dependency) {\n        if (Common.isString(dependency)) {\n          var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n          if (!pattern.test(dependency)) {\n            Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n          }\n          return {\n            name: dependency.split('@')[0],\n            range: dependency.split('@')[1] || '*'\n          };\n        }\n        return {\n          name: dependency.name,\n          range: dependency.range || dependency.version\n        };\n      };\n\n      /**\n       * Parses a version string into its components.  \n       * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n       * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n       * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n       * Only the following range types are supported:\n       * - Tilde ranges e.g. `~1.2.3`\n       * - Caret ranges e.g. `^1.2.3`\n       * - Greater than ranges e.g. `>1.2.3`\n       * - Greater than or equal ranges e.g. `>=1.2.3`\n       * - Exact version e.g. `1.2.3`\n       * - Any version `*`\n       * @method versionParse\n       * @param range {string} The version string.\n       * @return {object} The version range parsed into its components.\n       */\n      Plugin.versionParse = function (range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n        if (!pattern.test(range)) {\n          Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n        return {\n          isRange: Boolean(parts[1] || parts[2]),\n          version: parts[3],\n          range: range,\n          operator: parts[1] || parts[2] || '',\n          major: major,\n          minor: minor,\n          patch: patch,\n          parts: [major, minor, patch],\n          prerelease: parts[7],\n          number: major * 1e8 + minor * 1e4 + patch\n        };\n      };\n\n      /**\n       * Returns `true` if `version` satisfies the given `range`.\n       * See documentation for `Plugin.versionParse` for a description of the format.\n       * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n       * @method versionSatisfies\n       * @param version {string} The version string.\n       * @param range {string} The range string.\n       * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n       */\n      Plugin.versionSatisfies = function (version, range) {\n        range = range || '*';\n        var r = Plugin.versionParse(range),\n          v = Plugin.versionParse(version);\n        if (r.isRange) {\n          if (r.operator === '*' || version === '*') {\n            return true;\n          }\n          if (r.operator === '>') {\n            return v.number > r.number;\n          }\n          if (r.operator === '>=') {\n            return v.number >= r.number;\n          }\n          if (r.operator === '~') {\n            return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n          }\n          if (r.operator === '^') {\n            if (r.major > 0) {\n              return v.major === r.major && v.number >= r.number;\n            }\n            if (r.minor > 0) {\n              return v.minor === r.minor && v.patch >= r.patch;\n            }\n            return v.patch === r.patch;\n          }\n        }\n        return version === range || version === '*';\n      };\n    })();\n\n    /***/\n  }), (/* 16 */\n  /***/function (module, exports) {\n    /**\n    * The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n    *\n    * @class Contact\n    */\n\n    var Contact = {};\n    module.exports = Contact;\n    (function () {\n      /**\n       * Creates a new contact.\n       * @method create\n       * @param {vertex} [vertex]\n       * @return {contact} A new contact\n       */\n      Contact.create = function (vertex) {\n        return {\n          vertex: vertex,\n          normalImpulse: 0,\n          tangentImpulse: 0\n        };\n      };\n    })();\n\n    /***/\n  }), (/* 17 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Engine` module contains methods for creating and manipulating engines.\n    * An engine is a controller that manages updating the simulation of the world.\n    * See `Matter.Runner` for an optional game loop utility.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Engine\n    */\n\n    var Engine = {};\n    module.exports = Engine;\n    var Sleeping = __webpack_require__(7);\n    var Resolver = __webpack_require__(18);\n    var Detector = __webpack_require__(13);\n    var Pairs = __webpack_require__(19);\n    var Events = __webpack_require__(5);\n    var Composite = __webpack_require__(6);\n    var Constraint = __webpack_require__(10);\n    var Common = __webpack_require__(0);\n    var Body = __webpack_require__(4);\n    (function () {\n      Engine._deltaMax = 1000 / 60;\n\n      /**\n       * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n       * All properties have default values, and many are pre-calculated automatically based on other properties.\n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {object} [options]\n       * @return {engine} engine\n       */\n      Engine.create = function (options) {\n        options = options || {};\n        var defaults = {\n          positionIterations: 6,\n          velocityIterations: 4,\n          constraintIterations: 2,\n          enableSleeping: false,\n          events: [],\n          plugin: {},\n          gravity: {\n            x: 0,\n            y: 1,\n            scale: 0.001\n          },\n          timing: {\n            timestamp: 0,\n            timeScale: 1,\n            lastDelta: 0,\n            lastElapsed: 0,\n            lastUpdatesPerFrame: 0\n          }\n        };\n        var engine = Common.extend(defaults, options);\n        engine.world = options.world || Composite.create({\n          label: 'World'\n        });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n        engine.detector.pairs = engine.pairs;\n\n        // for temporary back compatibility only\n        engine.grid = {\n          buckets: []\n        };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        return engine;\n      };\n\n      /**\n       * Moves the simulation forward in time by `delta` milliseconds.\n       * Triggers `beforeUpdate`, `beforeSolve` and `afterUpdate` events.\n       * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n       * @method update\n       * @param {engine} engine\n       * @param {number} [delta=16.666]\n       */\n      Engine.update = function (engine, delta) {\n        var startTime = Common.now();\n        var world = engine.world,\n          detector = engine.detector,\n          pairs = engine.pairs,\n          timing = engine.timing,\n          timestamp = timing.timestamp,\n          i;\n\n        // warn if high delta\n        if (delta > Engine._deltaMax) {\n          Common.warnOnce('Matter.Engine.update: delta argument is recommended to be less than or equal to', Engine._deltaMax.toFixed(3), 'ms.');\n        }\n        delta = typeof delta !== 'undefined' ? delta : Common._baseDelta;\n        delta *= timing.timeScale;\n\n        // increment timestamp\n        timing.timestamp += delta;\n        timing.lastDelta = delta;\n\n        // create an event object\n        var event = {\n          timestamp: timing.timestamp,\n          delta: delta\n        };\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n          allConstraints = Composite.allConstraints(world);\n\n        // if the world has changed\n        if (world.isModified) {\n          // update the detector bodies\n          Detector.setBodies(detector, allBodies);\n\n          // reset all composite modified flags\n          Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping) Sleeping.update(allBodies, delta);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        if (delta > 0) {\n          Engine._bodiesUpdate(allBodies, delta);\n        }\n        Events.trigger(engine, 'beforeSolve', event);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n          Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0) {\n          Events.trigger(engine, 'collisionStart', {\n            pairs: pairs.collisionStart,\n            timestamp: timing.timestamp,\n            delta: delta\n          });\n        }\n\n        // iteratively resolve position between collisions\n        var positionDamping = Common.clamp(20 / engine.positionIterations, 0, 1);\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n          Resolver.solvePosition(pairs.list, delta, positionDamping);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n          Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n          Resolver.solveVelocity(pairs.list, delta);\n        }\n\n        // update body speed and velocity properties\n        Engine._bodiesUpdateVelocities(allBodies);\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0) {\n          Events.trigger(engine, 'collisionActive', {\n            pairs: pairs.collisionActive,\n            timestamp: timing.timestamp,\n            delta: delta\n          });\n        }\n        if (pairs.collisionEnd.length > 0) {\n          Events.trigger(engine, 'collisionEnd', {\n            pairs: pairs.collisionEnd,\n            timestamp: timing.timestamp,\n            delta: delta\n          });\n        }\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n        return engine;\n      };\n\n      /**\n       * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n       * @method merge\n       * @param {engine} engineA\n       * @param {engine} engineB\n       */\n      Engine.merge = function (engineA, engineB) {\n        Common.extend(engineA, engineB);\n        if (engineB.world) {\n          engineA.world = engineB.world;\n          Engine.clear(engineA);\n          var bodies = Composite.allBodies(engineA.world);\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            Sleeping.set(body, false);\n            body.id = Common.nextId();\n          }\n        }\n      };\n\n      /**\n       * Clears the engine pairs and detector.\n       * @method clear\n       * @param {engine} engine\n       */\n      Engine.clear = function (engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n      };\n\n      /**\n       * Zeroes the `body.force` and `body.torque` force buffers.\n       * @method _bodiesClearForces\n       * @private\n       * @param {body[]} bodies\n       */\n      Engine._bodiesClearForces = function (bodies) {\n        var bodiesLength = bodies.length;\n        for (var i = 0; i < bodiesLength; i++) {\n          var body = bodies[i];\n\n          // reset force buffers\n          body.force.x = 0;\n          body.force.y = 0;\n          body.torque = 0;\n        }\n      };\n\n      /**\n       * Applies gravitational acceleration to all `bodies`.\n       * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet.\n       * \n       * @method _bodiesApplyGravity\n       * @private\n       * @param {body[]} bodies\n       * @param {vector} gravity\n       */\n      Engine._bodiesApplyGravity = function (bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001,\n          bodiesLength = bodies.length;\n        if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {\n          return;\n        }\n        for (var i = 0; i < bodiesLength; i++) {\n          var body = bodies[i];\n          if (body.isStatic || body.isSleeping) continue;\n\n          // add the resultant force of gravity\n          body.force.y += body.mass * gravity.y * gravityScale;\n          body.force.x += body.mass * gravity.x * gravityScale;\n        }\n      };\n\n      /**\n       * Applies `Body.update` to all given `bodies`.\n       * @method _bodiesUpdate\n       * @private\n       * @param {body[]} bodies\n       * @param {number} delta The amount of time elapsed between updates\n       */\n      Engine._bodiesUpdate = function (bodies, delta) {\n        var bodiesLength = bodies.length;\n        for (var i = 0; i < bodiesLength; i++) {\n          var body = bodies[i];\n          if (body.isStatic || body.isSleeping) continue;\n          Body.update(body, delta);\n        }\n      };\n\n      /**\n       * Applies `Body.updateVelocities` to all given `bodies`.\n       * @method _bodiesUpdateVelocities\n       * @private\n       * @param {body[]} bodies\n       */\n      Engine._bodiesUpdateVelocities = function (bodies) {\n        var bodiesLength = bodies.length;\n        for (var i = 0; i < bodiesLength; i++) {\n          Body.updateVelocities(bodies[i]);\n        }\n      };\n\n      /**\n       * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n       * @deprecated use Matter.Runner.run(engine) instead\n       * @method run\n       * @param {engine} engine\n       */\n\n      /**\n      * Fired just before an update\n      *\n      * @event beforeUpdate\n      * @param {object} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /**\n      * Fired after bodies updated based on their velocity and forces, but before any collision detection, constraints and resolving etc.\n      *\n      * @event beforeSolve\n      * @param {object} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /**\n      * Fired after engine update and all collision events\n      *\n      * @event afterUpdate\n      * @param {object} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /**\n      * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n      *\n      * @event collisionStart\n      * @param {object} event An event object\n      * @param {pair[]} event.pairs List of affected pairs\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /**\n      * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n      *\n      * @event collisionActive\n      * @param {object} event An event object\n      * @param {pair[]} event.pairs List of affected pairs\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /**\n      * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n      *\n      * @event collisionEnd\n      * @param {object} event An event object\n      * @param {pair[]} event.pairs List of affected pairs\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * An integer `Number` that specifies the number of position iterations to perform each update.\n       * The higher the value, the higher quality the simulation will be at the expense of performance.\n       *\n       * @property positionIterations\n       * @type number\n       * @default 6\n       */\n\n      /**\n       * An integer `Number` that specifies the number of velocity iterations to perform each update.\n       * The higher the value, the higher quality the simulation will be at the expense of performance.\n       *\n       * @property velocityIterations\n       * @type number\n       * @default 4\n       */\n\n      /**\n       * An integer `Number` that specifies the number of constraint iterations to perform each update.\n       * The higher the value, the higher quality the simulation will be at the expense of performance.\n       * The default value of `2` is usually very adequate.\n       *\n       * @property constraintIterations\n       * @type number\n       * @default 2\n       */\n\n      /**\n       * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n       * Sleeping can improve stability and performance, but often at the expense of accuracy.\n       *\n       * @property enableSleeping\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * An `Object` containing properties regarding the timing systems of the engine. \n       *\n       * @property timing\n       * @type object\n       */\n\n      /**\n       * A `Number` that specifies the global scaling factor of time for all bodies.\n       * A value of `0` freezes the simulation.\n       * A value of `0.1` gives a slow-motion effect.\n       * A value of `1.2` gives a speed-up effect.\n       *\n       * @property timing.timeScale\n       * @type number\n       * @default 1\n       */\n\n      /**\n       * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n       * It is incremented on every `Engine.update` by the given `delta` argument. \n       * \n       * @property timing.timestamp\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n       * It is updated by timing from the start of the last `Engine.update` call until it ends.\n       *\n       * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n       * \n       * @property timing.lastElapsed\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Number` that represents the `delta` value used in the last engine update.\n       * \n       * @property timing.lastDelta\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Matter.Detector` instance.\n       *\n       * @property detector\n       * @type detector\n       * @default a Matter.Detector instance\n       */\n\n      /**\n       * A `Matter.Grid` instance.\n       *\n       * @deprecated replaced by `engine.detector`\n       * @property grid\n       * @type grid\n       * @default a Matter.Grid instance\n       */\n\n      /**\n       * Replaced by and now alias for `engine.grid`.\n       *\n       * @deprecated replaced by `engine.detector`\n       * @property broadphase\n       * @type grid\n       * @default a Matter.Grid instance\n       */\n\n      /**\n       * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n       *\n       * @property world\n       * @type composite\n       * @default a Matter.Composite instance\n       */\n\n      /**\n       * An object reserved for storing plugin-specific properties.\n       *\n       * @property plugin\n       * @type {}\n       */\n\n      /**\n       * An optional gravitational acceleration applied to all bodies in `engine.world` on every update.\n       * \n       * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet. For gravity in other contexts, disable this and apply forces as needed.\n       * \n       * To disable set the `scale` component to `0`.\n       * \n       * This is split into three components for ease of use:  \n       * a normalised direction (`x` and `y`) and magnitude (`scale`).\n       *\n       * @property gravity\n       * @type object\n       */\n\n      /**\n       * The gravitational direction normal `x` component, to be multiplied by `gravity.scale`.\n       * \n       * @property gravity.x\n       * @type object\n       * @default 0\n       */\n\n      /**\n       * The gravitational direction normal `y` component, to be multiplied by `gravity.scale`.\n       *\n       * @property gravity.y\n       * @type object\n       * @default 1\n       */\n\n      /**\n       * The magnitude of the gravitational acceleration.\n       * \n       * @property gravity.scale\n       * @type object\n       * @default 0.001\n       */\n    })();\n\n    /***/\n  }), (/* 18 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Resolver` module contains methods for resolving collision pairs.\n    *\n    * @class Resolver\n    */\n\n    var Resolver = {};\n    module.exports = Resolver;\n    var Vertices = __webpack_require__(3);\n    var Common = __webpack_require__(0);\n    var Bounds = __webpack_require__(1);\n    (function () {\n      Resolver._restingThresh = 2;\n      Resolver._restingThreshTangent = Math.sqrt(6);\n      Resolver._positionDampen = 0.9;\n      Resolver._positionWarming = 0.8;\n      Resolver._frictionNormalMultiplier = 5;\n      Resolver._frictionMaxStatic = Number.MAX_VALUE;\n\n      /**\n       * Prepare pairs for position solving.\n       * @method preSolvePosition\n       * @param {pair[]} pairs\n       */\n      Resolver.preSolvePosition = function (pairs) {\n        var i,\n          pair,\n          contactCount,\n          pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n          pair = pairs[i];\n          if (!pair.isActive) continue;\n          contactCount = pair.contactCount;\n          pair.collision.parentA.totalContacts += contactCount;\n          pair.collision.parentB.totalContacts += contactCount;\n        }\n      };\n\n      /**\n       * Find a solution for pair positions.\n       * @method solvePosition\n       * @param {pair[]} pairs\n       * @param {number} delta\n       * @param {number} [damping=1]\n       */\n      Resolver.solvePosition = function (pairs, delta, damping) {\n        var i,\n          pair,\n          collision,\n          bodyA,\n          bodyB,\n          normal,\n          contactShare,\n          positionImpulse,\n          positionDampen = Resolver._positionDampen * (damping || 1),\n          slopDampen = Common.clamp(delta / Common._baseDelta, 0, 1),\n          pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n          pair = pairs[i];\n          if (!pair.isActive || pair.isSensor) continue;\n          collision = pair.collision;\n          bodyA = collision.parentA;\n          bodyB = collision.parentB;\n          normal = collision.normal;\n\n          // get current separation between body edges involved in collision\n          pair.separation = collision.depth + normal.x * (bodyB.positionImpulse.x - bodyA.positionImpulse.x) + normal.y * (bodyB.positionImpulse.y - bodyA.positionImpulse.y);\n        }\n        for (i = 0; i < pairsLength; i++) {\n          pair = pairs[i];\n          if (!pair.isActive || pair.isSensor) continue;\n          collision = pair.collision;\n          bodyA = collision.parentA;\n          bodyB = collision.parentB;\n          normal = collision.normal;\n          positionImpulse = pair.separation - pair.slop * slopDampen;\n          if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n          if (!(bodyA.isStatic || bodyA.isSleeping)) {\n            contactShare = positionDampen / bodyA.totalContacts;\n            bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n            bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n          }\n          if (!(bodyB.isStatic || bodyB.isSleeping)) {\n            contactShare = positionDampen / bodyB.totalContacts;\n            bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n            bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n          }\n        }\n      };\n\n      /**\n       * Apply position resolution.\n       * @method postSolvePosition\n       * @param {body[]} bodies\n       */\n      Resolver.postSolvePosition = function (bodies) {\n        var positionWarming = Resolver._positionWarming,\n          bodiesLength = bodies.length,\n          verticesTranslate = Vertices.translate,\n          boundsUpdate = Bounds.update;\n        for (var i = 0; i < bodiesLength; i++) {\n          var body = bodies[i],\n            positionImpulse = body.positionImpulse,\n            positionImpulseX = positionImpulse.x,\n            positionImpulseY = positionImpulse.y,\n            velocity = body.velocity;\n\n          // reset contact count\n          body.totalContacts = 0;\n          if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n            // update body geometry\n            for (var j = 0; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              verticesTranslate(part.vertices, positionImpulse);\n              boundsUpdate(part.bounds, part.vertices, velocity);\n              part.position.x += positionImpulseX;\n              part.position.y += positionImpulseY;\n            }\n\n            // move the body without changing velocity\n            body.positionPrev.x += positionImpulseX;\n            body.positionPrev.y += positionImpulseY;\n            if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n              // reset cached impulse if the body has velocity along it\n              positionImpulse.x = 0;\n              positionImpulse.y = 0;\n            } else {\n              // warm the next iteration\n              positionImpulse.x *= positionWarming;\n              positionImpulse.y *= positionWarming;\n            }\n          }\n        }\n      };\n\n      /**\n       * Prepare pairs for velocity solving.\n       * @method preSolveVelocity\n       * @param {pair[]} pairs\n       */\n      Resolver.preSolveVelocity = function (pairs) {\n        var pairsLength = pairs.length,\n          i,\n          j;\n        for (i = 0; i < pairsLength; i++) {\n          var pair = pairs[i];\n          if (!pair.isActive || pair.isSensor) continue;\n          var contacts = pair.contacts,\n            contactCount = pair.contactCount,\n            collision = pair.collision,\n            bodyA = collision.parentA,\n            bodyB = collision.parentB,\n            normal = collision.normal,\n            tangent = collision.tangent;\n\n          // resolve each contact\n          for (j = 0; j < contactCount; j++) {\n            var contact = contacts[j],\n              contactVertex = contact.vertex,\n              normalImpulse = contact.normalImpulse,\n              tangentImpulse = contact.tangentImpulse;\n            if (normalImpulse !== 0 || tangentImpulse !== 0) {\n              // total impulse from contact\n              var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n\n              // apply impulse from contact\n              if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                bodyA.anglePrev += bodyA.inverseInertia * ((contactVertex.x - bodyA.position.x) * impulseY - (contactVertex.y - bodyA.position.y) * impulseX);\n              }\n              if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                bodyB.anglePrev -= bodyB.inverseInertia * ((contactVertex.x - bodyB.position.x) * impulseY - (contactVertex.y - bodyB.position.y) * impulseX);\n              }\n            }\n          }\n        }\n      };\n\n      /**\n       * Find a solution for pair velocities.\n       * @method solveVelocity\n       * @param {pair[]} pairs\n       * @param {number} delta\n       */\n      Resolver.solveVelocity = function (pairs, delta) {\n        var timeScale = delta / Common._baseDelta,\n          timeScaleSquared = timeScale * timeScale,\n          timeScaleCubed = timeScaleSquared * timeScale,\n          restingThresh = -Resolver._restingThresh * timeScale,\n          restingThreshTangent = Resolver._restingThreshTangent,\n          frictionNormalMultiplier = Resolver._frictionNormalMultiplier * timeScale,\n          frictionMaxStatic = Resolver._frictionMaxStatic,\n          pairsLength = pairs.length,\n          tangentImpulse,\n          maxFriction,\n          i,\n          j;\n        for (i = 0; i < pairsLength; i++) {\n          var pair = pairs[i];\n          if (!pair.isActive || pair.isSensor) continue;\n          var collision = pair.collision,\n            bodyA = collision.parentA,\n            bodyB = collision.parentB,\n            normalX = collision.normal.x,\n            normalY = collision.normal.y,\n            tangentX = collision.tangent.x,\n            tangentY = collision.tangent.y,\n            inverseMassTotal = pair.inverseMass,\n            friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier,\n            contacts = pair.contacts,\n            contactCount = pair.contactCount,\n            contactShare = 1 / contactCount;\n\n          // get body velocities\n          var bodyAVelocityX = bodyA.position.x - bodyA.positionPrev.x,\n            bodyAVelocityY = bodyA.position.y - bodyA.positionPrev.y,\n            bodyAAngularVelocity = bodyA.angle - bodyA.anglePrev,\n            bodyBVelocityX = bodyB.position.x - bodyB.positionPrev.x,\n            bodyBVelocityY = bodyB.position.y - bodyB.positionPrev.y,\n            bodyBAngularVelocity = bodyB.angle - bodyB.anglePrev;\n\n          // resolve each contact\n          for (j = 0; j < contactCount; j++) {\n            var contact = contacts[j],\n              contactVertex = contact.vertex;\n            var offsetAX = contactVertex.x - bodyA.position.x,\n              offsetAY = contactVertex.y - bodyA.position.y,\n              offsetBX = contactVertex.x - bodyB.position.x,\n              offsetBY = contactVertex.y - bodyB.position.y;\n            var velocityPointAX = bodyAVelocityX - offsetAY * bodyAAngularVelocity,\n              velocityPointAY = bodyAVelocityY + offsetAX * bodyAAngularVelocity,\n              velocityPointBX = bodyBVelocityX - offsetBY * bodyBAngularVelocity,\n              velocityPointBY = bodyBVelocityY + offsetBX * bodyBAngularVelocity;\n            var relativeVelocityX = velocityPointAX - velocityPointBX,\n              relativeVelocityY = velocityPointAY - velocityPointBY;\n            var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n              tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n            // coulomb friction\n            var normalOverlap = pair.separation + normalVelocity;\n            var normalForce = Math.min(normalOverlap, 1);\n            normalForce = normalOverlap < 0 ? 0 : normalForce;\n            var frictionLimit = normalForce * friction;\n            if (tangentVelocity < -frictionLimit || tangentVelocity > frictionLimit) {\n              maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n              tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleCubed;\n              if (tangentImpulse < -maxFriction) {\n                tangentImpulse = -maxFriction;\n              } else if (tangentImpulse > maxFriction) {\n                tangentImpulse = maxFriction;\n              }\n            } else {\n              tangentImpulse = tangentVelocity;\n              maxFriction = frictionMaxStatic;\n            }\n\n            // account for mass, inertia and contact offset\n            var oAcN = offsetAX * normalY - offsetAY * normalX,\n              oBcN = offsetBX * normalY - offsetBY * normalX,\n              share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n            // raw impulses\n            var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n            tangentImpulse *= share;\n\n            // handle high velocity and resting collisions separately\n            if (normalVelocity < restingThresh) {\n              // high normal velocity so clear cached contact normal impulse\n              contact.normalImpulse = 0;\n            } else {\n              // solve resting collision constraints using Erin Catto's method (GDC08)\n              // impulse constraint tends to 0\n              var contactNormalImpulse = contact.normalImpulse;\n              contact.normalImpulse += normalImpulse;\n              if (contact.normalImpulse > 0) contact.normalImpulse = 0;\n              normalImpulse = contact.normalImpulse - contactNormalImpulse;\n            }\n\n            // handle high velocity and resting collisions separately\n            if (tangentVelocity < -restingThreshTangent || tangentVelocity > restingThreshTangent) {\n              // high tangent velocity so clear cached contact tangent impulse\n              contact.tangentImpulse = 0;\n            } else {\n              // solve resting collision constraints using Erin Catto's method (GDC08)\n              // tangent impulse tends to -tangentSpeed or +tangentSpeed\n              var contactTangentImpulse = contact.tangentImpulse;\n              contact.tangentImpulse += tangentImpulse;\n              if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n              if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n              tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n            }\n\n            // total impulse from contact\n            var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n              impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n\n            // apply impulse from contact\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n              bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n              bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n              bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n            }\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n              bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n              bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n              bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n            }\n          }\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 19 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n    *\n    * @class Pairs\n    */\n\n    var Pairs = {};\n    module.exports = Pairs;\n    var Pair = __webpack_require__(9);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Creates a new pairs structure.\n       * @method create\n       * @param {object} options\n       * @return {pairs} A new pairs structure\n       */\n      Pairs.create = function (options) {\n        return Common.extend({\n          table: {},\n          list: [],\n          collisionStart: [],\n          collisionActive: [],\n          collisionEnd: []\n        }, options);\n      };\n\n      /**\n       * Updates pairs given a list of collisions.\n       * @method update\n       * @param {object} pairs\n       * @param {collision[]} collisions\n       * @param {number} timestamp\n       */\n      Pairs.update = function (pairs, collisions, timestamp) {\n        var pairUpdate = Pair.update,\n          pairCreate = Pair.create,\n          pairSetActive = Pair.setActive,\n          pairsTable = pairs.table,\n          pairsList = pairs.list,\n          pairsListLength = pairsList.length,\n          pairsListIndex = pairsListLength,\n          collisionStart = pairs.collisionStart,\n          collisionEnd = pairs.collisionEnd,\n          collisionActive = pairs.collisionActive,\n          collisionsLength = collisions.length,\n          collisionStartIndex = 0,\n          collisionEndIndex = 0,\n          collisionActiveIndex = 0,\n          collision,\n          pair,\n          i;\n        for (i = 0; i < collisionsLength; i++) {\n          collision = collisions[i];\n          pair = collision.pair;\n          if (pair) {\n            // pair already exists (but may or may not be active)\n            if (pair.isActive) {\n              // pair exists and is active\n              collisionActive[collisionActiveIndex++] = pair;\n            }\n\n            // update the pair\n            pairUpdate(pair, collision, timestamp);\n          } else {\n            // pair did not exist, create a new pair\n            pair = pairCreate(collision, timestamp);\n            pairsTable[pair.id] = pair;\n\n            // add the new pair\n            collisionStart[collisionStartIndex++] = pair;\n            pairsList[pairsListIndex++] = pair;\n          }\n        }\n\n        // find pairs that are no longer active\n        pairsListIndex = 0;\n        pairsListLength = pairsList.length;\n        for (i = 0; i < pairsListLength; i++) {\n          pair = pairsList[i];\n\n          // pair is active if updated this timestep\n          if (pair.timeUpdated >= timestamp) {\n            // keep active pairs\n            pairsList[pairsListIndex++] = pair;\n          } else {\n            pairSetActive(pair, false, timestamp);\n\n            // keep inactive pairs if both bodies may be sleeping\n            if (pair.collision.bodyA.sleepCounter > 0 && pair.collision.bodyB.sleepCounter > 0) {\n              pairsList[pairsListIndex++] = pair;\n            } else {\n              // remove inactive pairs if either body awake\n              collisionEnd[collisionEndIndex++] = pair;\n              delete pairsTable[pair.id];\n            }\n          }\n        }\n\n        // update array lengths if changed\n        if (pairsList.length !== pairsListIndex) {\n          pairsList.length = pairsListIndex;\n        }\n        if (collisionStart.length !== collisionStartIndex) {\n          collisionStart.length = collisionStartIndex;\n        }\n        if (collisionEnd.length !== collisionEndIndex) {\n          collisionEnd.length = collisionEndIndex;\n        }\n        if (collisionActive.length !== collisionActiveIndex) {\n          collisionActive.length = collisionActiveIndex;\n        }\n      };\n\n      /**\n       * Clears the given pairs structure.\n       * @method clear\n       * @param {pairs} pairs\n       * @return {pairs} pairs\n       */\n      Pairs.clear = function (pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n      };\n    })();\n\n    /***/\n  }), (/* 20 */\n  /***/function (module, exports, __webpack_require__) {\n    var Matter = module.exports = __webpack_require__(21);\n    Matter.Axes = __webpack_require__(11);\n    Matter.Bodies = __webpack_require__(12);\n    Matter.Body = __webpack_require__(4);\n    Matter.Bounds = __webpack_require__(1);\n    Matter.Collision = __webpack_require__(8);\n    Matter.Common = __webpack_require__(0);\n    Matter.Composite = __webpack_require__(6);\n    Matter.Composites = __webpack_require__(22);\n    Matter.Constraint = __webpack_require__(10);\n    Matter.Contact = __webpack_require__(16);\n    Matter.Detector = __webpack_require__(13);\n    Matter.Engine = __webpack_require__(17);\n    Matter.Events = __webpack_require__(5);\n    Matter.Grid = __webpack_require__(23);\n    Matter.Mouse = __webpack_require__(14);\n    Matter.MouseConstraint = __webpack_require__(24);\n    Matter.Pair = __webpack_require__(9);\n    Matter.Pairs = __webpack_require__(19);\n    Matter.Plugin = __webpack_require__(15);\n    Matter.Query = __webpack_require__(25);\n    Matter.Render = __webpack_require__(26);\n    Matter.Resolver = __webpack_require__(18);\n    Matter.Runner = __webpack_require__(27);\n    Matter.SAT = __webpack_require__(28);\n    Matter.Sleeping = __webpack_require__(7);\n    Matter.Svg = __webpack_require__(29);\n    Matter.Vector = __webpack_require__(2);\n    Matter.Vertices = __webpack_require__(3);\n    Matter.World = __webpack_require__(30);\n\n    // temporary back compatibility\n    Matter.Engine.run = Matter.Runner.run;\n    Matter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\n\n    /***/\n  }), (/* 21 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\r\n    * The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n    *\r\n    * @class Matter\r\n    */\n\n    var Matter = {};\n    module.exports = Matter;\n    var Plugin = __webpack_require__(15);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\r\n       * The library name.\r\n       * @property name\r\n       * @readOnly\r\n       * @type {String}\r\n       */\n      Matter.name = 'matter-js';\n\n      /**\r\n       * The library version.\r\n       * @property version\r\n       * @readOnly\r\n       * @type {String}\r\n       */\n      Matter.version = true ? \"0.20.0\" : undefined;\n\n      /**\r\n       * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n       * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n       * @property uses\r\n       * @type {Array}\r\n       */\n      Matter.uses = [];\n\n      /**\r\n       * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n       * @property used\r\n       * @readOnly\r\n       * @type {Array}\r\n       */\n      Matter.used = [];\n\n      /**\r\n       * Installs the given plugins on the `Matter` namespace.\r\n       * This is a short-hand for `Plugin.use`, see it for more information.\r\n       * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n       * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n       * @method use\r\n       * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n       */\n      Matter.use = function () {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n      };\n\n      /**\r\n       * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n       * See also docs for `Common.chain`.\r\n       * @method before\r\n       * @param {string} path The path relative to `Matter`\r\n       * @param {function} func The function to chain before the original\r\n       * @return {function} The chained function that replaced the original\r\n       */\n      Matter.before = function (path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n      };\n\n      /**\r\n       * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n       * See also docs for `Common.chain`.\r\n       * @method after\r\n       * @param {string} path The path relative to `Matter`\r\n       * @param {function} func The function to chain after the original\r\n       * @return {function} The chained function that replaced the original\r\n       */\n      Matter.after = function (path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n      };\n    })();\n\n    /***/\n  }), (/* 22 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Composites` module contains factory methods for creating composite bodies\n    * with commonly used configurations (such as stacks and chains).\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Composites\n    */\n\n    var Composites = {};\n    module.exports = Composites;\n    var Composite = __webpack_require__(6);\n    var Constraint = __webpack_require__(10);\n    var Common = __webpack_require__(0);\n    var Body = __webpack_require__(4);\n    var Bodies = __webpack_require__(12);\n    var deprecated = Common.deprecated;\n    (function () {\n      /**\n       * Create a new composite containing bodies created in the callback in a grid arrangement.\n       * This function uses the body's bounds to prevent overlaps.\n       * @method stack\n       * @param {number} x Starting position in X.\n       * @param {number} y Starting position in Y.\n       * @param {number} columns\n       * @param {number} rows\n       * @param {number} columnGap\n       * @param {number} rowGap\n       * @param {function} callback\n       * @return {composite} A new composite containing objects created in the callback\n       */\n      Composites.stack = function (x, y, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({\n            label: 'Stack'\n          }),\n          currentX = x,\n          currentY = y,\n          lastBody,\n          i = 0;\n        for (var row = 0; row < rows; row++) {\n          var maxHeight = 0;\n          for (var column = 0; column < columns; column++) {\n            var body = callback(currentX, currentY, column, row, lastBody, i);\n            if (body) {\n              var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                bodyWidth = body.bounds.max.x - body.bounds.min.x;\n              if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n              Body.translate(body, {\n                x: bodyWidth * 0.5,\n                y: bodyHeight * 0.5\n              });\n              currentX = body.bounds.max.x + columnGap;\n              Composite.addBody(stack, body);\n              lastBody = body;\n              i += 1;\n            } else {\n              currentX += columnGap;\n            }\n          }\n          currentY += maxHeight + rowGap;\n          currentX = x;\n        }\n        return stack;\n      };\n\n      /**\n       * Chains all bodies in the given composite together using constraints.\n       * @method chain\n       * @param {composite} composite\n       * @param {number} xOffsetA\n       * @param {number} yOffsetA\n       * @param {number} xOffsetB\n       * @param {number} yOffsetB\n       * @param {object} options\n       * @return {composite} A new composite containing objects chained together with constraints\n       */\n      Composites.chain = function (composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        for (var i = 1; i < bodies.length; i++) {\n          var bodyA = bodies[i - 1],\n            bodyB = bodies[i],\n            bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n            bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n            bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n            bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n          var defaults = {\n            bodyA: bodyA,\n            pointA: {\n              x: bodyAWidth * xOffsetA,\n              y: bodyAHeight * yOffsetA\n            },\n            bodyB: bodyB,\n            pointB: {\n              x: bodyBWidth * xOffsetB,\n              y: bodyBHeight * yOffsetB\n            }\n          };\n          var constraint = Common.extend(defaults, options);\n          Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n        composite.label += ' Chain';\n        return composite;\n      };\n\n      /**\n       * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n       * @method mesh\n       * @param {composite} composite\n       * @param {number} columns\n       * @param {number} rows\n       * @param {boolean} crossBrace\n       * @param {object} options\n       * @return {composite} The composite containing objects meshed together with constraints\n       */\n      Composites.mesh = function (composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n          row,\n          col,\n          bodyA,\n          bodyB,\n          bodyC;\n        for (row = 0; row < rows; row++) {\n          for (col = 1; col < columns; col++) {\n            bodyA = bodies[col - 1 + row * columns];\n            bodyB = bodies[col + row * columns];\n            Composite.addConstraint(composite, Constraint.create(Common.extend({\n              bodyA: bodyA,\n              bodyB: bodyB\n            }, options)));\n          }\n          if (row > 0) {\n            for (col = 0; col < columns; col++) {\n              bodyA = bodies[col + (row - 1) * columns];\n              bodyB = bodies[col + row * columns];\n              Composite.addConstraint(composite, Constraint.create(Common.extend({\n                bodyA: bodyA,\n                bodyB: bodyB\n              }, options)));\n              if (crossBrace && col > 0) {\n                bodyC = bodies[col - 1 + (row - 1) * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyC,\n                  bodyB: bodyB\n                }, options)));\n              }\n              if (crossBrace && col < columns - 1) {\n                bodyC = bodies[col + 1 + (row - 1) * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyC,\n                  bodyB: bodyB\n                }, options)));\n              }\n            }\n          }\n        }\n        composite.label += ' Mesh';\n        return composite;\n      };\n\n      /**\n       * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n       * This function uses the body's bounds to prevent overlaps.\n       * @method pyramid\n       * @param {number} x Starting position in X.\n       * @param {number} y Starting position in Y.\n       * @param {number} columns\n       * @param {number} rows\n       * @param {number} columnGap\n       * @param {number} rowGap\n       * @param {function} callback\n       * @return {composite} A new composite containing objects created in the callback\n       */\n      Composites.pyramid = function (x, y, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(x, y, columns, rows, columnGap, rowGap, function (stackX, stackY, column, row, lastBody, i) {\n          var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n            lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n          if (row > actualRows) return;\n\n          // reverse row order\n          row = actualRows - row;\n          var start = row,\n            end = columns - 1 - row;\n          if (column < start || column > end) return;\n\n          // retroactively fix the first body's position, since width was unknown\n          if (i === 1) {\n            Body.translate(lastBody, {\n              x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n              y: 0\n            });\n          }\n          var xOffset = lastBody ? column * lastBodyWidth : 0;\n          return callback(x + xOffset + column * columnGap, stackY, column, row, lastBody, i);\n        });\n      };\n\n      /**\n       * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n       * @deprecated moved to newtonsCradle example\n       * @method newtonsCradle\n       * @param {number} x Starting position in X.\n       * @param {number} y Starting position in Y.\n       * @param {number} number\n       * @param {number} size\n       * @param {number} length\n       * @return {composite} A new composite newtonsCradle body\n       */\n      Composites.newtonsCradle = function (x, y, number, size, length) {\n        var newtonsCradle = Composite.create({\n          label: 'Newtons Cradle'\n        });\n        for (var i = 0; i < number; i++) {\n          var separation = 1.9,\n            circle = Bodies.circle(x + i * (size * separation), y + length, size, {\n              inertia: Infinity,\n              restitution: 1,\n              friction: 0,\n              frictionAir: 0.0001,\n              slop: 1\n            }),\n            constraint = Constraint.create({\n              pointA: {\n                x: x + i * (size * separation),\n                y: y\n              },\n              bodyB: circle\n            });\n          Composite.addBody(newtonsCradle, circle);\n          Composite.addConstraint(newtonsCradle, constraint);\n        }\n        return newtonsCradle;\n      };\n      deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n\n      /**\n       * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n       * @deprecated moved to car example\n       * @method car\n       * @param {number} x Starting position in X.\n       * @param {number} y Starting position in Y.\n       * @param {number} width\n       * @param {number} height\n       * @param {number} wheelSize\n       * @return {composite} A new composite car body\n       */\n      Composites.car = function (x, y, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n          wheelBase = 20,\n          wheelAOffset = -width * 0.5 + wheelBase,\n          wheelBOffset = width * 0.5 - wheelBase,\n          wheelYOffset = 0;\n        var car = Composite.create({\n            label: 'Car'\n          }),\n          body = Bodies.rectangle(x, y, width, height, {\n            collisionFilter: {\n              group: group\n            },\n            chamfer: {\n              radius: height * 0.5\n            },\n            density: 0.0002\n          });\n        var wheelA = Bodies.circle(x + wheelAOffset, y + wheelYOffset, wheelSize, {\n          collisionFilter: {\n            group: group\n          },\n          friction: 0.8\n        });\n        var wheelB = Bodies.circle(x + wheelBOffset, y + wheelYOffset, wheelSize, {\n          collisionFilter: {\n            group: group\n          },\n          friction: 0.8\n        });\n        var axelA = Constraint.create({\n          bodyB: body,\n          pointB: {\n            x: wheelAOffset,\n            y: wheelYOffset\n          },\n          bodyA: wheelA,\n          stiffness: 1,\n          length: 0\n        });\n        var axelB = Constraint.create({\n          bodyB: body,\n          pointB: {\n            x: wheelBOffset,\n            y: wheelYOffset\n          },\n          bodyA: wheelB,\n          stiffness: 1,\n          length: 0\n        });\n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n        return car;\n      };\n      deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n      /**\n       * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n       * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n       * @deprecated moved to softBody and cloth examples\n       * @method softBody\n       * @param {number} x Starting position in X.\n       * @param {number} y Starting position in Y.\n       * @param {number} columns\n       * @param {number} rows\n       * @param {number} columnGap\n       * @param {number} rowGap\n       * @param {boolean} crossBrace\n       * @param {number} particleRadius\n       * @param {} particleOptions\n       * @param {} constraintOptions\n       * @return {composite} A new composite softBody\n       */\n      Composites.softBody = function (x, y, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({\n          inertia: Infinity\n        }, particleOptions);\n        constraintOptions = Common.extend({\n          stiffness: 0.2,\n          render: {\n            type: 'line',\n            anchors: false\n          }\n        }, constraintOptions);\n        var softBody = Composites.stack(x, y, columns, rows, columnGap, rowGap, function (stackX, stackY) {\n          return Bodies.circle(stackX, stackY, particleRadius, particleOptions);\n        });\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n        softBody.label = 'Soft Body';\n        return softBody;\n      };\n      deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n    })();\n\n    /***/\n  }), (/* 23 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * This module has now been replaced by `Matter.Detector`.\n    *\n    * All usage should be migrated to `Matter.Detector` or another alternative.\n    * For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n    *\n    * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n    *\n    * @class Grid\n    * @deprecated\n    */\n\n    var Grid = {};\n    module.exports = Grid;\n    var Pair = __webpack_require__(9);\n    var Common = __webpack_require__(0);\n    var deprecated = Common.deprecated;\n    (function () {\n      /**\n       * Creates a new grid.\n       * @deprecated replaced by Matter.Detector\n       * @method create\n       * @param {} options\n       * @return {grid} A new grid\n       */\n      Grid.create = function (options) {\n        var defaults = {\n          buckets: {},\n          pairs: {},\n          pairsList: [],\n          bucketWidth: 48,\n          bucketHeight: 48\n        };\n        return Common.extend(defaults, options);\n      };\n\n      /**\n       * The width of a single grid bucket.\n       *\n       * @property bucketWidth\n       * @type number\n       * @default 48\n       */\n\n      /**\n       * The height of a single grid bucket.\n       *\n       * @property bucketHeight\n       * @type number\n       * @default 48\n       */\n\n      /**\n       * Updates the grid.\n       * @deprecated replaced by Matter.Detector\n       * @method update\n       * @param {grid} grid\n       * @param {body[]} bodies\n       * @param {engine} engine\n       * @param {boolean} forceUpdate\n       */\n      Grid.update = function (grid, bodies, engine, forceUpdate) {\n        var i,\n          col,\n          row,\n          world = engine.world,\n          buckets = grid.buckets,\n          bucket,\n          bucketId,\n          gridChanged = false;\n        for (i = 0; i < bodies.length; i++) {\n          var body = bodies[i];\n          if (body.isSleeping && !forceUpdate) continue;\n\n          // temporary back compatibility bounds check\n          if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)) continue;\n          var newRegion = Grid._getRegion(grid, body);\n\n          // if the body has changed grid region\n          if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n            if (!body.region || forceUpdate) body.region = newRegion;\n            var union = Grid._regionUnion(newRegion, body.region);\n\n            // update grid buckets affected by region change\n            // iterate over the union of both regions\n            for (col = union.startCol; col <= union.endCol; col++) {\n              for (row = union.startRow; row <= union.endRow; row++) {\n                bucketId = Grid._getBucketId(col, row);\n                bucket = buckets[bucketId];\n                var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow;\n\n                // remove from old region buckets\n                if (!isInsideNewRegion && isInsideOldRegion) {\n                  if (isInsideOldRegion) {\n                    if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                  }\n                }\n\n                // add to new region buckets\n                if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                  if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n                  Grid._bucketAddBody(grid, bucket, body);\n                }\n              }\n            }\n\n            // set the new region\n            body.region = newRegion;\n\n            // flag changes so we can update pairs\n            gridChanged = true;\n          }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n      };\n      deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n\n      /**\n       * Clears the grid.\n       * @deprecated replaced by Matter.Detector\n       * @method clear\n       * @param {grid} grid\n       */\n      Grid.clear = function (grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n      };\n      deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n\n      /**\n       * Finds the union of two regions.\n       * @method _regionUnion\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} regionA\n       * @param {} regionB\n       * @return {} region\n       */\n      Grid._regionUnion = function (regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n          endCol = Math.max(regionA.endCol, regionB.endCol),\n          startRow = Math.min(regionA.startRow, regionB.startRow),\n          endRow = Math.max(regionA.endRow, regionB.endRow);\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n      };\n\n      /**\n       * Gets the region a given body falls in for a given grid.\n       * @method _getRegion\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} grid\n       * @param {} body\n       * @return {} region\n       */\n      Grid._getRegion = function (grid, body) {\n        var bounds = body.bounds,\n          startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n          endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n          startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n          endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n      };\n\n      /**\n       * Creates a region.\n       * @method _createRegion\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} startCol\n       * @param {} endCol\n       * @param {} startRow\n       * @param {} endRow\n       * @return {} region\n       */\n      Grid._createRegion = function (startCol, endCol, startRow, endRow) {\n        return {\n          id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n          startCol: startCol,\n          endCol: endCol,\n          startRow: startRow,\n          endRow: endRow\n        };\n      };\n\n      /**\n       * Gets the bucket id at the given position.\n       * @method _getBucketId\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} column\n       * @param {} row\n       * @return {string} bucket id\n       */\n      Grid._getBucketId = function (column, row) {\n        return 'C' + column + 'R' + row;\n      };\n\n      /**\n       * Creates a bucket.\n       * @method _createBucket\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} buckets\n       * @param {} bucketId\n       * @return {} bucket\n       */\n      Grid._createBucket = function (buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n      };\n\n      /**\n       * Adds a body to a bucket.\n       * @method _bucketAddBody\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} grid\n       * @param {} bucket\n       * @param {} body\n       */\n      Grid._bucketAddBody = function (grid, bucket, body) {\n        var gridPairs = grid.pairs,\n          pairId = Pair.id,\n          bucketLength = bucket.length,\n          i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n          var bodyB = bucket[i];\n          if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue;\n\n          // keep track of the number of buckets the pair exists in\n          // important for Grid.update to work\n          var id = pairId(body, bodyB),\n            pair = gridPairs[id];\n          if (pair) {\n            pair[2] += 1;\n          } else {\n            gridPairs[id] = [body, bodyB, 1];\n          }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n      };\n\n      /**\n       * Removes a body from a bucket.\n       * @method _bucketRemoveBody\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} grid\n       * @param {} bucket\n       * @param {} body\n       */\n      Grid._bucketRemoveBody = function (grid, bucket, body) {\n        var gridPairs = grid.pairs,\n          pairId = Pair.id,\n          i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n          // keep track of the number of buckets the pair exists in\n          // important for _createActivePairsList to work\n          var pair = gridPairs[pairId(body, bucket[i])];\n          if (pair) pair[2] -= 1;\n        }\n      };\n\n      /**\n       * Generates a list of the active pairs in the grid.\n       * @method _createActivePairsList\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} grid\n       * @return [] pairs\n       */\n      Grid._createActivePairsList = function (grid) {\n        var pair,\n          gridPairs = grid.pairs,\n          pairKeys = Common.keys(gridPairs),\n          pairKeysLength = pairKeys.length,\n          pairs = [],\n          k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n          pair = gridPairs[pairKeys[k]];\n\n          // if pair exists in at least one bucket\n          // it is a pair that needs further collision testing so push it\n          if (pair[2] > 0) {\n            pairs.push(pair);\n          } else {\n            delete gridPairs[pairKeys[k]];\n          }\n        }\n        return pairs;\n      };\n    })();\n\n    /***/\n  }), (/* 24 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n    * Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class MouseConstraint\n    */\n\n    var MouseConstraint = {};\n    module.exports = MouseConstraint;\n    var Vertices = __webpack_require__(3);\n    var Sleeping = __webpack_require__(7);\n    var Mouse = __webpack_require__(14);\n    var Events = __webpack_require__(5);\n    var Detector = __webpack_require__(13);\n    var Constraint = __webpack_require__(10);\n    var Composite = __webpack_require__(6);\n    var Common = __webpack_require__(0);\n    var Bounds = __webpack_require__(1);\n    (function () {\n      /**\n       * Creates a new mouse constraint.\n       * All properties have default values, and many are pre-calculated automatically based on other properties.\n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {engine} engine\n       * @param {} options\n       * @return {MouseConstraint} A new MouseConstraint\n       */\n      MouseConstraint.create = function (engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n        if (!mouse) {\n          if (engine && engine.render && engine.render.canvas) {\n            mouse = Mouse.create(engine.render.canvas);\n          } else if (options && options.element) {\n            mouse = Mouse.create(options.element);\n          } else {\n            mouse = Mouse.create();\n            Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n          }\n        }\n        var constraint = Constraint.create({\n          label: 'Mouse Constraint',\n          pointA: mouse.position,\n          pointB: {\n            x: 0,\n            y: 0\n          },\n          length: 0.01,\n          stiffness: 0.1,\n          angularStiffness: 1,\n          render: {\n            strokeStyle: '#90EE90',\n            lineWidth: 3\n          }\n        });\n        var defaults = {\n          type: 'mouseConstraint',\n          mouse: mouse,\n          element: null,\n          body: null,\n          constraint: constraint,\n          collisionFilter: {\n            category: 0x0001,\n            mask: 0xFFFFFFFF,\n            group: 0\n          }\n        };\n        var mouseConstraint = Common.extend(defaults, options);\n        Events.on(engine, 'beforeUpdate', function () {\n          var allBodies = Composite.allBodies(engine.world);\n          MouseConstraint.update(mouseConstraint, allBodies);\n          MouseConstraint._triggerEvents(mouseConstraint);\n        });\n        return mouseConstraint;\n      };\n\n      /**\n       * Updates the given mouse constraint.\n       * @private\n       * @method update\n       * @param {MouseConstraint} mouseConstraint\n       * @param {body[]} bodies\n       */\n      MouseConstraint.update = function (mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n          constraint = mouseConstraint.constraint,\n          body = mouseConstraint.body;\n        if (mouse.button === 0) {\n          if (!constraint.bodyB) {\n            for (var i = 0; i < bodies.length; i++) {\n              body = bodies[i];\n              if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                  var part = body.parts[j];\n                  if (Vertices.contains(part.vertices, mouse.position)) {\n                    constraint.pointA = mouse.position;\n                    constraint.bodyB = mouseConstraint.body = body;\n                    constraint.pointB = {\n                      x: mouse.position.x - body.position.x,\n                      y: mouse.position.y - body.position.y\n                    };\n                    constraint.angleB = body.angle;\n                    Sleeping.set(body, false);\n                    Events.trigger(mouseConstraint, 'startdrag', {\n                      mouse: mouse,\n                      body: body\n                    });\n                    break;\n                  }\n                }\n              }\n            }\n          } else {\n            Sleeping.set(constraint.bodyB, false);\n            constraint.pointA = mouse.position;\n          }\n        } else {\n          constraint.bodyB = mouseConstraint.body = null;\n          constraint.pointB = null;\n          if (body) Events.trigger(mouseConstraint, 'enddrag', {\n            mouse: mouse,\n            body: body\n          });\n        }\n      };\n\n      /**\n       * Triggers mouse constraint events.\n       * @method _triggerEvents\n       * @private\n       * @param {mouse} mouseConstraint\n       */\n      MouseConstraint._triggerEvents = function (mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n          mouseEvents = mouse.sourceEvents;\n        if (mouseEvents.mousemove) Events.trigger(mouseConstraint, 'mousemove', {\n          mouse: mouse\n        });\n        if (mouseEvents.mousedown) Events.trigger(mouseConstraint, 'mousedown', {\n          mouse: mouse\n        });\n        if (mouseEvents.mouseup) Events.trigger(mouseConstraint, 'mouseup', {\n          mouse: mouse\n        });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n      };\n\n      /*\n      *\n      *  Events Documentation\n      *\n      */\n\n      /**\n      * Fired when the mouse has moved (or a touch moves) during the last step\n      *\n      * @event mousemove\n      * @param {} event An event object\n      * @param {mouse} event.mouse The engine's mouse instance\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when the mouse is down (or a touch has started) during the last step\n      *\n      * @event mousedown\n      * @param {} event An event object\n      * @param {mouse} event.mouse The engine's mouse instance\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when the mouse is up (or a touch has ended) during the last step\n      *\n      * @event mouseup\n      * @param {} event An event object\n      * @param {mouse} event.mouse The engine's mouse instance\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when the user starts dragging a body\n      *\n      * @event startdrag\n      * @param {} event An event object\n      * @param {mouse} event.mouse The engine's mouse instance\n      * @param {body} event.body The body being dragged\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when the user ends dragging a body\n      *\n      * @event enddrag\n      * @param {} event An event object\n      * @param {mouse} event.mouse The engine's mouse instance\n      * @param {body} event.body The body that has stopped being dragged\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * A `String` denoting the type of object.\n       *\n       * @property type\n       * @type string\n       * @default \"constraint\"\n       * @readOnly\n       */\n\n      /**\n       * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n       *\n       * @property mouse\n       * @type mouse\n       * @default mouse\n       */\n\n      /**\n       * The `Body` that is currently being moved by the user, or `null` if no body.\n       *\n       * @property body\n       * @type body\n       * @default null\n       */\n\n      /**\n       * The `Constraint` object that is used to move the body during interaction.\n       *\n       * @property constraint\n       * @type constraint\n       */\n\n      /**\n       * An `Object` that specifies the collision filter properties.\n       * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n       * See `body.collisionFilter` for more information.\n       *\n       * @property collisionFilter\n       * @type object\n       */\n    })();\n\n    /***/\n  }), (/* 25 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Query` module contains methods for performing collision queries.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Query\n    */\n\n    var Query = {};\n    module.exports = Query;\n    var Vector = __webpack_require__(2);\n    var Collision = __webpack_require__(8);\n    var Bounds = __webpack_require__(1);\n    var Bodies = __webpack_require__(12);\n    var Vertices = __webpack_require__(3);\n    (function () {\n      /**\n       * Returns a list of collisions between `body` and `bodies`.\n       * @method collides\n       * @param {body} body\n       * @param {body[]} bodies\n       * @return {collision[]} Collisions\n       */\n      Query.collides = function (body, bodies) {\n        var collisions = [],\n          bodiesLength = bodies.length,\n          bounds = body.bounds,\n          collides = Collision.collides,\n          overlaps = Bounds.overlaps;\n        for (var i = 0; i < bodiesLength; i++) {\n          var bodyA = bodies[i],\n            partsALength = bodyA.parts.length,\n            partsAStart = partsALength === 1 ? 0 : 1;\n          if (overlaps(bodyA.bounds, bounds)) {\n            for (var j = partsAStart; j < partsALength; j++) {\n              var part = bodyA.parts[j];\n              if (overlaps(part.bounds, bounds)) {\n                var collision = collides(part, body);\n                if (collision) {\n                  collisions.push(collision);\n                  break;\n                }\n              }\n            }\n          }\n        }\n        return collisions;\n      };\n\n      /**\n       * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n       * @method ray\n       * @param {body[]} bodies\n       * @param {vector} startPoint\n       * @param {vector} endPoint\n       * @param {number} [rayWidth]\n       * @return {collision[]} Collisions\n       */\n      Query.ray = function (bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n        var rayAngle = Vector.angle(startPoint, endPoint),\n          rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n          rayX = (endPoint.x + startPoint.x) * 0.5,\n          rayY = (endPoint.y + startPoint.y) * 0.5,\n          ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n            angle: rayAngle\n          }),\n          collisions = Query.collides(ray, bodies);\n        for (var i = 0; i < collisions.length; i += 1) {\n          var collision = collisions[i];\n          collision.body = collision.bodyB = collision.bodyA;\n        }\n        return collisions;\n      };\n\n      /**\n       * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n       * @method region\n       * @param {body[]} bodies\n       * @param {bounds} bounds\n       * @param {bool} [outside=false]\n       * @return {body[]} The bodies matching the query\n       */\n      Query.region = function (bodies, bounds, outside) {\n        var result = [];\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            overlaps = Bounds.overlaps(body.bounds, bounds);\n          if (overlaps && !outside || !overlaps && outside) result.push(body);\n        }\n        return result;\n      };\n\n      /**\n       * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n       * @method point\n       * @param {body[]} bodies\n       * @param {vector} point\n       * @return {body[]} The bodies matching the query\n       */\n      Query.point = function (bodies, point) {\n        var result = [];\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i];\n          if (Bounds.contains(body.bounds, point)) {\n            for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                result.push(body);\n                break;\n              }\n            }\n          }\n        }\n        return result;\n      };\n    })();\n\n    /***/\n  }), (/* 26 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Render` module is a lightweight, optional utility which provides a simple canvas based renderer for visualising instances of `Matter.Engine`.\n    * It is intended for development and debugging purposes, but may also be suitable for simple games.\n    * It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n    *\n    * @class Render\n    */\n\n    var Render = {};\n    module.exports = Render;\n    var Body = __webpack_require__(4);\n    var Common = __webpack_require__(0);\n    var Composite = __webpack_require__(6);\n    var Bounds = __webpack_require__(1);\n    var Events = __webpack_require__(5);\n    var Vector = __webpack_require__(2);\n    var Mouse = __webpack_require__(14);\n    (function () {\n      var _requestAnimationFrame, _cancelAnimationFrame;\n      if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n          window.setTimeout(function () {\n            callback(Common.now());\n          }, 1000 / 60);\n        };\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n      }\n      Render._goodFps = 30;\n      Render._goodDelta = 1000 / 60;\n\n      /**\n       * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n       * All properties have default values, and many are pre-calculated automatically based on other properties.\n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {object} [options]\n       * @return {render} A new renderer\n       */\n      Render.create = function (options) {\n        var defaults = {\n          engine: null,\n          element: null,\n          canvas: null,\n          mouse: null,\n          frameRequestId: null,\n          timing: {\n            historySize: 60,\n            delta: 0,\n            deltaHistory: [],\n            lastTime: 0,\n            lastTimestamp: 0,\n            lastElapsed: 0,\n            timestampElapsed: 0,\n            timestampElapsedHistory: [],\n            engineDeltaHistory: [],\n            engineElapsedHistory: [],\n            engineUpdatesHistory: [],\n            elapsedHistory: []\n          },\n          options: {\n            width: 800,\n            height: 600,\n            pixelRatio: 1,\n            background: '#14151f',\n            wireframeBackground: '#14151f',\n            wireframeStrokeStyle: '#bbb',\n            hasBounds: !!options.bounds,\n            enabled: true,\n            wireframes: true,\n            showSleeping: true,\n            showDebug: false,\n            showStats: false,\n            showPerformance: false,\n            showBounds: false,\n            showVelocity: false,\n            showCollisions: false,\n            showSeparations: false,\n            showAxes: false,\n            showPositions: false,\n            showAngleIndicator: false,\n            showIds: false,\n            showVertexNumbers: false,\n            showConvexHulls: false,\n            showInternalEdges: false,\n            showMousePosition: false\n          }\n        };\n        var render = Common.extend(defaults, options);\n        if (render.canvas) {\n          render.canvas.width = render.options.width || render.canvas.width;\n          render.canvas.height = render.options.height || render.canvas.height;\n        }\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n        render.bounds = render.bounds || {\n          min: {\n            x: 0,\n            y: 0\n          },\n          max: {\n            x: render.canvas.width,\n            y: render.canvas.height\n          }\n        };\n\n        // for temporary back compatibility only\n        render.controller = Render;\n        render.options.showBroadphase = false;\n        if (render.options.pixelRatio !== 1) {\n          Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n        if (Common.isElement(render.element)) {\n          render.element.appendChild(render.canvas);\n        }\n        return render;\n      };\n\n      /**\n       * Continuously updates the render canvas on the `requestAnimationFrame` event.\n       * @method run\n       * @param {render} render\n       */\n      Render.run = function (render) {\n        (function loop(time) {\n          render.frameRequestId = _requestAnimationFrame(loop);\n          _updateTiming(render, time);\n          Render.world(render, time);\n          render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n          if (render.options.showStats || render.options.showDebug) {\n            Render.stats(render, render.context, time);\n          }\n          if (render.options.showPerformance || render.options.showDebug) {\n            Render.performance(render, render.context, time);\n          }\n          render.context.setTransform(1, 0, 0, 1, 0, 0);\n        })();\n      };\n\n      /**\n       * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n       * @method stop\n       * @param {render} render\n       */\n      Render.stop = function (render) {\n        _cancelAnimationFrame(render.frameRequestId);\n      };\n\n      /**\n       * Sets the pixel ratio of the renderer and updates the canvas.\n       * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n       * @method setPixelRatio\n       * @param {render} render\n       * @param {number} pixelRatio\n       */\n      Render.setPixelRatio = function (render, pixelRatio) {\n        var options = render.options,\n          canvas = render.canvas;\n        if (pixelRatio === 'auto') {\n          pixelRatio = _getPixelRatio(canvas);\n        }\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n      };\n\n      /**\n       * Sets the render `width` and `height`.\n       * \n       * Updates the canvas accounting for `render.options.pixelRatio`.  \n       * \n       * Updates the bottom right render bound `render.bounds.max` relative to the provided `width` and `height`.\n       * The top left render bound `render.bounds.min` isn't changed.\n       * \n       * Follow this call with `Render.lookAt` if you need to change the render bounds.\n       * \n       * See also `Render.setPixelRatio`.\n       * @method setSize\n       * @param {render} render\n       * @param {number} width The width (in CSS pixels)\n       * @param {number} height The height (in CSS pixels)\n       */\n      Render.setSize = function (render, width, height) {\n        render.options.width = width;\n        render.options.height = height;\n        render.bounds.max.x = render.bounds.min.x + width;\n        render.bounds.max.y = render.bounds.min.y + height;\n        if (render.options.pixelRatio !== 1) {\n          Render.setPixelRatio(render, render.options.pixelRatio);\n        } else {\n          render.canvas.width = width;\n          render.canvas.height = height;\n        }\n      };\n\n      /**\n       * Positions and sizes the viewport around the given object bounds.\n       * Objects must have at least one of the following properties:\n       * - `object.bounds`\n       * - `object.position`\n       * - `object.min` and `object.max`\n       * - `object.x` and `object.y`\n       * @method lookAt\n       * @param {render} render\n       * @param {object[]} objects\n       * @param {vector} [padding]\n       * @param {bool} [center=true]\n       */\n      Render.lookAt = function (render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n          x: 0,\n          y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n          min: {\n            x: Infinity,\n            y: Infinity\n          },\n          max: {\n            x: -Infinity,\n            y: -Infinity\n          }\n        };\n        for (var i = 0; i < objects.length; i += 1) {\n          var object = objects[i],\n            min = object.bounds ? object.bounds.min : object.min || object.position || object,\n            max = object.bounds ? object.bounds.max : object.max || object.position || object;\n          if (min && max) {\n            if (min.x < bounds.min.x) bounds.min.x = min.x;\n            if (max.x > bounds.max.x) bounds.max.x = max.x;\n            if (min.y < bounds.min.y) bounds.min.y = min.y;\n            if (max.y > bounds.max.y) bounds.max.y = max.y;\n          }\n        }\n\n        // find ratios\n        var width = bounds.max.x - bounds.min.x + 2 * padding.x,\n          height = bounds.max.y - bounds.min.y + 2 * padding.y,\n          viewHeight = render.canvas.height,\n          viewWidth = render.canvas.width,\n          outerRatio = viewWidth / viewHeight,\n          innerRatio = width / height,\n          scaleX = 1,\n          scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n          scaleY = innerRatio / outerRatio;\n        } else {\n          scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n          render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n          render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n          render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n          render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n          Mouse.setScale(render.mouse, {\n            x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n            y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n          });\n          Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n      };\n\n      /**\n       * Applies viewport transforms based on `render.bounds` to a render context.\n       * @method startViewTransform\n       * @param {render} render\n       */\n      Render.startViewTransform = function (render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n          boundsHeight = render.bounds.max.y - render.bounds.min.y,\n          boundsScaleX = boundsWidth / render.options.width,\n          boundsScaleY = boundsHeight / render.options.height;\n        render.context.setTransform(render.options.pixelRatio / boundsScaleX, 0, 0, render.options.pixelRatio / boundsScaleY, 0, 0);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n      };\n\n      /**\n       * Resets all transforms on the render context.\n       * @method endViewTransform\n       * @param {render} render\n       */\n      Render.endViewTransform = function (render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n      };\n\n      /**\n       * Renders the given `engine`'s `Matter.World` object.\n       * This is the entry point for all rendering and should be called every time the scene changes.\n       * @method world\n       * @param {render} render\n       */\n      Render.world = function (render, time) {\n        var startTime = Common.now(),\n          engine = render.engine,\n          world = engine.world,\n          canvas = render.canvas,\n          context = render.context,\n          options = render.options,\n          timing = render.timing;\n        var allBodies = Composite.allBodies(world),\n          allConstraints = Composite.allConstraints(world),\n          background = options.wireframes ? options.wireframeBackground : options.background,\n          bodies = [],\n          constraints = [],\n          i;\n        var event = {\n          timestamp: engine.timing.timestamp\n        };\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background) _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n          // filter out bodies that are not in view\n          for (i = 0; i < allBodies.length; i++) {\n            var body = allBodies[i];\n            if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n          }\n\n          // filter out constraints that are not in view\n          for (i = 0; i < allConstraints.length; i++) {\n            var constraint = allConstraints[i],\n              bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointAWorld = constraint.pointA,\n              pointBWorld = constraint.pointB;\n            if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n            if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n            if (!pointAWorld || !pointBWorld) continue;\n            if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n          }\n\n          // transform the view\n          Render.startViewTransform(render);\n\n          // update mouse\n          if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n              x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n              y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n            });\n            Mouse.setOffset(render.mouse, render.bounds.min);\n          }\n        } else {\n          constraints = allConstraints;\n          bodies = allBodies;\n          if (render.options.pixelRatio !== 1) {\n            render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n          }\n        }\n        if (!options.wireframes || engine.enableSleeping && options.showSleeping) {\n          // fully featured rendering of bodies\n          Render.bodies(render, bodies, context);\n        } else {\n          if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context);\n\n          // optimised method for wireframes only\n          Render.bodyWireframes(render, bodies, context);\n        }\n        if (options.showBounds) Render.bodyBounds(render, bodies, context);\n        if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n        if (options.showPositions) Render.bodyPositions(render, bodies, context);\n        if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n        if (options.showIds) Render.bodyIds(render, bodies, context);\n        if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n        if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n        if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n        if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n        Render.constraints(constraints, context);\n        if (options.hasBounds) {\n          // revert view transforms\n          Render.endViewTransform(render);\n        }\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n      };\n\n      /**\n       * Renders statistics about the engine and world useful for debugging.\n       * @private\n       * @method stats\n       * @param {render} render\n       * @param {RenderingContext} context\n       * @param {Number} time\n       */\n      Render.stats = function (render, context, time) {\n        var engine = render.engine,\n          world = engine.world,\n          bodies = Composite.allBodies(world),\n          parts = 0,\n          width = 55,\n          height = 44,\n          x = 0,\n          y = 0;\n\n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n          parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n          'Part': parts,\n          'Body': bodies.length,\n          'Cons': Composite.allConstraints(world).length,\n          'Comp': Composite.allComposites(world).length,\n          'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n          var section = sections[key];\n          // label\n          context.fillStyle = '#aaa';\n          context.fillText(key, x + width, y + 8);\n\n          // value\n          context.fillStyle = '#eee';\n          context.fillText(section, x + width, y + 26);\n          x += width;\n        }\n      };\n\n      /**\n       * Renders engine and render performance information.\n       * @private\n       * @method performance\n       * @param {render} render\n       * @param {RenderingContext} context\n       */\n      Render.performance = function (render, context) {\n        var engine = render.engine,\n          timing = render.timing,\n          deltaHistory = timing.deltaHistory,\n          elapsedHistory = timing.elapsedHistory,\n          timestampElapsedHistory = timing.timestampElapsedHistory,\n          engineDeltaHistory = timing.engineDeltaHistory,\n          engineUpdatesHistory = timing.engineUpdatesHistory,\n          engineElapsedHistory = timing.engineElapsedHistory,\n          lastEngineUpdatesPerFrame = engine.timing.lastUpdatesPerFrame,\n          lastEngineDelta = engine.timing.lastDelta;\n        var deltaMean = _mean(deltaHistory),\n          elapsedMean = _mean(elapsedHistory),\n          engineDeltaMean = _mean(engineDeltaHistory),\n          engineUpdatesMean = _mean(engineUpdatesHistory),\n          engineElapsedMean = _mean(engineElapsedHistory),\n          timestampElapsedMean = _mean(timestampElapsedHistory),\n          rateMean = timestampElapsedMean / deltaMean || 0,\n          neededUpdatesPerFrame = Math.round(deltaMean / lastEngineDelta),\n          fps = 1000 / deltaMean || 0;\n        var graphHeight = 4,\n          gap = 12,\n          width = 60,\n          height = 34,\n          x = 10,\n          y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 5 + width * 6 + 22, height);\n\n        // show FPS\n        Render.status(context, x, y, width, graphHeight, deltaHistory.length, Math.round(fps) + ' fps', fps / Render._goodFps, function (i) {\n          return deltaHistory[i] / deltaMean - 1;\n        });\n\n        // show engine delta\n        Render.status(context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length, lastEngineDelta.toFixed(2) + ' dt', Render._goodDelta / lastEngineDelta, function (i) {\n          return engineDeltaHistory[i] / engineDeltaMean - 1;\n        });\n\n        // show engine updates per frame\n        Render.status(context, x + (gap + width) * 2, y, width, graphHeight, engineUpdatesHistory.length, lastEngineUpdatesPerFrame + ' upf', Math.pow(Common.clamp(engineUpdatesMean / neededUpdatesPerFrame || 1, 0, 1), 4), function (i) {\n          return engineUpdatesHistory[i] / engineUpdatesMean - 1;\n        });\n\n        // show engine update time\n        Render.status(context, x + (gap + width) * 3, y, width, graphHeight, engineElapsedHistory.length, engineElapsedMean.toFixed(2) + ' ut', 1 - lastEngineUpdatesPerFrame * engineElapsedMean / Render._goodFps, function (i) {\n          return engineElapsedHistory[i] / engineElapsedMean - 1;\n        });\n\n        // show render time\n        Render.status(context, x + (gap + width) * 4, y, width, graphHeight, elapsedHistory.length, elapsedMean.toFixed(2) + ' rt', 1 - elapsedMean / Render._goodFps, function (i) {\n          return elapsedHistory[i] / elapsedMean - 1;\n        });\n\n        // show effective speed\n        Render.status(context, x + (gap + width) * 5, y, width, graphHeight, timestampElapsedHistory.length, rateMean.toFixed(2) + ' x', rateMean * rateMean * rateMean, function (i) {\n          return (timestampElapsedHistory[i] / deltaHistory[i] / rateMean || 0) - 1;\n        });\n      };\n\n      /**\n       * Renders a label, indicator and a chart.\n       * @private\n       * @method status\n       * @param {RenderingContext} context\n       * @param {number} x\n       * @param {number} y\n       * @param {number} width\n       * @param {number} height\n       * @param {number} count\n       * @param {string} label\n       * @param {string} indicator\n       * @param {function} plotY\n       */\n      Render.status = function (context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n          context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n      };\n\n      /**\n       * Description\n       * @private\n       * @method constraints\n       * @param {constraint[]} constraints\n       * @param {RenderingContext} context\n       */\n      Render.constraints = function (constraints, context) {\n        var c = context;\n        for (var i = 0; i < constraints.length; i++) {\n          var constraint = constraints[i];\n          if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n          var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            start,\n            end;\n          if (bodyA) {\n            start = Vector.add(bodyA.position, constraint.pointA);\n          } else {\n            start = constraint.pointA;\n          }\n          if (constraint.render.type === 'pin') {\n            c.beginPath();\n            c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n            c.closePath();\n          } else {\n            if (bodyB) {\n              end = Vector.add(bodyB.position, constraint.pointB);\n            } else {\n              end = constraint.pointB;\n            }\n            c.beginPath();\n            c.moveTo(start.x, start.y);\n            if (constraint.render.type === 'spring') {\n              var delta = Vector.sub(end, start),\n                normal = Vector.perp(Vector.normalise(delta)),\n                coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                offset;\n              for (var j = 1; j < coils; j += 1) {\n                offset = j % 2 === 0 ? 1 : -1;\n                c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n              }\n            }\n            c.lineTo(end.x, end.y);\n          }\n          if (constraint.render.lineWidth) {\n            c.lineWidth = constraint.render.lineWidth;\n            c.strokeStyle = constraint.render.strokeStyle;\n            c.stroke();\n          }\n          if (constraint.render.anchors) {\n            c.fillStyle = constraint.render.strokeStyle;\n            c.beginPath();\n            c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n            c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n            c.closePath();\n            c.fill();\n          }\n        }\n      };\n\n      /**\n       * Description\n       * @private\n       * @method bodies\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodies = function (render, bodies, context) {\n        var c = context,\n          engine = render.engine,\n          options = render.options,\n          showInternalEdges = options.showInternalEdges || !options.wireframes,\n          body,\n          part,\n          i,\n          k;\n        for (i = 0; i < bodies.length; i++) {\n          body = bodies[i];\n          if (!body.render.visible) continue;\n\n          // handle compound parts\n          for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n            if (!part.render.visible) continue;\n            if (options.showSleeping && body.isSleeping) {\n              c.globalAlpha = 0.5 * part.render.opacity;\n            } else if (part.render.opacity !== 1) {\n              c.globalAlpha = part.render.opacity;\n            }\n            if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n              // part sprite\n              var sprite = part.render.sprite,\n                texture = _getTexture(render, sprite.texture);\n              c.translate(part.position.x, part.position.y);\n              c.rotate(part.angle);\n              c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale);\n\n              // revert translation, hopefully faster than save / restore\n              c.rotate(-part.angle);\n              c.translate(-part.position.x, -part.position.y);\n            } else {\n              // part polygon\n              if (part.circleRadius) {\n                c.beginPath();\n                c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n              } else {\n                c.beginPath();\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n                for (var j = 1; j < part.vertices.length; j++) {\n                  if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                    c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                  } else {\n                    c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                  }\n                  if (part.vertices[j].isInternal && !showInternalEdges) {\n                    c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                  }\n                }\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                c.closePath();\n              }\n              if (!options.wireframes) {\n                c.fillStyle = part.render.fillStyle;\n                if (part.render.lineWidth) {\n                  c.lineWidth = part.render.lineWidth;\n                  c.strokeStyle = part.render.strokeStyle;\n                  c.stroke();\n                }\n                c.fill();\n              } else {\n                c.lineWidth = 1;\n                c.strokeStyle = render.options.wireframeStrokeStyle;\n                c.stroke();\n              }\n            }\n            c.globalAlpha = 1;\n          }\n        }\n      };\n\n      /**\n       * Optimised method for drawing body wireframes in one pass\n       * @private\n       * @method bodyWireframes\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyWireframes = function (render, bodies, context) {\n        var c = context,\n          showInternalEdges = render.options.showInternalEdges,\n          body,\n          part,\n          i,\n          j,\n          k;\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n          body = bodies[i];\n          if (!body.render.visible) continue;\n\n          // handle compound parts\n          for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n            c.moveTo(part.vertices[0].x, part.vertices[0].y);\n            for (j = 1; j < part.vertices.length; j++) {\n              if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n              } else {\n                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n              }\n              if (part.vertices[j].isInternal && !showInternalEdges) {\n                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n              }\n            }\n            c.lineTo(part.vertices[0].x, part.vertices[0].y);\n          }\n        }\n        c.lineWidth = 1;\n        c.strokeStyle = render.options.wireframeStrokeStyle;\n        c.stroke();\n      };\n\n      /**\n       * Optimised method for drawing body convex hull wireframes in one pass\n       * @private\n       * @method bodyConvexHulls\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyConvexHulls = function (render, bodies, context) {\n        var c = context,\n          body,\n          part,\n          i,\n          j,\n          k;\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n          body = bodies[i];\n          if (!body.render.visible || body.parts.length === 1) continue;\n          c.moveTo(body.vertices[0].x, body.vertices[0].y);\n          for (j = 1; j < body.vertices.length; j++) {\n            c.lineTo(body.vertices[j].x, body.vertices[j].y);\n          }\n          c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n      };\n\n      /**\n       * Renders body vertex numbers.\n       * @private\n       * @method vertexNumbers\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.vertexNumbers = function (render, bodies, context) {\n        var c = context,\n          i,\n          j,\n          k;\n        for (i = 0; i < bodies.length; i++) {\n          var parts = bodies[i].parts;\n          for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n            var part = parts[k];\n            for (j = 0; j < part.vertices.length; j++) {\n              c.fillStyle = 'rgba(255,255,255,0.2)';\n              c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n            }\n          }\n        }\n      };\n\n      /**\n       * Renders mouse position.\n       * @private\n       * @method mousePosition\n       * @param {render} render\n       * @param {mouse} mouse\n       * @param {RenderingContext} context\n       */\n      Render.mousePosition = function (render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n      };\n\n      /**\n       * Draws body bounds\n       * @private\n       * @method bodyBounds\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyBounds = function (render, bodies, context) {\n        var c = context,\n          engine = render.engine,\n          options = render.options;\n        c.beginPath();\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i];\n          if (body.render.visible) {\n            var parts = bodies[i].parts;\n            for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              var part = parts[j];\n              c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n            }\n          }\n        }\n        if (options.wireframes) {\n          c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n          c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n        c.lineWidth = 1;\n        c.stroke();\n      };\n\n      /**\n       * Draws body angle indicators and axes\n       * @private\n       * @method bodyAxes\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyAxes = function (render, bodies, context) {\n        var c = context,\n          engine = render.engine,\n          options = render.options,\n          part,\n          i,\n          j,\n          k;\n        c.beginPath();\n        for (i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            parts = body.parts;\n          if (!body.render.visible) continue;\n          if (options.showAxes) {\n            // render all axes\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              part = parts[j];\n              for (k = 0; k < part.axes.length; k++) {\n                var axis = part.axes[k];\n                c.moveTo(part.position.x, part.position.y);\n                c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n              }\n            }\n          } else {\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              part = parts[j];\n              for (k = 0; k < part.axes.length; k++) {\n                // render a single axis indicator\n                c.moveTo(part.position.x, part.position.y);\n                c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n              }\n            }\n          }\n        }\n        if (options.wireframes) {\n          c.strokeStyle = 'indianred';\n          c.lineWidth = 1;\n        } else {\n          c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n          c.globalCompositeOperation = 'overlay';\n          c.lineWidth = 2;\n        }\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n      };\n\n      /**\n       * Draws body positions\n       * @private\n       * @method bodyPositions\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyPositions = function (render, bodies, context) {\n        var c = context,\n          engine = render.engine,\n          options = render.options,\n          body,\n          part,\n          i,\n          k;\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n          body = bodies[i];\n          if (!body.render.visible) continue;\n\n          // handle compound parts\n          for (k = 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n            c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n            c.closePath();\n          }\n        }\n        if (options.wireframes) {\n          c.fillStyle = 'indianred';\n        } else {\n          c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n          body = bodies[i];\n          if (body.render.visible) {\n            c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n            c.closePath();\n          }\n        }\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n      };\n\n      /**\n       * Draws body velocity\n       * @private\n       * @method bodyVelocity\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyVelocity = function (render, bodies, context) {\n        var c = context;\n        c.beginPath();\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i];\n          if (!body.render.visible) continue;\n          var velocity = Body.getVelocity(body);\n          c.moveTo(body.position.x, body.position.y);\n          c.lineTo(body.position.x + velocity.x, body.position.y + velocity.y);\n        }\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n      };\n\n      /**\n       * Draws body ids\n       * @private\n       * @method bodyIds\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyIds = function (render, bodies, context) {\n        var c = context,\n          i,\n          j;\n        for (i = 0; i < bodies.length; i++) {\n          if (!bodies[i].render.visible) continue;\n          var parts = bodies[i].parts;\n          for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n            var part = parts[j];\n            c.font = \"12px Arial\";\n            c.fillStyle = 'rgba(255,255,255,0.5)';\n            c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n          }\n        }\n      };\n\n      /**\n       * Description\n       * @private\n       * @method collisions\n       * @param {render} render\n       * @param {pair[]} pairs\n       * @param {RenderingContext} context\n       */\n      Render.collisions = function (render, pairs, context) {\n        var c = context,\n          options = render.options,\n          pair,\n          collision,\n          corrected,\n          bodyA,\n          bodyB,\n          i,\n          j;\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n          pair = pairs[i];\n          if (!pair.isActive) continue;\n          collision = pair.collision;\n          for (j = 0; j < pair.contactCount; j++) {\n            var contact = pair.contacts[j],\n              vertex = contact.vertex;\n            c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n          }\n        }\n        if (options.wireframes) {\n          c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n          c.fillStyle = 'orange';\n        }\n        c.fill();\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n          pair = pairs[i];\n          if (!pair.isActive) continue;\n          collision = pair.collision;\n          if (pair.contactCount > 0) {\n            var normalPosX = pair.contacts[0].vertex.x,\n              normalPosY = pair.contacts[0].vertex.y;\n            if (pair.contactCount === 2) {\n              normalPosX = (pair.contacts[0].vertex.x + pair.contacts[1].vertex.x) / 2;\n              normalPosY = (pair.contacts[0].vertex.y + pair.contacts[1].vertex.y) / 2;\n            }\n            if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n              c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n            } else {\n              c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n            }\n            c.lineTo(normalPosX, normalPosY);\n          }\n        }\n        if (options.wireframes) {\n          c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n          c.strokeStyle = 'orange';\n        }\n        c.lineWidth = 1;\n        c.stroke();\n      };\n\n      /**\n       * Description\n       * @private\n       * @method separations\n       * @param {render} render\n       * @param {pair[]} pairs\n       * @param {RenderingContext} context\n       */\n      Render.separations = function (render, pairs, context) {\n        var c = context,\n          options = render.options,\n          pair,\n          collision,\n          corrected,\n          bodyA,\n          bodyB,\n          i,\n          j;\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n          pair = pairs[i];\n          if (!pair.isActive) continue;\n          collision = pair.collision;\n          bodyA = collision.bodyA;\n          bodyB = collision.bodyB;\n          var k = 1;\n          if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n          if (bodyB.isStatic) k = 0;\n          c.moveTo(bodyB.position.x, bodyB.position.y);\n          c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n          k = 1;\n          if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n          if (bodyA.isStatic) k = 0;\n          c.moveTo(bodyA.position.x, bodyA.position.y);\n          c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n        if (options.wireframes) {\n          c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n          c.strokeStyle = 'orange';\n        }\n        c.stroke();\n      };\n\n      /**\n       * Description\n       * @private\n       * @method inspector\n       * @param {inspector} inspector\n       * @param {RenderingContext} context\n       */\n      Render.inspector = function (inspector, context) {\n        var engine = inspector.engine,\n          selected = inspector.selected,\n          render = inspector.render,\n          options = render.options,\n          bounds;\n        if (options.hasBounds) {\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n          context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n          context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n        for (var i = 0; i < selected.length; i++) {\n          var item = selected[i].data;\n          context.translate(0.5, 0.5);\n          context.lineWidth = 1;\n          context.strokeStyle = 'rgba(255,165,0,0.9)';\n          context.setLineDash([1, 2]);\n          switch (item.type) {\n            case 'body':\n              // render body selections\n              bounds = item.bounds;\n              context.beginPath();\n              context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n              context.closePath();\n              context.stroke();\n              break;\n            case 'constraint':\n              // render constraint selections\n              var point = item.pointA;\n              if (item.bodyA) point = item.pointB;\n              context.beginPath();\n              context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n              context.closePath();\n              context.stroke();\n              break;\n          }\n          context.setLineDash([]);\n          context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n          context.translate(0.5, 0.5);\n          context.lineWidth = 1;\n          context.strokeStyle = 'rgba(255,165,0,0.6)';\n          context.fillStyle = 'rgba(255,165,0,0.1)';\n          bounds = inspector.selectBounds;\n          context.beginPath();\n          context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n          context.closePath();\n          context.stroke();\n          context.fill();\n          context.translate(-0.5, -0.5);\n        }\n        if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n      };\n\n      /**\n       * Updates render timing.\n       * @method _updateTiming\n       * @private\n       * @param {render} render\n       * @param {number} time\n       */\n      var _updateTiming = function (render, time) {\n        var engine = render.engine,\n          timing = render.timing,\n          historySize = timing.historySize,\n          timestamp = engine.timing.timestamp;\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n        timing.engineUpdatesHistory.unshift(engine.timing.lastUpdatesPerFrame);\n        timing.engineUpdatesHistory.length = Math.min(timing.engineUpdatesHistory.length, historySize);\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n      };\n\n      /**\n       * Returns the mean value of the given numbers.\n       * @method _mean\n       * @private\n       * @param {Number[]} values\n       * @return {Number} the mean of given values\n       */\n      var _mean = function (values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n          result += values[i];\n        }\n        return result / values.length || 0;\n      };\n\n      /**\n       * @method _createCanvas\n       * @private\n       * @param {} width\n       * @param {} height\n       * @return canvas\n       */\n      var _createCanvas = function (width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function () {\n          return false;\n        };\n        canvas.onselectstart = function () {\n          return false;\n        };\n        return canvas;\n      };\n\n      /**\n       * Gets the pixel ratio of the canvas.\n       * @method _getPixelRatio\n       * @private\n       * @param {HTMLElement} canvas\n       * @return {Number} pixel ratio\n       */\n      var _getPixelRatio = function (canvas) {\n        var context = canvas.getContext('2d'),\n          devicePixelRatio = window.devicePixelRatio || 1,\n          backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n        return devicePixelRatio / backingStorePixelRatio;\n      };\n\n      /**\n       * Gets the requested texture (an Image) via its path\n       * @method _getTexture\n       * @private\n       * @param {render} render\n       * @param {string} imagePath\n       * @return {Image} texture\n       */\n      var _getTexture = function (render, imagePath) {\n        var image = render.textures[imagePath];\n        if (image) return image;\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n        return image;\n      };\n\n      /**\n       * Applies the background to the canvas using CSS.\n       * @method applyBackground\n       * @private\n       * @param {render} render\n       * @param {string} background\n       */\n      var _applyBackground = function (render, background) {\n        var cssBackground = background;\n        if (/(jpg|gif|png)$/.test(background)) cssBackground = 'url(' + background + ')';\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n      };\n\n      /*\n      *\n      *  Events Documentation\n      *\n      */\n\n      /**\n      * Fired before rendering\n      *\n      * @event beforeRender\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired after rendering\n      *\n      * @event afterRender\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * A back-reference to the `Matter.Render` module.\n       *\n       * @deprecated\n       * @property controller\n       * @type render\n       */\n\n      /**\n       * A reference to the `Matter.Engine` instance to be used.\n       *\n       * @property engine\n       * @type engine\n       */\n\n      /**\n       * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n       *\n       * @property element\n       * @type HTMLElement\n       * @default null\n       */\n\n      /**\n       * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n       *\n       * @property canvas\n       * @type HTMLCanvasElement\n       * @default null\n       */\n\n      /**\n       * A `Bounds` object that specifies the drawing view region.\n       * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n       * This allows for creating views that can pan or zoom around the scene.\n       * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n       *\n       * @property bounds\n       * @type bounds\n       */\n\n      /**\n       * The 2d rendering context from the `render.canvas` element.\n       *\n       * @property context\n       * @type CanvasRenderingContext2D\n       */\n\n      /**\n       * The sprite texture cache.\n       *\n       * @property textures\n       * @type {}\n       */\n\n      /**\n       * The mouse to render if `render.options.showMousePosition` is enabled.\n       *\n       * @property mouse\n       * @type mouse\n       * @default null\n       */\n\n      /**\n       * The configuration options of the renderer.\n       *\n       * @property options\n       * @type {}\n       */\n\n      /**\n       * The target width in pixels of the `render.canvas` to be created.\n       * See also the `options.pixelRatio` property to change render quality.\n       *\n       * @property options.width\n       * @type number\n       * @default 800\n       */\n\n      /**\n       * The target height in pixels of the `render.canvas` to be created.\n       * See also the `options.pixelRatio` property to change render quality.\n       *\n       * @property options.height\n       * @type number\n       * @default 600\n       */\n\n      /**\n       * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n       *\n       * @property options.pixelRatio\n       * @type number\n       * @default 1\n       */\n\n      /**\n       * A CSS background color string to use when `render.options.wireframes` is disabled.\n       * This may be also set to `'transparent'` or equivalent.\n       *\n       * @property options.background\n       * @type string\n       * @default '#14151f'\n       */\n\n      /**\n       * A CSS color string to use for background when `render.options.wireframes` is enabled.\n       * This may be also set to `'transparent'` or equivalent.\n       *\n       * @property options.wireframeBackground\n       * @type string\n       * @default '#14151f'\n       */\n\n      /**\n       * A CSS color string to use for stroke when `render.options.wireframes` is enabled.\n       * This may be also set to `'transparent'` or equivalent.\n       *\n       * @property options.wireframeStrokeStyle\n       * @type string\n       * @default '#bbb'\n       */\n\n      /**\n       * A flag that specifies if `render.bounds` should be used when rendering.\n       *\n       * @property options.hasBounds\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable all debug information overlays together.  \n       * This includes and has priority over the values of:\n       *\n       * - `render.options.showStats`\n       * - `render.options.showPerformance`\n       *\n       * @property options.showDebug\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the engine stats info overlay.  \n       * From left to right, the values shown are:\n       *\n       * - body parts total\n       * - body total\n       * - constraints total\n       * - composites total\n       * - collision pairs total\n       *\n       * @property options.showStats\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable performance charts.  \n       * From left to right, the values shown are:\n       *\n       * - average render frequency (e.g. 60 fps)\n       * - exact engine delta time used for last update (e.g. 16.66ms)\n       * - average updates per frame (e.g. 1)\n       * - average engine execution duration (e.g. 5.00ms)\n       * - average render execution duration (e.g. 0.40ms)\n       * - average effective play speed (e.g. '1.00x' is 'real-time')\n       *\n       * Each value is recorded over a fixed sample of past frames (60 frames).\n       *\n       * A chart shown below each value indicates the variance from the average over the sample.\n       * The more stable or fixed the value is the flatter the chart will appear.\n       *\n       * @property options.showPerformance\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable rendering entirely.\n       *\n       * @property options.enabled\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n       *\n       * @property options.wireframes\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * A flag to enable or disable sleeping bodies indicators.\n       *\n       * @property options.showSleeping\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * A flag to enable or disable the debug information overlay.\n       *\n       * @property options.showDebug\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the collision broadphase debug overlay.\n       *\n       * @deprecated no longer implemented\n       * @property options.showBroadphase\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body bounds debug overlay.\n       *\n       * @property options.showBounds\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body velocity debug overlay.\n       *\n       * @property options.showVelocity\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body collisions debug overlay.\n       *\n       * @property options.showCollisions\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the collision resolver separations debug overlay.\n       *\n       * @property options.showSeparations\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body axes debug overlay.\n       *\n       * @property options.showAxes\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body positions debug overlay.\n       *\n       * @property options.showPositions\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body angle debug overlay.\n       *\n       * @property options.showAngleIndicator\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body and part ids debug overlay.\n       *\n       * @property options.showIds\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body vertex numbers debug overlay.\n       *\n       * @property options.showVertexNumbers\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body convex hulls debug overlay.\n       *\n       * @property options.showConvexHulls\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body internal edges debug overlay.\n       *\n       * @property options.showInternalEdges\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the mouse position debug overlay.\n       *\n       * @property options.showMousePosition\n       * @type boolean\n       * @default false\n       */\n    })();\n\n    /***/\n  }), (/* 27 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Runner` module is an optional utility that provides a game loop for running a `Matter.Engine` inside a browser environment.\n    * A runner will continuously update a `Matter.Engine` whilst synchronising engine updates with the browser frame rate.\n    * This runner favours a smoother user experience over perfect time keeping.\n    * This runner is optional and is used for development and debugging but could be useful as a starting point for implementing some games and experiences.\n    * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation as may be needed inside other environments.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Runner\n    */\n\n    var Runner = {};\n    module.exports = Runner;\n    var Events = __webpack_require__(5);\n    var Engine = __webpack_require__(17);\n    var Common = __webpack_require__(0);\n    (function () {\n      Runner._maxFrameDelta = 1000 / 15;\n      Runner._frameDeltaFallback = 1000 / 60;\n      Runner._timeBufferMargin = 1.5;\n      Runner._elapsedNextEstimate = 1;\n      Runner._smoothingLowerBound = 0.1;\n      Runner._smoothingUpperBound = 0.9;\n\n      /**\n       * Creates a new Runner. \n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {} options\n       */\n      Runner.create = function (options) {\n        var defaults = {\n          delta: 1000 / 60,\n          frameDelta: null,\n          frameDeltaSmoothing: true,\n          frameDeltaSnapping: true,\n          frameDeltaHistory: [],\n          frameDeltaHistorySize: 100,\n          frameRequestId: null,\n          timeBuffer: 0,\n          timeLastTick: null,\n          maxUpdates: null,\n          maxFrameTime: 1000 / 30,\n          lastUpdatesDeferred: 0,\n          enabled: true\n        };\n        var runner = Common.extend(defaults, options);\n\n        // for temporary back compatibility only\n        runner.fps = 0;\n        return runner;\n      };\n\n      /**\n       * Runs a `Matter.Engine` whilst synchronising engine updates with the browser frame rate. \n       * See module and properties descriptions for more information on this runner.\n       * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n       * @method run\n       * @param {runner} runner\n       * @param {engine} [engine]\n       * @return {runner} runner\n       */\n      Runner.run = function (runner, engine) {\n        // initial time buffer for the first frame\n        runner.timeBuffer = Runner._frameDeltaFallback;\n        (function onFrame(time) {\n          runner.frameRequestId = Runner._onNextFrame(runner, onFrame);\n          if (time && runner.enabled) {\n            Runner.tick(runner, engine, time);\n          }\n        })();\n        return runner;\n      };\n\n      /**\n       * Performs a single runner tick as used inside `Runner.run`.\n       * See module and properties descriptions for more information on this runner.\n       * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n       * @method tick\n       * @param {runner} runner\n       * @param {engine} engine\n       * @param {number} time\n       */\n      Runner.tick = function (runner, engine, time) {\n        var tickStartTime = Common.now(),\n          engineDelta = runner.delta,\n          updateCount = 0;\n\n        // find frame delta time since last call\n        var frameDelta = time - runner.timeLastTick;\n\n        // fallback for unusable frame delta values (e.g. 0, NaN, on first frame or long pauses)\n        if (!frameDelta || !runner.timeLastTick || frameDelta > Math.max(Runner._maxFrameDelta, runner.maxFrameTime)) {\n          // reuse last accepted frame delta else fallback\n          frameDelta = runner.frameDelta || Runner._frameDeltaFallback;\n        }\n        if (runner.frameDeltaSmoothing) {\n          // record frame delta over a number of frames\n          runner.frameDeltaHistory.push(frameDelta);\n          runner.frameDeltaHistory = runner.frameDeltaHistory.slice(-runner.frameDeltaHistorySize);\n\n          // sort frame delta history\n          var deltaHistorySorted = runner.frameDeltaHistory.slice(0).sort();\n\n          // sample a central window to limit outliers\n          var deltaHistoryWindow = runner.frameDeltaHistory.slice(deltaHistorySorted.length * Runner._smoothingLowerBound, deltaHistorySorted.length * Runner._smoothingUpperBound);\n\n          // take the mean of the central window\n          var frameDeltaSmoothed = _mean(deltaHistoryWindow);\n          frameDelta = frameDeltaSmoothed || frameDelta;\n        }\n        if (runner.frameDeltaSnapping) {\n          // snap frame delta to the nearest 1 Hz\n          frameDelta = 1000 / Math.round(1000 / frameDelta);\n        }\n\n        // update runner values for next call\n        runner.frameDelta = frameDelta;\n        runner.timeLastTick = time;\n\n        // accumulate elapsed time\n        runner.timeBuffer += runner.frameDelta;\n\n        // limit time buffer size to a single frame of updates\n        runner.timeBuffer = Common.clamp(runner.timeBuffer, 0, runner.frameDelta + engineDelta * Runner._timeBufferMargin);\n\n        // reset count of over budget updates\n        runner.lastUpdatesDeferred = 0;\n\n        // get max updates per frame\n        var maxUpdates = runner.maxUpdates || Math.ceil(runner.maxFrameTime / engineDelta);\n\n        // create event object\n        var event = {\n          timestamp: engine.timing.timestamp\n        };\n\n        // tick events before update\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(runner, 'tick', event);\n        var updateStartTime = Common.now();\n\n        // simulate time elapsed between calls\n        while (engineDelta > 0 && runner.timeBuffer >= engineDelta * Runner._timeBufferMargin) {\n          // update the engine\n          Events.trigger(runner, 'beforeUpdate', event);\n          Engine.update(engine, engineDelta);\n          Events.trigger(runner, 'afterUpdate', event);\n\n          // consume time simulated from buffer\n          runner.timeBuffer -= engineDelta;\n          updateCount += 1;\n\n          // find elapsed time during this tick\n          var elapsedTimeTotal = Common.now() - tickStartTime,\n            elapsedTimeUpdates = Common.now() - updateStartTime,\n            elapsedNextEstimate = elapsedTimeTotal + Runner._elapsedNextEstimate * elapsedTimeUpdates / updateCount;\n\n          // defer updates if over performance budgets for this frame\n          if (updateCount >= maxUpdates || elapsedNextEstimate > runner.maxFrameTime) {\n            runner.lastUpdatesDeferred = Math.round(Math.max(0, runner.timeBuffer / engineDelta - Runner._timeBufferMargin));\n            break;\n          }\n        }\n\n        // track timing metrics\n        engine.timing.lastUpdatesPerFrame = updateCount;\n\n        // tick events after update\n        Events.trigger(runner, 'afterTick', event);\n\n        // show useful warnings if needed\n        if (runner.frameDeltaHistory.length >= 100) {\n          if (runner.lastUpdatesDeferred && Math.round(runner.frameDelta / engineDelta) > maxUpdates) {\n            Common.warnOnce('Matter.Runner: runner reached runner.maxUpdates, see docs.');\n          } else if (runner.lastUpdatesDeferred) {\n            Common.warnOnce('Matter.Runner: runner reached runner.maxFrameTime, see docs.');\n          }\n          if (typeof runner.isFixed !== 'undefined') {\n            Common.warnOnce('Matter.Runner: runner.isFixed is now redundant, see docs.');\n          }\n          if (runner.deltaMin || runner.deltaMax) {\n            Common.warnOnce('Matter.Runner: runner.deltaMin and runner.deltaMax were removed, see docs.');\n          }\n          if (runner.fps !== 0) {\n            Common.warnOnce('Matter.Runner: runner.fps was replaced by runner.delta, see docs.');\n          }\n        }\n      };\n\n      /**\n       * Ends execution of `Runner.run` on the given `runner` by canceling the frame loop.\n       * Alternatively to temporarily pause the runner, see `runner.enabled`.\n       * @method stop\n       * @param {runner} runner\n       */\n      Runner.stop = function (runner) {\n        Runner._cancelNextFrame(runner);\n      };\n\n      /**\n       * Schedules the `callback` on this `runner` for the next animation frame.\n       * @private\n       * @method _onNextFrame\n       * @param {runner} runner\n       * @param {function} callback\n       * @return {number} frameRequestId\n       */\n      Runner._onNextFrame = function (runner, callback) {\n        if (typeof window !== 'undefined' && window.requestAnimationFrame) {\n          runner.frameRequestId = window.requestAnimationFrame(callback);\n        } else {\n          throw new Error('Matter.Runner: missing required global window.requestAnimationFrame.');\n        }\n        return runner.frameRequestId;\n      };\n\n      /**\n       * Cancels the last callback scheduled by `Runner._onNextFrame` on this `runner`.\n       * @private\n       * @method _cancelNextFrame\n       * @param {runner} runner\n       */\n      Runner._cancelNextFrame = function (runner) {\n        if (typeof window !== 'undefined' && window.cancelAnimationFrame) {\n          window.cancelAnimationFrame(runner.frameRequestId);\n        } else {\n          throw new Error('Matter.Runner: missing required global window.cancelAnimationFrame.');\n        }\n      };\n\n      /**\n       * Returns the mean of the given numbers.\n       * @method _mean\n       * @private\n       * @param {Number[]} values\n       * @return {Number} the mean of given values.\n       */\n      var _mean = function (values) {\n        var result = 0,\n          valuesLength = values.length;\n        for (var i = 0; i < valuesLength; i += 1) {\n          result += values[i];\n        }\n        return result / valuesLength || 0;\n      };\n\n      /*\n      *\n      *  Events Documentation\n      *\n      */\n\n      /**\n      * Fired once at the start of the browser frame, before any engine updates.\n      *\n      * @event beforeTick\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired once at the start of the browser frame, after `beforeTick`.\n      *\n      * @event tick\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired once at the end of the browser frame, after `beforeTick`, `tick` and after any engine updates.\n      *\n      * @event afterTick\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired before each and every engine update in this browser frame (if any). \n      * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n      *\n      * @event beforeUpdate\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired after each and every engine update in this browser frame (if any). \n      * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n      *\n      * @event afterUpdate\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * The fixed timestep size used for `Engine.update` calls in milliseconds, known as `delta`.\n       * \n       * This value is recommended to be `1000 / 60` ms or smaller (i.e. equivalent to at least 60hz).\n       * \n       * Smaller `delta` values provide higher quality results at the cost of performance.\n       * \n       * You should usually avoid changing `delta` during running, otherwise quality may be affected. \n       * \n       * For smoother frame pacing choose a `delta` that is an even multiple of each display FPS you target, i.e. `1000 / (n * fps)` as this helps distribute an equal number of updates over each display frame.\n       * \n       * For example with a 60 Hz `delta` i.e. `1000 / 60` the runner will on average perform one update per frame on displays running 60 FPS and one update every two frames on displays running 120 FPS, etc.\n       * \n       * Where as e.g. using a 240 Hz `delta` i.e. `1000 / 240` the runner will on average perform four updates per frame on displays running 60 FPS and two updates per frame on displays running 120 FPS, etc.\n       * \n       * Therefore `Runner.run` will call multiple engine updates (or none) as needed to simulate the time elapsed between browser frames. \n       * \n       * In practice the number of updates in any particular frame may be restricted to respect the runner's performance budgets. These are specified by `runner.maxFrameTime` and `runner.maxUpdates`, see those properties for details.\n       * \n       * @property delta\n       * @type number\n       * @default 1000 / 60\n       */\n\n      /**\n       * A flag that can be toggled to enable or disable tick calls on this runner, therefore pausing engine updates and events while the runner loop remains running.\n       *\n       * @property enabled\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * The accumulated time elapsed that has yet to be simulated in milliseconds.\n       * This value is clamped within certain limits (see `Runner.tick` code).\n       *\n       * @private\n       * @property timeBuffer\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * The measured time elapsed between the last two browser frames measured in milliseconds.\n       * This is useful e.g. to estimate the current browser FPS using `1000 / runner.frameDelta`.\n       *\n       * @readonly\n       * @property frameDelta\n       * @type number\n       */\n\n      /**\n       * Enables averaging to smooth frame rate measurements and therefore stabilise play rate.\n       *\n       * @property frameDeltaSmoothing\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * Rounds measured browser frame delta to the nearest 1 Hz.\n       * This option can help smooth frame rate measurements and simplify handling hardware timing differences e.g. 59.94Hz and 60Hz displays.\n       * For best results you should also round your `runner.delta` equivalent to the nearest 1 Hz.\n       *\n       * @property frameDeltaSnapping\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * A performance budget that limits execution time allowed for this runner per browser frame in milliseconds.\n       * \n       * To calculate the effective browser FPS at which this throttle is applied use `1000 / runner.maxFrameTime`.\n       * \n       * This performance budget is intended to help maintain browser interactivity and help improve framerate recovery during temporary high CPU usage.\n       * \n       * This budget only covers the measured time elapsed executing the functions called in the scope of the runner tick, including `Engine.update` and its related user event callbacks.\n       * \n       * You may also reduce this budget to allow for any significant additional processing you perform on the same thread outside the scope of this runner tick, e.g. rendering time.\n       * \n       * See also `runner.maxUpdates`.\n       *\n       * @property maxFrameTime\n       * @type number\n       * @default 1000 / 30\n       */\n\n      /**\n       * An optional limit for maximum engine update count allowed per frame tick in addition to `runner.maxFrameTime`.\n       * \n       * Unless you set a value it is automatically chosen based on `runner.delta` and `runner.maxFrameTime`.\n       * \n       * See also `runner.maxFrameTime`.\n       * \n       * @property maxUpdates\n       * @type number\n       * @default null\n       */\n\n      /**\n       * The timestamp of the last call to `Runner.tick` used to measure `frameDelta`.\n       *\n       * @private\n       * @property timeLastTick\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * The id of the last call to `Runner._onNextFrame`.\n       *\n       * @private\n       * @property frameRequestId\n       * @type number\n       * @default null\n       */\n    })();\n\n    /***/\n  }), (/* 28 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * This module has now been replaced by `Matter.Collision`.\n    *\n    * All usage should be migrated to `Matter.Collision`.\n    * For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n    *\n    * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n    *\n    * @class SAT\n    * @deprecated\n    */\n\n    var SAT = {};\n    module.exports = SAT;\n    var Collision = __webpack_require__(8);\n    var Common = __webpack_require__(0);\n    var deprecated = Common.deprecated;\n    (function () {\n      /**\n       * Detect collision between two bodies using the Separating Axis Theorem.\n       * @deprecated replaced by Collision.collides\n       * @method collides\n       * @param {body} bodyA\n       * @param {body} bodyB\n       * @return {collision} collision\n       */\n      SAT.collides = function (bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n      };\n      deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n    })();\n\n    /***/\n  }), (/* 29 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n    *\n    * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Svg\n    */\n\n    var Svg = {};\n    module.exports = Svg;\n    var Bounds = __webpack_require__(1);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Converts an SVG path into an array of vector points.\n       * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n       * See `Bodies.fromVertices` which provides support for this.\n       * Note that this function is not guaranteed to support complex paths (such as those with holes).\n       * You must load the `pathseg.js` polyfill on newer browsers.\n       * @method pathToVertices\n       * @param {SVGPathElement} path\n       * @param {Number} [sampleLength=15]\n       * @return {Vector[]} points\n       */\n      Svg.pathToVertices = function (path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n          Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i,\n          il,\n          total,\n          point,\n          segment,\n          segments,\n          segmentsQueue,\n          lastSegment,\n          lastPoint,\n          segmentIndex,\n          points = [],\n          lx,\n          ly,\n          length = 0,\n          x = 0,\n          y = 0;\n        sampleLength = sampleLength || 15;\n        var addPoint = function (px, py, pathSegType) {\n          // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n          var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n          // when the last point doesn't equal the current point add the current point\n          if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n            if (lastPoint && isRelative) {\n              lx = lastPoint.x;\n              ly = lastPoint.y;\n            } else {\n              lx = 0;\n              ly = 0;\n            }\n            var point = {\n              x: lx + px,\n              y: ly + py\n            };\n\n            // set last point\n            if (isRelative || !lastPoint) {\n              lastPoint = point;\n            }\n            points.push(point);\n            x = lx + px;\n            y = ly + py;\n          }\n        };\n        var addSegmentPoint = function (segment) {\n          var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n          // skip path ends\n          if (segType === 'Z') return;\n\n          // map segment to x and y\n          switch (segType) {\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n              x = segment.x;\n              y = segment.y;\n              break;\n            case 'H':\n              x = segment.x;\n              break;\n            case 'V':\n              y = segment.y;\n              break;\n          }\n          addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1) segments.push(path.pathSegList.getItem(i));\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n          // get segment at position\n          segmentIndex = path.getPathSegAtLength(length);\n          segment = segments[segmentIndex];\n\n          // new segment\n          if (segment != lastSegment) {\n            while (segmentsQueue.length && segmentsQueue[0] != segment) addSegmentPoint(segmentsQueue.shift());\n            lastSegment = segment;\n          }\n\n          // add points in between when curving\n          // TODO: adaptive sampling\n          switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n              point = path.getPointAtLength(length);\n              addPoint(point.x, point.y, 0);\n              break;\n          }\n\n          // increment by sample value\n          length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i) addSegmentPoint(segmentsQueue[i]);\n        return points;\n      };\n      Svg._svgPathToAbsolute = function (path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0,\n          y0,\n          x1,\n          y1,\n          x2,\n          y2,\n          segs = path.pathSegList,\n          x = 0,\n          y = 0,\n          len = segs.numberOfItems;\n        for (var i = 0; i < len; ++i) {\n          var seg = segs.getItem(i),\n            segType = seg.pathSegTypeAsLetter;\n          if (/[MLHVCSQTA]/.test(segType)) {\n            if ('x' in seg) x = seg.x;\n            if ('y' in seg) y = seg.y;\n          } else {\n            if ('x1' in seg) x1 = x + seg.x1;\n            if ('x2' in seg) x2 = x + seg.x2;\n            if ('y1' in seg) y1 = y + seg.y1;\n            if ('y2' in seg) y2 = y + seg.y2;\n            if ('x' in seg) x += seg.x;\n            if ('y' in seg) y += seg.y;\n            switch (segType) {\n              case 'm':\n                segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                break;\n              case 'l':\n                segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                break;\n              case 'h':\n                segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                break;\n              case 'v':\n                segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                break;\n              case 'c':\n                segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                break;\n              case 's':\n                segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                break;\n              case 'q':\n                segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                break;\n              case 't':\n                segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                break;\n              case 'a':\n                segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                break;\n              case 'z':\n              case 'Z':\n                x = x0;\n                y = y0;\n                break;\n            }\n          }\n          if (segType == 'M' || segType == 'm') {\n            x0 = x;\n            y0 = y;\n          }\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 30 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * This module has now been replaced by `Matter.Composite`.\n    *\n    * All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n    * For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n    *\n    * The property `world.gravity` has been moved to `engine.gravity`.\n    *\n    * For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n    * Eventually this alias module will be marked as deprecated and then later removed in a future release.\n    *\n    * @class World\n    */\n\n    var World = {};\n    module.exports = World;\n    var Composite = __webpack_require__(6);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * See above, aliases for back compatibility only\n       */\n      World.create = Composite.create;\n      World.add = Composite.add;\n      World.remove = Composite.remove;\n      World.clear = Composite.clear;\n      World.addComposite = Composite.addComposite;\n      World.addBody = Composite.addBody;\n      World.addConstraint = Composite.addConstraint;\n    })();\n\n    /***/\n  }\n  /******/)]);\n});","map":{"version":3,"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","modules","installedModules","__webpack_require__","moduleId","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","Common","_baseDelta","_nextId","_seed","_nowStartTime","Date","_warnedOnce","_decomp","extend","obj","deep","argsStart","args","deepClone","arguments","length","source","prop","constructor","clone","keys","push","values","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","toString","isFunction","isPlainObject","isString","clamp","min","max","sign","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","warnOnce","message","join","deprecated","warning","chain","nextId","indexOf","haystack","needle","map","list","func","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","funcs","_chained","lastResult","chainPathBefore","base","chainPathAfter","setDecomp","decomp","getDecomp","global","e","Bounds","vertices","bounds","x","y","update","velocity","Infinity","vertex","contains","point","overlaps","boundsA","boundsB","translate","vector","shift","position","deltaX","deltaY","Vector","magnitude","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp","Vertices","points","body","index","isInternal","fromPath","pathPattern","match","parseFloat","centre","area","mean","average","signed","abs","inertia","mass","numerator","denominator","v","verticesLength","translateX","translateY","pointX","pointY","dx","dy","nextVertex","scale","scaleX","scaleY","delta","chamfer","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","pow","radiusVector","midNormal","scaledVertex","precision","alpha","acos","theta","clockwiseSort","sort","vertexA","vertexB","isConvex","flag","k","z","hull","upper","lower","pop","Body","Sleeping","Axes","_timeCorrection","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","options","defaults","id","type","label","plugin","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","strokeStyle","fillStyle","lineWidth","sprite","xScale","yScale","xOffset","yOffset","events","circleRadius","positionPrev","anglePrev","parent","axes","deltaTime","_original","_initProperties","nextGroup","isNonColliding","nextCategory","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setSpeed","setAngularSpeed","setParts","setCentre","part","inverseMass","inverseInertia","moment","fromVertices","autoHull","hullCentre","total","_totalProperties","relative","updateVelocity","getVelocity","getSpeed","getAngularVelocity","getAngularSpeed","translation","rotation","totalArea","totalInertia","deltaTimeSquared","correction","velocityPrevX","velocityPrevY","updateVelocities","bodyVelocity","applyForce","offset","properties","Events","on","eventNames","callback","names","off","callbacks","newCallbacks","trigger","event","eventClone","Composite","isModified","bodies","constraints","composites","cache","allBodies","allConstraints","allComposites","setModified","composite","updateParents","updateChildren","childComposite","objects","addBody","addConstraint","addComposite","constraint","remove","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","sleepCounter","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","move","rebase","recursive","_motionWakeThreshold","_motionSleepThreshold","_minBias","motionSleepThreshold","minMotion","maxMotion","afterCollisions","pairs","pair","isActive","collision","bodyA","bodyB","sleepingBody","movingBody","wasSleeping","Collision","Pair","_supports","_overlapAB","overlap","axis","_overlapBA","collided","parentA","parentB","depth","normal","tangent","penetration","supports","supportCount","collides","_overlapAxes","table","minOverlap","minAxis","normalX","normalY","supportsB","_findSupports","supportsA","verticesA","verticesB","verticesALength","verticesBLength","verticesAX","verticesAY","verticesBX","verticesBY","axesLength","overlapMin","Number","MAX_VALUE","overlapAxisNumber","overlapAB","overlapBA","axisX","axisY","minA","minB","maxA","maxB","direction","bodyAPositionX","bodyAPositionY","nearestDistance","vertexC","distance","Contact","timestamp","contacts","contactCount","separation","timeCreated","timeUpdated","supportA","contactA","supportB","contactB","setActive","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","impulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","isRigid","massTotal","inertiaTotal","resistanceTotal","share","normalVelocity","relativeVelocity","zero","postSolveAll","pointAX","pointAY","pointBX","pointBY","gradient","toFixed","xx","Bodies","rectangle","width","height","trapezoid","slope","roof","x1","x2","x3","verticesPath","circle","maxSides","sides","ceil","polygon","PI","yy","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","isConcave","Boolean","quickDecomp","concave","makeCCW","removeCollinearPoints","decomposed","chunk","chunkVertices","coincident_max_dist","partA","partB","pav","pbv","da","db","Detector","collisions","setBodies","detector","bodiesLength","canCollide","collisionIndex","_compareBoundsX","boundXMax","boundYMax","boundYMin","bodyAStatic","partsALength","partsASingle","partsBLength","partsAStart","partsBStart","filterA","filterB","Mouse","element","mouse","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","button","pixelRatio","getAttribute","sourceEvents","mousemove","mousedown","mouseup","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","passive","clearSourceEvents","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","pageXOffset","undefined","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","clientHeight","Plugin","_registry","register","isPlugin","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","used","isFor","parsed","for","versionSatisfies","use","plugins","uses","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","pattern","test","exec","major","minor","patch","isRange","operator","prerelease","normalImpulse","tangentImpulse","Engine","Resolver","Pairs","_deltaMax","positionIterations","velocityIterations","constraintIterations","enableSleeping","gravity","timing","lastDelta","lastElapsed","lastUpdatesPerFrame","engine","world","grid","buckets","broadphase","metrics","startTime","_bodiesApplyGravity","_bodiesUpdate","collisionStart","positionDamping","preSolvePosition","solvePosition","postSolvePosition","preSolveVelocity","solveVelocity","_bodiesUpdateVelocities","collisionActive","collisionEnd","_bodiesClearForces","merge","engineA","engineB","gravityScale","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","_frictionMaxStatic","pairsLength","contactShare","positionDampen","slopDampen","positionWarming","verticesTranslate","boundsUpdate","positionImpulseX","positionImpulseY","contact","contactVertex","impulseX","impulseY","timeScaleSquared","timeScaleCubed","restingThresh","restingThreshTangent","frictionNormalMultiplier","frictionMaxStatic","maxFriction","tangentX","tangentY","inverseMassTotal","bodyAVelocityX","bodyAVelocityY","bodyAAngularVelocity","bodyBVelocityX","bodyBVelocityY","bodyBAngularVelocity","offsetAX","offsetAY","offsetBX","offsetBY","velocityPointAX","velocityPointAY","velocityPointBX","velocityPointBY","relativeVelocityX","relativeVelocityY","tangentVelocity","normalOverlap","normalForce","frictionLimit","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","pairUpdate","pairCreate","pairSetActive","pairsTable","pairsList","pairsListLength","pairsListIndex","collisionsLength","collisionStartIndex","collisionEndIndex","collisionActiveIndex","Matter","Composites","Grid","MouseConstraint","Query","Render","Runner","SAT","Svg","World","run","before","after","stack","columns","rows","columnGap","rowGap","currentX","currentY","lastBody","row","maxHeight","column","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","col","bodyC","pyramid","stackX","stackY","actualRows","lastBodyWidth","start","newtonsCradle","size","car","wheelSize","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","bucketWidth","bucketHeight","forceUpdate","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","gridPairs","pairId","bucketLength","pairKeys","pairKeysLength","canvas","mouseConstraint","_triggerEvents","mouseEvents","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_goodFps","_goodDelta","frameRequestId","historySize","deltaHistory","lastTime","lastTimestamp","timestampElapsed","timestampElapsedHistory","engineDeltaHistory","engineElapsedHistory","engineUpdatesHistory","elapsedHistory","background","wireframeBackground","wireframeStrokeStyle","hasBounds","enabled","wireframes","showSleeping","showDebug","showStats","showPerformance","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","controller","showBroadphase","setPixelRatio","appendChild","loop","time","_updateTiming","setTransform","stats","stop","_getPixelRatio","setAttribute","style","setSize","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyIds","separations","vertexNumbers","mousePosition","sections","font","textBaseline","textAlign","section","fillText","lastEngineUpdatesPerFrame","lastEngineDelta","deltaMean","_mean","elapsedMean","engineDeltaMean","engineUpdatesMean","engineElapsedMean","timestampElapsedMean","rateMean","neededUpdatesPerFrame","round","fps","graphHeight","gap","count","indicator","plotY","beginPath","moveTo","lineTo","stroke","arc","closePath","coils","fill","globalAlpha","texture","_getTexture","drawImage","rect","corrected","normalPosX","normalPosY","inspector","selected","item","data","setLineDash","selectStart","selectBounds","unshift","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","_maxFrameDelta","_frameDeltaFallback","_timeBufferMargin","_elapsedNextEstimate","_smoothingLowerBound","_smoothingUpperBound","frameDelta","frameDeltaSmoothing","frameDeltaSnapping","frameDeltaHistory","frameDeltaHistorySize","timeBuffer","timeLastTick","maxUpdates","maxFrameTime","lastUpdatesDeferred","runner","onFrame","_onNextFrame","tick","tickStartTime","engineDelta","updateCount","deltaHistorySorted","deltaHistoryWindow","frameDeltaSmoothed","updateStartTime","elapsedTimeTotal","elapsedTimeUpdates","elapsedNextEstimate","isFixed","deltaMin","deltaMax","_cancelNextFrame","Error","valuesLength","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag"],"sources":["E:/SnakeBall/node_modules/.pnpm/matter-js@0.20.0/node_modules/matter-js/build/matter.js"],"sourcesContent":["/*!\n * matter-js 0.20.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 20);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._baseDelta = 1000 / 60;\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @static\n     * @property logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating rigid bodies.\n* For creating bodies with common configurations such as rectangles, circles and other polygons see the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\n\n(function() {\n\n    Body._timeCorrection = true;\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n    Body._baseDelta = 1000 / 60;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            deltaTime: 1000 / 60,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'speed':\n                Body.setSpeed(body, value);\n                break;\n            case 'angularSpeed':\n                Body.setAngularSpeed(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            if (isStatic) {\n                if (!part.isStatic) {\n                    part._original = {\n                        restitution: part.restitution,\n                        friction: part.friction,\n                        mass: part.mass,\n                        inertia: part.inertia,\n                        density: part.density,\n                        inverseMass: part.inverseMass,\n                        inverseInertia: part.inverseInertia\n                    };\n                }\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n\n            part.isStatic = isStatic;\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull. Concave vertices must be decomposed into convex parts.\n     * \n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body`. \n     * \n     * See `body.parts` for details and requirements on how parts are used.\n     * \n     * See Bodies.fromVertices for a related utility.\n     * \n     * This function updates `body` mass, inertia and centroid based on the parts geometry.  \n     * Sets each `part.parent` to be this `body`.  \n     * \n     * The convex hull is computed and set on this `body` (unless `autoHull` is `false`).  \n     * Automatically ensures that the first part in `body.parts` is the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param {body[]} parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.setPosition = function(body, position, updateVelocity) {\n        var delta = Vector.sub(position, body.position);\n\n        if (updateVelocity) {\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.velocity.x = delta.x;\n            body.velocity.y = delta.y;\n            body.speed = Vector.magnitude(delta);\n        } else {\n            body.positionPrev.x += delta.x;\n            body.positionPrev.y += delta.y;\n        }\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.setAngle = function(body, angle, updateVelocity) {\n        var delta = angle - body.angle;\n        \n        if (updateVelocity) {\n            body.anglePrev = body.angle;\n            body.angularVelocity = delta;\n            body.angularSpeed = Math.abs(delta);\n        } else {\n            body.anglePrev += delta;\n        }\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the current linear velocity of the body.  \n     * Affects body speed.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.positionPrev.x = body.position.x - velocity.x * timeScale;\n        body.positionPrev.y = body.position.y - velocity.y * timeScale;\n        body.velocity.x = (body.position.x - body.positionPrev.x) / timeScale;\n        body.velocity.y = (body.position.y - body.positionPrev.y) / timeScale;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Gets the current linear velocity of the body.\n     * @method getVelocity\n     * @param {body} body\n     * @return {vector} velocity\n     */\n    Body.getVelocity = function(body) {\n        var timeScale = Body._baseDelta / body.deltaTime;\n\n        return {\n            x: (body.position.x - body.positionPrev.x) * timeScale,\n            y: (body.position.y - body.positionPrev.y) * timeScale\n        };\n    };\n\n    /**\n     * Gets the current linear speed of the body.  \n     * Equivalent to the magnitude of its velocity.\n     * @method getSpeed\n     * @param {body} body\n     * @return {number} speed\n     */\n    Body.getSpeed = function(body) {\n        return Vector.magnitude(Body.getVelocity(body));\n    };\n\n    /**\n     * Sets the current linear speed of the body.  \n     * Direction is maintained. Affects body velocity.\n     * @method setSpeed\n     * @param {body} body\n     * @param {number} speed\n     */\n    Body.setSpeed = function(body, speed) {\n        Body.setVelocity(body, Vector.mult(Vector.normalise(Body.getVelocity(body)), speed));\n    };\n\n    /**\n     * Sets the current rotational velocity of the body.  \n     * Affects body angular speed.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.anglePrev = body.angle - velocity * timeScale;\n        body.angularVelocity = (body.angle - body.anglePrev) / timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Gets the current rotational velocity of the body.\n     * @method getAngularVelocity\n     * @param {body} body\n     * @return {number} angular velocity\n     */\n    Body.getAngularVelocity = function(body) {\n        return (body.angle - body.anglePrev) * Body._baseDelta / body.deltaTime;\n    };\n\n    /**\n     * Gets the current rotational speed of the body.  \n     * Equivalent to the magnitude of its angular velocity.\n     * @method getAngularSpeed\n     * @param {body} body\n     * @return {number} angular speed\n     */\n    Body.getAngularSpeed = function(body) {\n        return Math.abs(Body.getAngularVelocity(body));\n    };\n\n    /**\n     * Sets the current rotational speed of the body.  \n     * Direction is maintained. Affects body angular velocity.\n     * @method setAngularSpeed\n     * @param {body} body\n     * @param {number} speed\n     */\n    Body.setAngularSpeed = function(body, speed) {\n        Body.setAngularVelocity(body, Common.sign(Body.getAngularVelocity(body)) * speed);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.translate = function(body, translation, updateVelocity) {\n        Body.setPosition(body, Vector.add(body.position, translation), updateVelocity);\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.rotate = function(body, rotation, point, updateVelocity) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            }, updateVelocity);\n\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs an update by integrating the equations of motion on the `body`.\n     * This is applied every update by `Matter.Engine` automatically.\n     * @method update\n     * @param {body} body\n     * @param {number} [deltaTime=16.666]\n     */\n    Body.update = function(body, deltaTime) {\n        deltaTime = (typeof deltaTime !== 'undefined' ? deltaTime : (1000 / 60)) * body.timeScale;\n\n        var deltaTimeSquared = deltaTime * deltaTime,\n            correction = Body._timeCorrection ? deltaTime / (body.deltaTime || deltaTime) : 1;\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * (deltaTime / Common._baseDelta),\n            velocityPrevX = (body.position.x - body.positionPrev.x) * correction,\n            velocityPrevY = (body.position.y - body.positionPrev.y) * correction;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n        body.deltaTime = deltaTime;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Updates properties `body.velocity`, `body.speed`, `body.angularVelocity` and `body.angularSpeed` which are normalised in relation to `Body._baseDelta`.\n     * @method updateVelocities\n     * @param {body} body\n     */\n    Body.updateVelocities = function(body) {\n        var timeScale = Body._baseDelta / body.deltaTime,\n            bodyVelocity = body.velocity;\n\n        bodyVelocity.x = (body.position.x - body.positionPrev.x) * timeScale;\n        bodyVelocity.y = (body.position.y - body.positionPrev.y) * timeScale;\n        body.speed = Math.sqrt((bodyVelocity.x * bodyVelocity.x) + (bodyVelocity.y * bodyVelocity.y));\n\n        body.angularVelocity = (body.angle - body.anglePrev) * timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Applies the `force` to the `body` from the force origin `position` in world-space, over a single timestep, including applying any resulting angular torque.\n     * \n     * Forces are useful for effects like gravity, wind or rocket thrust, but can be difficult in practice when precise control is needed. In these cases see `Body.setVelocity` and `Body.setPosition` as an alternative.\n     * \n     * The force from this function is only applied once for the duration of a single timestep, in other words the duration depends directly on the current engine update `delta` and the rate of calls to this function.\n     * \n     * Therefore to account for time, you should apply the force constantly over as many engine updates as equivalent to the intended duration.\n     * \n     * If all or part of the force duration is some fraction of a timestep, first multiply the force by `duration / timestep`.\n     * \n     * The force origin `position` in world-space must also be specified. Passing `body.position` will result in zero angular effect as the force origin would be at the centre of mass.\n     * \n     * The `body` will take time to accelerate under a force, the resulting effect depends on duration of the force, the body mass and other forces on the body including friction combined.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position The force origin in world-space. Pass `body.position` to avoid angular torque.\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.force.x += force.x;\n        body.force.y += force.y;\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * _Read only_. Set by `Body.create`.\n     * \n     * A `String` denoting the type of object.\n     *\n     * @readOnly\n     * @property type\n     * @type string\n     * @default \"body\"\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * _Read only_. Use `Body.setParts` to set. \n     * \n     * See `Bodies.fromVertices` for a related utility.\n     * \n     * An array of bodies (the 'parts') that make up this body (the 'parent'). The first body in this array must always be a self-reference to this `body`.  \n     * \n     * The parts are fixed together and therefore perform as a single unified rigid body.\n     * \n     * Parts in relation to each other are allowed to overlap, as well as form gaps or holes, so can be used to create complex concave bodies unlike when using a single part. \n     * \n     * Use properties and functions on the parent `body` rather than on parts.\n     *   \n     * Outside of their geometry, most properties on parts are not considered or updated.  \n     * As such 'per-part' material properties among others are not currently considered.\n     * \n     * Parts should be created specifically for their parent body.  \n     * Parts should not be shared or reused between bodies, only one parent is supported.  \n     * Parts should not have their own parts, they are not handled recursively.  \n     * Parts should not be added to the world directly or any other composite.  \n     * Parts own vertices must be convex and in clockwise order.   \n     * \n     * A body with more than one part is sometimes referred to as a 'compound' body. \n     * \n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.  \n     *\n     * @readOnly\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * _Read only_. Updated by `Body.setParts`.\n     * \n     * A reference to the body that this is a part of. See `body.parts`.\n     * This is a self reference if the body is not a part of another body.\n     *\n     * @readOnly\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setVertices` or `Body.setParts` to set. See also `Bodies.fromVertices`.\n     * \n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     * `[{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]`\n     * \n     * Vertices must always be convex, in clockwise order and must not contain any duplicate points.\n     * \n     * Concave vertices should be decomposed into convex `parts`, see `Bodies.fromVertices` and `Body.setParts`.\n     *\n     * When set the vertices are translated such that `body.position` is at the centre of mass.\n     * Many other body properties are automatically calculated from these vertices when set including `density`, `area` and `inertia`.\n     * \n     * The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @readOnly\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * _Read only_. Use `Body.setPosition` to set. \n     * \n     * A `Vector` that specifies the current world-space position of the body.\n     * \n     * @readOnly\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that accumulates the total force applied to the body for a single update.\n     * Force is zeroed after every `Engine.update`, so constant forces should be applied for every update they are needed. See also `Body.applyForce`.\n     * \n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that accumulates the total torque (turning force) applied to the body for a single update. See also `Body.applyForce`.\n     * Torque is zeroed after every `Engine.update`, so constant torques should be applied for every update they are needed.\n     *\n     * Torques result in angular acceleration on every update, which depends on body inertia and the engine update delta.\n     * \n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setSpeed` to set. \n     * \n     * See `Body.getSpeed` for details.\n     * \n     * Equivalent to the magnitude of `body.velocity` (always positive).\n     * \n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setVelocity` to set. \n     * \n     * See `Body.getVelocity` for details.\n     * \n     * Equivalent to the magnitude of `body.angularVelocity` (always positive).\n     * \n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * _Read only_. Use `Body.setAngularSpeed` to set. \n     * \n     * See `Body.getAngularSpeed` for details.\n     * \n     * \n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setAngularVelocity` to set. \n     * \n     * See `Body.getAngularVelocity` for details.\n     * \n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setStatic` to set. \n     * \n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     *\n     * @readOnly\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * _Read only_. Use `Sleeping.set` to set. \n     * \n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     *\n     * @readOnly\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * _Read only_. Calculated during engine update only when sleeping is enabled.\n     * \n     * A `Number` that loosely measures the amount of movement a body currently has.\n     *\n     * Derived from `body.speed^2 + body.angularSpeed^2`. See `Sleeping.update`.\n     * \n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the length of time during which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     * \n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * _Read only_. Use `Body.setDensity` to set. \n     * \n     * A `Number` that defines the density of the body (mass per unit area).\n     * \n     * Mass will also be updated when set.\n     *\n     * @readOnly\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the mass of the body.\n     * \n     * Density will also be updated when set.\n     * \n     * @readOnly\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     *\n     * @readOnly\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or set through `Body.setInertia`.\n     * \n     * A `Number` that defines the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * \n     * Can be manually set to `Infinity` to prevent rotation of the body. See `Body.setInertia`.\n     * \n     * @readOnly\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or calculated by `Body.setInertia`.\n     * \n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * \n     * @readOnly\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     * `Math.max(bodyA.restitution, bodyB.restitution)`\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     * `Math.min(bodyA.friction, bodyB.friction)`\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a thin boundary around the body where it is allowed to slightly sink into other bodies.\n     * \n     * This is required for proper collision response, including friction and restitution effects.\n     * \n     * The default should generally suffice in most cases. You may need to decrease this value for very small bodies that are nearing the default value in scale.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that specifies per-body time scaling.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * _Read only_. Updated during engine update.\n     * \n     * A `Number` that records the last delta time value used to update this body.\n     * Used to calculate speed and velocity.\n     *\n     * @readOnly\n     * @property deltaTime\n     * @type number\n     * @default 1000 / 60\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated when vertices are set.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @readOnly\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * A `Number` that measures the area of the body's convex hull.\n     * \n     * @readOnly\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated when vertices are set and constantly updated by `Body.update` during simulation.\n     * \n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * Temporarily may hold parameters to be passed to `Vertices.chamfer` where supported by external functions.\n     * \n     * See `Vertices.chamfer` for possible parameters this object may hold.\n     * \n     * Currently only functions inside `Matter.Bodies` provide a utility using this property as a vertices pre-processing option.\n     * \n     * Alternatively consider using `Vertices.chamfer` directly on vertices before passing them to a body creation function.\n     * \n     * @property chamfer\n     * @type object|null|undefined\n     */\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(4);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n\n        if (position !== -1) {\n            var bodies = Composite.allBodies(compositeB);\n\n            Composite.removeCompositeAt(compositeA, position);\n\n            for (var i = 0; i < bodies.length; i++) {\n                bodies[i].sleepCounter = 0;\n            }\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            body.sleepCounter = 0;\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        \n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Body = __webpack_require__(4);\nvar Events = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} delta\n     */\n    Sleeping.update = function(bodies, delta) {\n        var timeScale = delta / Common._baseDelta,\n            motionSleepThreshold = Sleeping._motionSleepThreshold;\n        \n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                speed = Body.getSpeed(body),\n                angularSpeed = Body.getAngularSpeed(body),\n                motion = speed * speed + angularSpeed * angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < motionSleepThreshold) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold / timeScale) {\n                    Sleeping.set(body, true);\n                }\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     */\n    Sleeping.afterCollisions = function(pairs) {\n        var motionSleepThreshold = Sleeping._motionSleepThreshold;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > motionSleepThreshold) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __webpack_require__(3);\nvar Pair = __webpack_require__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: [null, null],\n            supportCount: 0\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            tangent = collision.tangent,\n            penetration = collision.penetration,\n            supports = collision.supports,\n            depth = minOverlap.overlap,\n            minAxis = minOverlap.axis,\n            normalX = minAxis.x,\n            normalY = minAxis.y,\n            deltaX = bodyB.position.x - bodyA.position.x,\n            deltaY = bodyB.position.y - bodyA.position.y;\n\n        // ensure normal is facing away from bodyA\n        if (normalX * deltaX + normalY * deltaY >= 0) {\n            normalX = -normalX;\n            normalY = -normalY;\n        }\n\n        normal.x = normalX;\n        normal.y = normalY;\n        \n        tangent.x = -normalY;\n        tangent.y = normalX;\n\n        penetration.x = normalX * depth;\n        penetration.y = normalY * depth;\n\n        collision.depth = depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update support count\n        collision.supportCount = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            vertexA = vertices[0],\n            vertexB = vertexA,\n            nearestDistance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y),\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 1; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * \n     * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n     * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n     * \n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n    /**\n     * The number of active supports for this collision found in `collision.supports`.\n     * \n     * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n     * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n     *\n     * @property supportCount\n     * @type number\n     * @default 0\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(16);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [Contact.create(), Contact.create()],\n            contactCount: 0,\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var supports = collision.supports,\n            supportCount = collision.supportCount,\n            contacts = pair.contacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        pair.contactCount = supportCount;\n        collision.pair = pair;\n\n        var supportA = supports[0],\n            contactA = contacts[0],\n            supportB = supports[1],\n            contactB = contacts[1];\n\n        // match contacts to supports\n        if (contactB.vertex === supportA || contactA.vertex === supportB) {\n            contacts[1] = contactA;\n            contacts[0] = contactA = contactB;\n            contactB = contacts[1];\n        }\n\n        // update contacts\n        contactA.vertex = supportA;\n        contactB.vertex = supportB;\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.contactCount = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        return bodyA.id < bodyB.id ? bodyA.id.toString(36) + ':' + bodyB.id.toString(36) \n            : bodyB.id.toString(36) + ':' + bodyA.id.toString(36);\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} delta\n     */\n    Constraint.solveAll = function(constraints, delta) {\n        var timeScale = Common.clamp(delta / Common._baseDelta, 0, 1);\n\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            isRigid = constraint.stiffness >= 1 || constraint.length === 0,\n            stiffness = isRigid ? constraint.stiffness * timeScale \n                : constraint.stiffness * timeScale * timeScale,\n            damping = constraint.damping * timeScale,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n    \n        if (damping > 0) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (damping > 0) {\n                bodyA.positionPrev.x -= damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (damping > 0) {\n                bodyB.positionPrev.x += damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) \n                + (constraint.pointA ? constraint.pointA.x : 0),\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) \n                + (constraint.pointA ? constraint.pointA.y : 0)\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) \n                + (constraint.pointB ? constraint.pointB.x : 0),\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) \n                + (constraint.pointB ? constraint.pointB.y : 0)\n        };\n    };\n\n    /**\n     * Returns the current length of the constraint. \n     * This is the distance between both of the constraint's end points.\n     * See `constraint.length` for the target rest length.\n     * @method currentLength\n     * @param {constraint} constraint\n     * @returns {number} the current length\n     */\n    Constraint.currentLength = function(constraint) {\n        var pointAX = (constraint.bodyA ? constraint.bodyA.position.x : 0) \n            + (constraint.pointA ? constraint.pointA.x : 0);\n\n        var pointAY = (constraint.bodyA ? constraint.bodyA.position.y : 0) \n            + (constraint.pointA ? constraint.pointA.y : 0);\n\n        var pointBX = (constraint.bodyB ? constraint.bodyB.position.x : 0) \n            + (constraint.pointB ? constraint.pointB.x : 0);\n            \n        var pointBY = (constraint.bodyB ? constraint.bodyB.position.y : 0) \n            + (constraint.pointB ? constraint.pointB.y : 0);\n\n        var deltaX = pointAX - pointBX;\n        var deltaY = pointAY - pointBY;\n\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The `slope` is parameterised as a fraction of `width` and must be < 1 to form a valid trapezoid. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope Must be a number < 1.\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        if (slope >= 1) {\n            Common.warn('Bodies.trapezoid: slope parameter must be < 1.');\n        }\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __webpack_require__(0);\nvar Collision = __webpack_require__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            collisions: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n        detector.collisions = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            collisions = detector.collisions,\n            collisionIndex = 0,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions[collisionIndex++] = collision;\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions[collisionIndex++] = collision;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (collisions.length !== collisionIndex) {\n            collisions.length = collisionIndex;\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * The array of `Matter.Collision` found in the last call to `Detector.collisions` on this detector.\n     * @property collisions\n     * @type collision[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n            mouse.sourceEvents.mousewheel = event;\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove, { passive: true });\n        element.addEventListener('mousedown', mouse.mousedown, { passive: true });\n        element.addEventListener('mouseup', mouse.mouseup, { passive: true });\n        \n        element.addEventListener('wheel', mouse.mousewheel, { passive: false });\n        \n        element.addEventListener('touchmove', mouse.mousemove, { passive: false });\n        element.addEventListener('touchstart', mouse.mousedown, { passive: false });\n        element.addEventListener('touchend', mouse.mouseup, { passive: false });\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} [vertex]\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(18);\nvar Detector = __webpack_require__(13);\nvar Pairs = __webpack_require__(19);\nvar Events = __webpack_require__(5);\nvar Composite = __webpack_require__(6);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\n\n(function() {\n\n    Engine._deltaMax = 1000 / 60;\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0,\n                lastUpdatesPerFrame: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n        engine.detector.pairs = engine.pairs;\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` milliseconds.\n     * Triggers `beforeUpdate`, `beforeSolve` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     */\n    Engine.update = function(engine, delta) {\n        var startTime = Common.now();\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        // warn if high delta\n        if (delta > Engine._deltaMax) {\n            Common.warnOnce(\n                'Matter.Engine.update: delta argument is recommended to be less than or equal to', Engine._deltaMax.toFixed(3), 'ms.'\n            );\n        }\n\n        delta = typeof delta !== 'undefined' ? delta : Common._baseDelta;\n        delta *= timing.timeScale;\n\n        // increment timestamp\n        timing.timestamp += delta;\n        timing.lastDelta = delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp,\n            delta: delta\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // if the world has changed\n        if (world.isModified) {\n            // update the detector bodies\n            Detector.setBodies(detector, allBodies);\n\n            // reset all composite modified flags\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, delta);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        if (delta > 0) {\n            Engine._bodiesUpdate(allBodies, delta);\n        }\n\n        Events.trigger(engine, 'beforeSolve', event);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0) {\n            Events.trigger(engine, 'collisionStart', { \n                pairs: pairs.collisionStart,\n                timestamp: timing.timestamp,\n                delta: delta\n            });\n        }\n\n        // iteratively resolve position between collisions\n        var positionDamping = Common.clamp(20 / engine.positionIterations, 0, 1);\n        \n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, delta, positionDamping);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, delta);\n        }\n\n        // update body speed and velocity properties\n        Engine._bodiesUpdateVelocities(allBodies);\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0) {\n            Events.trigger(engine, 'collisionActive', { \n                pairs: pairs.collisionActive, \n                timestamp: timing.timestamp,\n                delta: delta\n            });\n        }\n\n        if (pairs.collisionEnd.length > 0) {\n            Events.trigger(engine, 'collisionEnd', {\n                pairs: pairs.collisionEnd,\n                timestamp: timing.timestamp,\n                delta: delta\n            });\n        }\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applies gravitational acceleration to all `bodies`.\n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet.\n     * \n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001,\n            bodiesLength = bodies.length;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // add the resultant force of gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applies `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} delta The amount of time elapsed between updates\n     */\n    Engine._bodiesUpdate = function(bodies, delta) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, delta);\n        }\n    };\n\n    /**\n     * Applies `Body.updateVelocities` to all given `bodies`.\n     * @method _bodiesUpdateVelocities\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesUpdateVelocities = function(bodies) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            Body.updateVelocities(bodies[i]);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after bodies updated based on their velocity and forces, but before any collision detection, constraints and resolving etc.\n    *\n    * @event beforeSolve\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     * \n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     * \n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     * \n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An optional gravitational acceleration applied to all bodies in `engine.world` on every update.\n     * \n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet. For gravity in other contexts, disable this and apply forces as needed.\n     * \n     * To disable set the `scale` component to `0`.\n     * \n     * This is split into three components for ease of use:  \n     * a normalised direction (`x` and `y`) and magnitude (`scale`).\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravitational direction normal `x` component, to be multiplied by `gravity.scale`.\n     * \n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravitational direction normal `y` component, to be multiplied by `gravity.scale`.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The magnitude of the gravitational acceleration.\n     * \n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 2;\n    Resolver._restingThreshTangent = Math.sqrt(6);\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n    Resolver._frictionMaxStatic = Number.MAX_VALUE;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            contactCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            contactCount = pair.contactCount;\n            pair.collision.parentA.totalContacts += contactCount;\n            pair.collision.parentB.totalContacts += contactCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} delta\n     * @param {number} [damping=1]\n     */\n    Resolver.solvePosition = function(pairs, delta, damping) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen * (damping || 1),\n            slopDampen = Common.clamp(delta / Common._baseDelta, 0, 1),\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                collision.depth + normal.x * (bodyB.positionImpulse.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = pair.separation - pair.slop * slopDampen;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.contacts,\n                contactCount = pair.contactCount,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactCount; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} delta\n     */\n    Resolver.solveVelocity = function(pairs, delta) {\n        var timeScale = delta / Common._baseDelta,\n            timeScaleSquared = timeScale * timeScale,\n            timeScaleCubed = timeScaleSquared * timeScale,\n            restingThresh = -Resolver._restingThresh * timeScale,\n            restingThreshTangent = Resolver._restingThreshTangent,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier * timeScale,\n            frictionMaxStatic = Resolver._frictionMaxStatic,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                inverseMassTotal = pair.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier,\n                contacts = pair.contacts,\n                contactCount = pair.contactCount,\n                contactShare = 1 / contactCount;\n\n            // get body velocities\n            var bodyAVelocityX = bodyA.position.x - bodyA.positionPrev.x,\n                bodyAVelocityY = bodyA.position.y - bodyA.positionPrev.y,\n                bodyAAngularVelocity = bodyA.angle - bodyA.anglePrev,\n                bodyBVelocityX = bodyB.position.x - bodyB.positionPrev.x,\n                bodyBVelocityY = bodyB.position.y - bodyB.positionPrev.y,\n                bodyBAngularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactCount; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocityX - offsetAY * bodyAAngularVelocity,\n                    velocityPointAY = bodyAVelocityY + offsetAX * bodyAAngularVelocity,\n                    velocityPointBX = bodyBVelocityX - offsetBY * bodyBAngularVelocity,\n                    velocityPointBY = bodyBVelocityY + offsetBX * bodyBAngularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n\n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity < -frictionLimit || tangentVelocity > frictionLimit) {\n                    maxFriction = (tangentVelocity > 0 ? tangentVelocity : -tangentVelocity);\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleCubed;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = frictionMaxStatic;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < restingThresh) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    if (contact.normalImpulse > 0) contact.normalImpulse = 0;\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity < -restingThreshTangent || tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairUpdate = Pair.update,\n            pairCreate = Pair.create,\n            pairSetActive = Pair.setActive,\n            pairsTable = pairs.table,\n            pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsListIndex = pairsListLength,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collisionsLength = collisions.length,\n            collisionStartIndex = 0,\n            collisionEndIndex = 0,\n            collisionActiveIndex = 0,\n            collision,\n            pair,\n            i;\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive[collisionActiveIndex++] = pair;\n                }\n\n                // update the pair\n                pairUpdate(pair, collision, timestamp);\n            } else {\n                // pair did not exist, create a new pair\n                pair = pairCreate(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // add the new pair\n                collisionStart[collisionStartIndex++] = pair;\n                pairsList[pairsListIndex++] = pair;\n            }\n        }\n\n        // find pairs that are no longer active\n        pairsListIndex = 0;\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            // pair is active if updated this timestep\n            if (pair.timeUpdated >= timestamp) {\n                // keep active pairs\n                pairsList[pairsListIndex++] = pair;\n            } else {\n                pairSetActive(pair, false, timestamp);\n\n                // keep inactive pairs if both bodies may be sleeping\n                if (pair.collision.bodyA.sleepCounter > 0 && pair.collision.bodyB.sleepCounter > 0) {\n                    pairsList[pairsListIndex++] = pair;\n                } else {\n                    // remove inactive pairs if either body awake\n                    collisionEnd[collisionEndIndex++] = pair;\n                    delete pairsTable[pair.id];\n                }\n            }\n        }\n\n        // update array lengths if changed\n        if (pairsList.length !== pairsListIndex) {\n            pairsList.length = pairsListIndex;\n        }\n\n        if (collisionStart.length !== collisionStartIndex) {\n            collisionStart.length = collisionStartIndex;\n        }\n\n        if (collisionEnd.length !== collisionEndIndex) {\n            collisionEnd.length = collisionEndIndex;\n        }\n\n        if (collisionActive.length !== collisionActiveIndex) {\n            collisionActive.length = collisionActiveIndex;\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(21);\r\n\r\nMatter.Axes = __webpack_require__(11);\r\nMatter.Bodies = __webpack_require__(12);\r\nMatter.Body = __webpack_require__(4);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Collision = __webpack_require__(8);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(6);\r\nMatter.Composites = __webpack_require__(22);\r\nMatter.Constraint = __webpack_require__(10);\r\nMatter.Contact = __webpack_require__(16);\r\nMatter.Detector = __webpack_require__(13);\r\nMatter.Engine = __webpack_require__(17);\r\nMatter.Events = __webpack_require__(5);\r\nMatter.Grid = __webpack_require__(23);\r\nMatter.Mouse = __webpack_require__(14);\r\nMatter.MouseConstraint = __webpack_require__(24);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(19);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(25);\r\nMatter.Render = __webpack_require__(26);\r\nMatter.Resolver = __webpack_require__(18);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(28);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(29);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.20.0\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(6);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\nvar Bodies = __webpack_require__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(x, y, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            currentX = x,\n            currentY = y,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(currentX, currentY, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    currentX = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    currentX += columnGap;\n                }\n            }\n            \n            currentY += maxHeight + rowGap;\n            currentX = x;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(x, y, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(x, y, columns, rows, columnGap, rowGap, function(stackX, stackY, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(x + xOffset + column * columnGap, stackY, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(x, y, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(x + i * (size * separation), y + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: x + i * (size * separation), y: y }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(x, y, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(x, y, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(x + wheelAOffset, y + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(x + wheelBOffset, y + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(x, y, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(x, y, columns, rows, columnGap, rowGap, function(stackX, stackY) {\n            return Bodies.circle(stackX, stackY, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(14);\nvar Events = __webpack_require__(5);\nvar Detector = __webpack_require__(13);\nvar Constraint = __webpack_require__(10);\nvar Composite = __webpack_require__(6);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar Collision = __webpack_require__(8);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(12);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a lightweight, optional utility which provides a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Body = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(5);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(14);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                engineUpdatesHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                wireframeStrokeStyle: '#bbb',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.controller = Render;\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n\n            render.context.setTransform(1, 0, 0, 1, 0, 0);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Sets the render `width` and `height`.\n     * \n     * Updates the canvas accounting for `render.options.pixelRatio`.  \n     * \n     * Updates the bottom right render bound `render.bounds.max` relative to the provided `width` and `height`.\n     * The top left render bound `render.bounds.min` isn't changed.\n     * \n     * Follow this call with `Render.lookAt` if you need to change the render bounds.\n     * \n     * See also `Render.setPixelRatio`.\n     * @method setSize\n     * @param {render} render\n     * @param {number} width The width (in CSS pixels)\n     * @param {number} height The height (in CSS pixels)\n     */\n    Render.setSize = function(render, width, height) {\n        render.options.width = width;\n        render.options.height = height;\n        render.bounds.max.x = render.bounds.min.x + width;\n        render.bounds.max.y = render.bounds.min.y + height;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        } else {\n            render.canvas.width = width;\n            render.canvas.height = height;\n        }\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineUpdatesHistory = timing.engineUpdatesHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineUpdatesPerFrame = engine.timing.lastUpdatesPerFrame,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineUpdatesMean = _mean(engineUpdatesHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            neededUpdatesPerFrame = Math.round(deltaMean / lastEngineDelta),\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 5 + width * 6 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine updates per frame\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineUpdatesHistory.length,\n            lastEngineUpdatesPerFrame + ' upf', \n            Math.pow(Common.clamp((engineUpdatesMean / neededUpdatesPerFrame) || 1, 0, 1), 4),\n            function(i) { return (engineUpdatesHistory[i] / engineUpdatesMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (lastEngineUpdatesPerFrame * engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 5, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = render.options.wireframeStrokeStyle;\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = render.options.wireframeStrokeStyle;\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            var velocity = Body.getVelocity(body);\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + velocity.x, body.position.y + velocity.y);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.contactCount; j++) {\n                var contact = pair.contacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.contactCount > 0) {\n                var normalPosX = pair.contacts[0].vertex.x,\n                    normalPosY = pair.contacts[0].vertex.y;\n\n                if (pair.contactCount === 2) {\n                    normalPosX = (pair.contacts[0].vertex.x + pair.contacts[1].vertex.x) / 2;\n                    normalPosY = (pair.contacts[0].vertex.y + pair.contacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineUpdatesHistory.unshift(engine.timing.lastUpdatesPerFrame);\n        timing.engineUpdatesHistory.length = Math.min(timing.engineUpdatesHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @deprecated\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS color string to use for background when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS color string to use for stroke when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeStrokeStyle\n     * @type string\n     * @default '#bbb'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average updates per frame (e.g. 1)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility that provides a game loop for running a `Matter.Engine` inside a browser environment.\n* A runner will continuously update a `Matter.Engine` whilst synchronising engine updates with the browser frame rate.\n* This runner favours a smoother user experience over perfect time keeping.\n* This runner is optional and is used for development and debugging but could be useful as a starting point for implementing some games and experiences.\n* Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation as may be needed inside other environments.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(5);\nvar Engine = __webpack_require__(17);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Runner._maxFrameDelta = 1000 / 15;\n    Runner._frameDeltaFallback = 1000 / 60;\n    Runner._timeBufferMargin = 1.5;\n    Runner._elapsedNextEstimate = 1;\n    Runner._smoothingLowerBound = 0.1;\n    Runner._smoothingUpperBound = 0.9;\n\n    /**\n     * Creates a new Runner. \n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            delta: 1000 / 60,\n            frameDelta: null,\n            frameDeltaSmoothing: true,\n            frameDeltaSnapping: true,\n            frameDeltaHistory: [],\n            frameDeltaHistorySize: 100,\n            frameRequestId: null,\n            timeBuffer: 0,\n            timeLastTick: null,\n            maxUpdates: null,\n            maxFrameTime: 1000 / 30,\n            lastUpdatesDeferred: 0,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        // for temporary back compatibility only\n        runner.fps = 0;\n\n        return runner;\n    };\n\n    /**\n     * Runs a `Matter.Engine` whilst synchronising engine updates with the browser frame rate. \n     * See module and properties descriptions for more information on this runner.\n     * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n     * @method run\n     * @param {runner} runner\n     * @param {engine} [engine]\n     * @return {runner} runner\n     */\n    Runner.run = function(runner, engine) {\n        // initial time buffer for the first frame\n        runner.timeBuffer = Runner._frameDeltaFallback;\n\n        (function onFrame(time){\n            runner.frameRequestId = Runner._onNextFrame(runner, onFrame);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * Performs a single runner tick as used inside `Runner.run`.\n     * See module and properties descriptions for more information on this runner.\n     * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var tickStartTime = Common.now(),\n            engineDelta = runner.delta,\n            updateCount = 0;\n\n        // find frame delta time since last call\n        var frameDelta = time - runner.timeLastTick;\n\n        // fallback for unusable frame delta values (e.g. 0, NaN, on first frame or long pauses)\n        if (!frameDelta || !runner.timeLastTick || frameDelta > Math.max(Runner._maxFrameDelta, runner.maxFrameTime)) {\n            // reuse last accepted frame delta else fallback\n            frameDelta = runner.frameDelta || Runner._frameDeltaFallback;\n        }\n\n        if (runner.frameDeltaSmoothing) {\n            // record frame delta over a number of frames\n            runner.frameDeltaHistory.push(frameDelta);\n            runner.frameDeltaHistory = runner.frameDeltaHistory.slice(-runner.frameDeltaHistorySize);\n\n            // sort frame delta history\n            var deltaHistorySorted = runner.frameDeltaHistory.slice(0).sort();\n\n            // sample a central window to limit outliers\n            var deltaHistoryWindow = runner.frameDeltaHistory.slice(\n                deltaHistorySorted.length * Runner._smoothingLowerBound, \n                deltaHistorySorted.length * Runner._smoothingUpperBound\n            );\n\n            // take the mean of the central window\n            var frameDeltaSmoothed = _mean(deltaHistoryWindow);\n            frameDelta = frameDeltaSmoothed || frameDelta;\n        }\n\n        if (runner.frameDeltaSnapping) {\n            // snap frame delta to the nearest 1 Hz\n            frameDelta = 1000 / Math.round(1000 / frameDelta);\n        }\n\n        // update runner values for next call\n        runner.frameDelta = frameDelta;\n        runner.timeLastTick = time;\n\n        // accumulate elapsed time\n        runner.timeBuffer += runner.frameDelta;\n\n        // limit time buffer size to a single frame of updates\n        runner.timeBuffer = Common.clamp(\n            runner.timeBuffer, 0, runner.frameDelta + engineDelta * Runner._timeBufferMargin\n        );\n\n        // reset count of over budget updates\n        runner.lastUpdatesDeferred = 0;\n\n        // get max updates per frame\n        var maxUpdates = runner.maxUpdates || Math.ceil(runner.maxFrameTime / engineDelta);\n\n        // create event object\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        // tick events before update\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(runner, 'tick', event);\n\n        var updateStartTime = Common.now();\n\n        // simulate time elapsed between calls\n        while (engineDelta > 0 && runner.timeBuffer >= engineDelta * Runner._timeBufferMargin) {\n            // update the engine\n            Events.trigger(runner, 'beforeUpdate', event);\n            Engine.update(engine, engineDelta);\n            Events.trigger(runner, 'afterUpdate', event);\n\n            // consume time simulated from buffer\n            runner.timeBuffer -= engineDelta;\n            updateCount += 1;\n\n            // find elapsed time during this tick\n            var elapsedTimeTotal = Common.now() - tickStartTime,\n                elapsedTimeUpdates = Common.now() - updateStartTime,\n                elapsedNextEstimate = elapsedTimeTotal + Runner._elapsedNextEstimate * elapsedTimeUpdates / updateCount;\n\n            // defer updates if over performance budgets for this frame\n            if (updateCount >= maxUpdates || elapsedNextEstimate > runner.maxFrameTime) {\n                runner.lastUpdatesDeferred = Math.round(Math.max(0, (runner.timeBuffer / engineDelta) - Runner._timeBufferMargin));\n                break;\n            }\n        }\n\n        // track timing metrics\n        engine.timing.lastUpdatesPerFrame = updateCount;\n\n        // tick events after update\n        Events.trigger(runner, 'afterTick', event);\n\n        // show useful warnings if needed\n        if (runner.frameDeltaHistory.length >= 100) {\n            if (runner.lastUpdatesDeferred && Math.round(runner.frameDelta / engineDelta) > maxUpdates) {\n                Common.warnOnce('Matter.Runner: runner reached runner.maxUpdates, see docs.');\n            } else if (runner.lastUpdatesDeferred) {\n                Common.warnOnce('Matter.Runner: runner reached runner.maxFrameTime, see docs.');\n            }\n\n            if (typeof runner.isFixed !== 'undefined') {\n                Common.warnOnce('Matter.Runner: runner.isFixed is now redundant, see docs.');\n            }\n\n            if (runner.deltaMin || runner.deltaMax) {\n                Common.warnOnce('Matter.Runner: runner.deltaMin and runner.deltaMax were removed, see docs.');\n            }\n\n            if (runner.fps !== 0) {\n                Common.warnOnce('Matter.Runner: runner.fps was replaced by runner.delta, see docs.');\n            }\n        }\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner` by canceling the frame loop.\n     * Alternatively to temporarily pause the runner, see `runner.enabled`.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        Runner._cancelNextFrame(runner);\n    };\n\n    /**\n     * Schedules the `callback` on this `runner` for the next animation frame.\n     * @private\n     * @method _onNextFrame\n     * @param {runner} runner\n     * @param {function} callback\n     * @return {number} frameRequestId\n     */\n    Runner._onNextFrame = function(runner, callback) {\n        if (typeof window !== 'undefined' && window.requestAnimationFrame) {\n            runner.frameRequestId = window.requestAnimationFrame(callback);\n        } else {\n            throw new Error('Matter.Runner: missing required global window.requestAnimationFrame.');\n        }\n\n        return runner.frameRequestId;\n    };\n\n    /**\n     * Cancels the last callback scheduled by `Runner._onNextFrame` on this `runner`.\n     * @private\n     * @method _cancelNextFrame\n     * @param {runner} runner\n     */\n    Runner._cancelNextFrame = function(runner) {\n        if (typeof window !== 'undefined' && window.cancelAnimationFrame) {\n            window.cancelAnimationFrame(runner.frameRequestId);\n        } else {\n            throw new Error('Matter.Runner: missing required global window.cancelAnimationFrame.');\n        }\n    };\n\n    /**\n     * Returns the mean of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values.\n     */\n    var _mean = function(values) {\n        var result = 0,\n            valuesLength = values.length;\n\n        for (var i = 0; i < valuesLength; i += 1) {\n            result += values[i];\n        }\n\n        return (result / valuesLength) || 0;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired once at the start of the browser frame, before any engine updates.\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired once at the start of the browser frame, after `beforeTick`.\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired once at the end of the browser frame, after `beforeTick`, `tick` and after any engine updates.\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before each and every engine update in this browser frame (if any). \n    * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after each and every engine update in this browser frame (if any). \n    * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The fixed timestep size used for `Engine.update` calls in milliseconds, known as `delta`.\n     * \n     * This value is recommended to be `1000 / 60` ms or smaller (i.e. equivalent to at least 60hz).\n     * \n     * Smaller `delta` values provide higher quality results at the cost of performance.\n     * \n     * You should usually avoid changing `delta` during running, otherwise quality may be affected. \n     * \n     * For smoother frame pacing choose a `delta` that is an even multiple of each display FPS you target, i.e. `1000 / (n * fps)` as this helps distribute an equal number of updates over each display frame.\n     * \n     * For example with a 60 Hz `delta` i.e. `1000 / 60` the runner will on average perform one update per frame on displays running 60 FPS and one update every two frames on displays running 120 FPS, etc.\n     * \n     * Where as e.g. using a 240 Hz `delta` i.e. `1000 / 240` the runner will on average perform four updates per frame on displays running 60 FPS and two updates per frame on displays running 120 FPS, etc.\n     * \n     * Therefore `Runner.run` will call multiple engine updates (or none) as needed to simulate the time elapsed between browser frames. \n     * \n     * In practice the number of updates in any particular frame may be restricted to respect the runner's performance budgets. These are specified by `runner.maxFrameTime` and `runner.maxUpdates`, see those properties for details.\n     * \n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n    /**\n     * A flag that can be toggled to enable or disable tick calls on this runner, therefore pausing engine updates and events while the runner loop remains running.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The accumulated time elapsed that has yet to be simulated in milliseconds.\n     * This value is clamped within certain limits (see `Runner.tick` code).\n     *\n     * @private\n     * @property timeBuffer\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * The measured time elapsed between the last two browser frames measured in milliseconds.\n     * This is useful e.g. to estimate the current browser FPS using `1000 / runner.frameDelta`.\n     *\n     * @readonly\n     * @property frameDelta\n     * @type number\n     */\n\n    /**\n     * Enables averaging to smooth frame rate measurements and therefore stabilise play rate.\n     *\n     * @property frameDeltaSmoothing\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Rounds measured browser frame delta to the nearest 1 Hz.\n     * This option can help smooth frame rate measurements and simplify handling hardware timing differences e.g. 59.94Hz and 60Hz displays.\n     * For best results you should also round your `runner.delta` equivalent to the nearest 1 Hz.\n     *\n     * @property frameDeltaSnapping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A performance budget that limits execution time allowed for this runner per browser frame in milliseconds.\n     * \n     * To calculate the effective browser FPS at which this throttle is applied use `1000 / runner.maxFrameTime`.\n     * \n     * This performance budget is intended to help maintain browser interactivity and help improve framerate recovery during temporary high CPU usage.\n     * \n     * This budget only covers the measured time elapsed executing the functions called in the scope of the runner tick, including `Engine.update` and its related user event callbacks.\n     * \n     * You may also reduce this budget to allow for any significant additional processing you perform on the same thread outside the scope of this runner tick, e.g. rendering time.\n     * \n     * See also `runner.maxUpdates`.\n     *\n     * @property maxFrameTime\n     * @type number\n     * @default 1000 / 30\n     */\n\n    /**\n     * An optional limit for maximum engine update count allowed per frame tick in addition to `runner.maxFrameTime`.\n     * \n     * Unless you set a value it is automatically chosen based on `runner.delta` and `runner.maxFrameTime`.\n     * \n     * See also `runner.maxFrameTime`.\n     * \n     * @property maxUpdates\n     * @type number\n     * @default null\n     */\n\n    /**\n     * The timestamp of the last call to `Runner.tick` used to measure `frameDelta`.\n     *\n     * @private\n     * @property timeLastTick\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * The id of the last call to `Runner._onNextFrame`.\n     *\n     * @private\n     * @property frameRequestId\n     * @type number\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(6);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAC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C9O,IAAI,CAAC8O,UAAU,CAAC,EACjC+H,aAAa,GAAG,MAAM,GAAG/H,UAAU,GAAG,GAAG;QAE7ClmB,MAAM,CAAC6jB,MAAM,CAAC2E,KAAK,CAACtC,UAAU,GAAG+H,aAAa;QAC9CjuB,MAAM,CAAC6jB,MAAM,CAAC2E,KAAK,CAAC0F,cAAc,GAAG,SAAS;QAC9CluB,MAAM,CAACupB,iBAAiB,GAAGrD,UAAU;MACzC,CAAC;;MAED;AACJ;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}