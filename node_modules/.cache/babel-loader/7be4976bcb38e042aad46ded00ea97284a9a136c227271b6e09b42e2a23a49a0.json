{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { global } from \"@/stores/global\";\nimport Resettip from \"@/components/game/resettip.vue\";\nimport Readytips from \"@/components/game/readytips.vue\";\nimport Summary from \"@/components/game/summary.vue\";\nimport Databox from \"@/components/game/databox.vue\";\nimport { onMounted, ref } from \"vue\";\nimport gsap from \"gsap\";\nimport forge from \"node-forge\";\nexport default {\n  __name: 'stage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = global();\n    const player = store.player;\n    const audio_controller = store.audio_controller;\n    // 组件\n    const readytips = ref(null);\n    const summary = ref(null);\n    const resettip = ref(null);\n    //游戏舞台SVG\n    let stage;\n    let scale_stander; //缩放标准系数：用于让舞台在不同尺寸的屏幕上保持一致的大小\n    function resize() {\n      // 缩放系数以最短边来计算\n      scale_stander = innerWidth <= innerHeight ? innerWidth / 1000 : innerHeight / 1000;\n      stage.setAttribute(\"viewBox\", `0 0 ${innerWidth} ${innerHeight}`);\n      snakeball.resize();\n    }\n    // 闪烁：目标元素改变颜色，短时间后回复\n    function flicker(ball, color) {\n      gsap.timeline().set(ball, {\n        fill: color\n      }).set(ball, {\n        fill: \"\"\n      }, \"<0.5\");\n    }\n    // snakeball控制对象\n    const snakeball = {\n      balls: [],\n      //所有的头部/身体svg元素\n      // 头部的参考半径/实际半径：用参考半径是为了让snakeball适应不同的屏幕尺寸\n      head_radius: {\n        ref: 12,\n        act: 0\n      },\n      // 身体部分的参考半径/实际半径\n      body_radius: {\n        ref: 6,\n        act: 0\n      },\n      // 起始xy位置:设置为屏幕左上方外部\n      start_x: -20,\n      start_y: -20,\n      // 水平方向移动距离：用于控制snakeball在水平方向的身体朝向\n      distance_x: 0,\n      // 移动时间\n      duration: {\n        smooth: [0, 0.3],\n        //顺滑的移动值区间\n        unsmooth: [0.7, 1],\n        //不顺滑的移动值区间\n        default: 0.1,\n        //默认值\n        act: 0 //实际值\n      },\n      // 身体的延迟移动间隔时间\n      delay: {\n        smooth: [0.05, 0.25],\n        // delay的不顺滑值有两段，过快或者过慢都会影响玩家的操纵\n        unsmooth: [[0, 0.01], [0.3, 0.5]],\n        default: 0.05,\n        act: 0\n      },\n      // 每一次reset能够顺滑操控snakeball的概率值：获得顺滑duration和delay的概率\n      smooth_prob: 0.85,\n      // 重置器\n      reseter: {\n        timer: null,\n        //定时器\n        max: 7000,\n        //最长重置间隔时间\n        min: 3000,\n        //最短重置间隔时间\n        // 启动重置器\n        run() {\n          this.stop();\n          // 设置随机时间触发reset\n          this.timer = setTimeout(snakeball.reset.bind(snakeball), Math.random() * (this.max - this.min) + this.min);\n        },\n        // 停止重置器\n        stop() {\n          clearTimeout(this.timer);\n        }\n      },\n      resize() {\n        // 重新计算头部和身体的实际半径\n        this.head_radius.act = this.head_radius.ref * scale_stander;\n        this.body_radius.act = this.body_radius.ref * scale_stander;\n        // 如果snakeball已经创建，则更改全部半径\n        if (!this.balls.length) return;\n        this.balls.forEach((ball, index) => {\n          if (index === 0) ball.setAttribute(\"r\", this.head_radius.act);else ball.setAttribute(\"r\", this.body_radius.act);\n        });\n      },\n      // 创建snakeball\n      create(lives) {\n        this.balls = []; //清空所有ball\n        // 根据当前生命值创建snakeball\n        for (let i = 0; i < lives + 1; i++) {\n          this.create_ball(i === 0 ? \"head\" : \"body\");\n        }\n        // 设置默认duration和delay\n        this.duration.act = this.duration.default;\n        this.delay.act = this.delay.default;\n        this.bind_events(); // 绑定事件\n        // 将snakeball移动到屏幕中间，即使玩家未移动鼠标\n        this.move(innerWidth / 2, innerHeight / 2);\n      },\n      // 绑定事件:鼠标/手指移动、可以操控snakeball移动\n      bind_events() {\n        stage.onmousemove = e => {\n          this.move(e.x, e.y);\n        };\n        stage.ontouchmove = e => {\n          this.move(e.touches[0].clientX, e.touches[0].clientY);\n        };\n      },\n      // 创建小球元素：snakeball的头/身体部分\n      create_ball(type) {\n        let ball = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n        // 计算xy坐标：用pos_x，pos_y储存位置信息，方便后续不使用DOM方式查找\n        ball.pos_x = this.start_x + this.balls.length * this.body_radius.act;\n        ball.pos_y = this.start_y;\n        // 设置对应DOM属性\n        ball.setAttribute(\"fill\", \"var(--color_front)\");\n        ball.setAttribute(\"cx\", ball.pos_x);\n        ball.setAttribute(\"cy\", ball.pos_y);\n        ball.setAttribute(\"r\", type === \"head\" ? this.head_radius.act : this.body_radius.act);\n        // 将ball添加到stage和balls数组\n        stage.appendChild(ball);\n        this.balls.push(ball);\n        return ball;\n      },\n      // 移动snakeball\n      move(x, y) {\n        let direction_x = x - this.start_x - this.distance_x; //snakeball的水平x轴移动方向\n        this.distance_x = x - this.start_x; //更新distance_x\n        this.balls.forEach((ball, index) => {\n          //计算snakeball的x方向移动距离\n          x = this.start_x + index * this.body_radius.act + this.distance_x;\n          // 根据移动方向调整身体位置：无论蛇头朝向哪个水平方向，身体总是在蛇头的后面\n          if (direction_x > 0 && index !== 0) x -= 2 * index * this.body_radius.act;\n          // 移动\n          this.set_location(ball, x, y, index);\n        });\n      },\n      // 设置ball的xy坐标位置\n      set_location(ball, x, y, index) {\n        gsap.to(ball, {\n          pos_x: x,\n          pos_y: y,\n          cx: x,\n          cy: y,\n          duration: this.duration.act,\n          ease: \"linear\",\n          delay: index * this.delay.act\n        });\n      },\n      // 重置snakeball的移动速度、身体延迟移动间隔、以及重置周期\n      reset() {\n        //播放reset动画和声音\n        resettip.value.reset();\n        audio_controller.reset.play();\n        // 重置duration\n        let if_duration_smooth = Math.random() < this.smooth_prob ? \"smooth\" : \"unsmooth\";\n        this.duration.act = Math.random() * (this.duration[if_duration_smooth][1] - this.duration[if_duration_smooth][0]) + this.duration[if_duration_smooth][0];\n        // 重置delay\n        if (Math.random() < this.smooth_prob) {\n          // 设置delay为顺滑\n          this.delay.act = Math.random() * (this.delay.smooth[1] - this.delay.smooth[0]) + this.delay.smooth[0];\n        } else {\n          // 设置delay为不顺滑\n          let index = Math.random() >= 0.5 ? 0 : 1; //随机取过快或过慢区间\n          this.delay.act = Math.random() * (this.delay.unsmooth[index][1] - this.delay.unsmooth[index][0]) + this.delay.unsmooth[index][0];\n        }\n        // 重置reseter\n        this.reseter.run();\n      },\n      // 获得生命值\n      get_lives() {\n        flicker(this.balls, \"#0ee515\"); // 闪烁颜色\n        this.create_ball(\"body\"); // 添加新的身体元素\n        player.lives++; //生命值增加\n      },\n      // 失去生命值\n      lost_lives() {\n        flicker(this.balls, \"#e3d80f\"); // 闪烁颜色\n        // 移除stage以及数组中的ball元素\n        stage.removeChild(this.balls[this.balls.length - 1]);\n        this.balls.pop();\n        player.lives--; //生命值减少\n        // 如果生命值小于等于0，则触发游戏失败事件\n        if (player.lives <= 0) game_controler.over(false);\n      },\n      // 摧毁，清除snakeball\n      remove() {\n        // 移除鼠标事件\n        stage.onmousemove = stage.ontouchmove = null;\n        // 播放snakeball爆炸动画：这里不清除是因为再开始游戏的时候、会直接清空stage\n        gsap.to(this.balls, {\n          fill: \"#e3d80f\",\n          stroke: \"#dc1130\",\n          strokeWidth: this.body_radius.act / 5,\n          //这里用半径计算线条宽度、是为了不让其受屏幕尺寸影响\n          r: 2 * this.body_radius.act,\n          opacity: 0,\n          duration: 0.6,\n          ease: \"power3.out\",\n          stagger: 0.01\n        });\n      },\n      // 改变snakeball的颜色，恢复颜色后、执行后续功能\n      change_color(color, duration, next) {\n        gsap.timeline().set(this.balls, {\n          fill: color\n        }).set(this.balls, {\n          fill: \"\",\n          onComplete: () => {\n            if (next) next(); //存在后续功能，则执行\n          }\n        }, `<${duration}` //duration时间后、恢复颜色\n        );\n      }\n    };\n    // 子弹球\n    class bulletball {\n      constructor(r, pos_x, pos_y, speed_x, speed_y, type, color) {\n        this.r = r; //子弹球半径\n        this.pos_x = pos_x; // x位置\n        this.pos_y = pos_y; // y位置\n        this.speed_x = speed_x; //x方向移动速度\n        this.speed_y = speed_y; //y方向移动速度\n        this.type = type; //子弹球类型\n        this.color = color; //子弹球颜色\n        this.move_timer = null; //移动定时器\n        this.ball = null; ///DOM元素、SVG\n        this.if_removed = false; //是否被移除：用于防止子弹球被多次移除导致BUG\n      }\n      // 创建子弹球\n      create() {\n        this.ball = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n        // 设置对应DOM属性\n        this.ball.setAttribute(\"cx\", this.pos_x);\n        this.ball.setAttribute(\"cy\", this.pos_y);\n        this.ball.setAttribute(\"r\", this.r);\n        this.ball.setAttribute(\"fill\", this.color);\n        // 添加到stage\n        stage.appendChild(this.ball);\n        // 启动移动定时器：移动子弹球\n        this.move_timer = setInterval(this.move.bind(this), 30);\n      }\n      // 移动子弹球\n      move() {\n        // 更新xy位置\n        this.pos_x += this.speed_x;\n        this.pos_y += this.speed_y;\n        // 移动子弹球\n        gsap.set(this.ball, {\n          cx: this.pos_x,\n          cy: this.pos_y\n        });\n        // 每次移动后，检测是否发生撞击\n        this.check_crash();\n      }\n      // 检测是否与snakeball发生了撞击\n      check_crash() {\n        for (let i = 0; i < snakeball.balls.length; i++) {\n          // 计算到snakeball的头/身体的xy距离\n          let distance_x = this.pos_x - snakeball.balls[i].pos_x;\n          let distance_y = this.pos_y - snakeball.balls[i].pos_y;\n          // 如果撞到了头部:\n          if (i === 0 && Math.abs(distance_x) <= snakeball.head_radius.act + this.r && Math.abs(distance_y) <= snakeball.head_radius.act + this.r)\n            // 触发撞击头的事件函数\n            return this.crash_head(this);\n            // 如果撞到了身体部分:\n          else if (i !== 0 && Math.abs(distance_x) <= snakeball.body_radius.act + this.r && Math.abs(distance_y) <= snakeball.body_radius.act + this.r)\n            // 触发撞击身体部分的事件函数;\n            return this.crash_body(this);\n        }\n        // 如果子弹球移出界面范围，则直接被移除\n        if (this.pos_x > innerWidth + this.r || this.pos_x < -this.r || this.pos_y > innerHeight + this.r || this.pos_y < -this.r) return this.remove();\n      }\n      // 碰撞到snakeball头部\n      crash_head(ball) {\n        player.score += launcher.types[this.type].score; //获得对应的分数\n        this.remove(); // 子弹球直接被移除\n        let trigger_head = launcher.types[this.type].trigger_head.bind(this); //触发撞击头部的事件函数\n        return trigger_head();\n      }\n      // 碰撞到snakeball身体部分\n      crash_body(ball) {\n        player.score += launcher.types[this.type].score; //获得对应的分数\n        this.destroy(); // 子弹球爆炸摧毁并被移除\n        let trigger_body = launcher.types[this.type].trigger_body.bind(this); //触发撞击身体的事件功能\n        return trigger_body();\n      }\n      // 摧毁子弹球\n      destroy() {\n        this.if_removed = true; //标记被移除\n        clearInterval(this.move_timer); //清除移动定时器\n        // 随机播放爆炸音效\n        audio_controller.blasts[parseInt(Math.random() * audio_controller.blasts.length)].play();\n        // 播放爆炸动画\n        gsap.to(this.ball, {\n          fill: \"#e3d80f\",\n          stroke: \"#dc1130\",\n          strokeWidth: this.r / 5,\n          r: 2 * this.r,\n          opacity: 1,\n          //恢复透明度：小球爆炸时可能在隐身状态，但是需要其爆炸可以被看到\n          duration: 0.3,\n          ease: \"power3.out\",\n          onComplete: () => {\n            this.remove(); // 动画完成之后,再移除子弹球\n          }\n        });\n      }\n      // 移除子弹球\n      remove() {\n        this.if_removed = true; //标记被移除\n        clearInterval(this.move_timer); //清除移动定时器\n        // 从stage和launcher中移除子弹球\n        stage.removeChild(this.ball);\n        delete launcher.balls[this.index];\n      }\n    }\n    // 炮台：子弹球发射器\n    const launcher = {\n      // 所有种类的子弹球\n      types: {\n        // 火球：碰撞到头部失去一条生命值\n        fireball: {\n          type: \"fireball\",\n          r: 6,\n          //参考半径\n          color: \" #dc1130\",\n          //颜色\n          score: 1,\n          //碰撞所获得的得分\n          prob: 0,\n          //发射该子弹球的概率\n          // 碰到头部触发的事件\n          trigger_head() {\n            audio_controller.warn.play(); //播放警示音效\n            snakeball.lost_lives(); //snakeball失去一条生命\n          },\n          // 碰到身体部分触发的事件\n          trigger_body() {}\n        },\n        // 医药球：碰撞到头部增加一条生命值\n        medicineball: {\n          type: \"medicineball\",\n          r: 12,\n          color: \" #0ee515\",\n          score: 3,\n          prob: 0.85,\n          trigger_head() {\n            audio_controller.buff.play(); //播放增益效果音效\n            snakeball.get_lives(); //snakeball获得一条生命\n          },\n          trigger_body() {}\n        },\n        // 冷冻球\n        frozenball: {\n          type: \"frozenball\",\n          r: 10,\n          color: \" #16b7df\",\n          score: 5,\n          prob: 0.95,\n          // 短时间内，减速屏幕内所有子弹球\n          trigger_head() {\n            audio_controller.buff.play(); //播放增益效果音效\n            Object.values(launcher.balls).forEach(ball => {\n              flicker(ball.ball, \"#16b7df\"); // 闪烁子弹球颜色\n              // 减慢子弹球速度\n              ball.speed_x /= 20;\n              ball.speed_y /= 20;\n              // 一段时间后减速失效\n              setTimeout(() => {\n                ball.speed_x *= 20;\n                ball.speed_y *= 20;\n              }, 1000);\n            });\n          },\n          // 冰冻减速snakeball\n          trigger_body() {\n            // 判断是否在冰冻生效时间中：临时储存snakeball的duration和delay\n            if (!launcher.types[\"frozenball\"].if_effected) {\n              launcher.types[\"frozenball\"].if_effected = true;\n              launcher.types[\"frozenball\"].tem_duration = snakeball.duration.act;\n              launcher.types[\"frozenball\"].tem_delay = snakeball.delay.act;\n            } else {\n              // 储存并清除定时器：防止多次触发、定时器堆叠导致效果时长不够\n              if (launcher.types[\"frozenball\"].timer) clearTimeout(launcher.types[\"frozenball\"].timer);\n            }\n            // 设置最大延迟的duration和delay: 使snakeball移动变慢;\n            snakeball.duration.act = snakeball.duration.unsmooth[1];\n            snakeball.delay.act = snakeball.delay.unsmooth[1][1];\n            // 标识颜色\n            gsap.set(snakeball.balls, {\n              fill: \"#16b7df\"\n            });\n            // 短时间后，恢复原始发射频率\n            launcher.types[\"frozenball\"].timer = setTimeout(() => {\n              launcher.types[\"frozenball\"].if_effected = false;\n              // 恢复duration和delay\n              snakeball.duration.act = launcher.types[\"frozenball\"].tem_duration;\n              snakeball.delay.act = launcher.types[\"frozenball\"].tem_delay;\n              // 恢复颜色\n              gsap.set(snakeball.balls, {\n                fill: \"\"\n              });\n            }, 800);\n          }\n        },\n        // 伸缩球\n        scaleball: {\n          type: \"scaleball\",\n          r: 15,\n          color: \" #a37e22\",\n          score: 5,\n          prob: 0.96,\n          // 短时间内，snakeball半径变小，不容易撞到子弹球\n          trigger_head() {\n            audio_controller.buff.play(); //播放增益效果音效\n            // 缩小snakeball半径\n            snakeball.head_radius.act = snakeball.head_radius.ref * scale_stander / 2;\n            snakeball.body_radius.act = snakeball.body_radius.ref * scale_stander / 2;\n            // 设置snakeball颜色和半径\n            gsap.set(snakeball.balls, {\n              fill: \"#a37e22\",\n              r: i => {\n                return i === 0 ? snakeball.head_radius.act : snakeball.body_radius.act;\n              }\n            });\n            // 储存并清除定时器：防止多次触发、定时器堆叠导致效果时长不够\n            if (launcher.types[\"scaleball\"].timer) clearTimeout(launcher.types[\"scaleball\"].timer);\n            // 一段时间后，恢复颜色和正常大小\n            launcher.types[\"scaleball\"].timer = setTimeout(() => {\n              snakeball.head_radius.act = snakeball.head_radius.ref * scale_stander;\n              snakeball.body_radius.act = snakeball.body_radius.ref * scale_stander;\n              gsap.set(snakeball.balls, {\n                fill: \"\",\n                r: \"\"\n              });\n            }, 3000);\n          },\n          // 界面范围内的所有子弹球变成原来的三倍大\n          trigger_body() {\n            Object.values(launcher.balls).forEach(ball => {\n              // 限制子弹球最大为原来半径的9倍，防止该函数多次被触发，子弹球变得过大\n              if (ball.r / launcher.types[ball.type].r / scale_stander >= 9) return;\n              ball.r *= 3;\n              // 更改子弹球半径\n              gsap.set(ball.ball, {\n                r: ball.r\n              });\n              flicker(ball.ball, \"#a37e22\"); // 闪烁子弹球颜色\n            });\n          }\n        },\n        // 分裂球\n        splitball: {\n          type: \"splitball\",\n          r: 12,\n          color: \" #ef7706\",\n          score: 5,\n          prob: 0.96,\n          // 分裂一条相同长度的snakeball，与玩家同步运动\n          trigger_head() {\n            audio_controller.buff.play(); //播放增益效果音效\n            let tem_lives = player.lives; //暂存生命，方便后续移除对应生命值\n            // 创建新增身体，并设置新增部分颜色\n            for (let i = 0; i < tem_lives; i++) {\n              let ball = snakeball.create_ball(\"body\");\n              gsap.set(ball, {\n                fill: \"#ef7706\"\n              });\n            }\n            // 修改移动方法：使新增身体分裂位移\n            snakeball.set_location = (ball, x, y, index) => {\n              // 设置新增身体与原位置偏移\n              let add_x = parseInt(index / (player.lives + 1)) * innerWidth / 8;\n              let add_y = parseInt(index / (player.lives + 1)) * innerHeight / 8;\n              gsap.to(ball, {\n                pos_x: x + add_x,\n                pos_y: y + add_y,\n                cx: x + add_x,\n                cy: y + add_y,\n                duration: snakeball.duration.act,\n                ease: \"linear\",\n                delay: index % (player.lives + 1) * snakeball.delay.act\n              });\n            };\n            // 一段时间后恢复\n            setTimeout(() => {\n              // 移除新增的身体\n              for (let i = 0; i < tem_lives; i++) {\n                stage.removeChild(snakeball.balls[snakeball.balls.length - 1]);\n                snakeball.balls.pop();\n              }\n              // 恢复移动方法：这里不能临时储存方法然后替换回去，如果多次触发的话，会出BUG\n              snakeball.set_location = (ball, x, y, index) => {\n                gsap.to(ball, {\n                  pos_x: x,\n                  pos_y: y,\n                  cx: x,\n                  cy: y,\n                  duration: snakeball.duration.act,\n                  ease: \"linear\",\n                  delay: index * snakeball.delay.act\n                });\n              };\n            }, 3000);\n          },\n          // 在爆炸处分裂火球\n          trigger_body() {\n            // 生成随机数个火球\n            for (let i = 0; i < Math.random() * 10 + 10; i++) {\n              // 每一次爆炸，必分裂出一个分裂球\n              let type = i === 0 ? \"splitball\" : \"fireball\";\n              // 设置对应属性\n              let r = launcher.types[type].r * scale_stander;\n              let color = launcher.types[type].color;\n              let pos_x = this.pos_x;\n              let pos_y = this.pos_y;\n              let speed_x = (Math.random() - 0.5) * 2 * launcher.max_speed * scale_stander;\n              let speed_y = (Math.random() - 0.5) * 2 * launcher.max_speed * scale_stander;\n              // 生成子弹球对象\n              let ball = new bulletball(r, pos_x, pos_y, speed_x, speed_y, type, color);\n              // 将子弹球用index标记，并储存到balls，方便查找\n              ball.index = launcher.index;\n              launcher.balls[launcher.index] = ball;\n              // 创建子弹球\n              ball.create();\n              launcher.index++;\n            }\n          }\n        },\n        // 磁力球\n        magneticball: {\n          type: \"magneticball\",\n          r: 15,\n          color: \" #113ede\",\n          score: 8,\n          prob: 0.985,\n          // 界面内范围内的所有子弹球、全部移向snakeball的头部位置\n          trigger_head() {\n            audio_controller.buff.play(); //播放增益效果音效\n            Object.values(launcher.balls).forEach(ball => {\n              // 计算随机更新子弹球的速度，30毫秒是子弹球移动频率\n              ball.speed_x = (this.pos_x - ball.pos_x) / 30 / (Math.random() * 0.5 + 1);\n              ball.speed_y = (this.pos_y - ball.pos_y) / 30 / (Math.random() * 0.5 + 1);\n              flicker(ball.ball, \"#113ede\"); // 闪烁子弹球颜色\n            });\n          },\n          // snakeball被吸到磁力球爆炸的位置\n          trigger_body() {\n            // 移除鼠标事件:短时间内无法操控snakeball\n            stage.onmousemove = null;\n            stage.ontouchmove = null;\n            // 移动snakeball到子弹球爆炸位置\n            snakeball.move(this.pos_x, this.pos_y);\n            // 一段时间后恢复\n            snakeball.change_color(\"#113ede\", 1, () => {\n              // 重新绑定事件，可再次操控snakeball\n              snakeball.bind_events();\n            });\n          }\n        },\n        // 影子球\n        shadowball: {\n          type: \"shadowball\",\n          r: 10,\n          color: \" #9f4df0\",\n          score: 8,\n          prob: 0.985,\n          // 短时间内、让与snakeball碰撞的子弹球、瞬移到snakeball头的周围并减速\n          trigger_head() {\n            audio_controller.buff.play(); //播放增益效果音效\n            // 更改子弹球身体碰撞方法\n            bulletball.prototype.crash_body = ball => {\n              if (ball.type != \"fireball\") {\n                // 非火球则移动到snakeball头部的位置周围\n                ball.pos_x = snakeball.balls[0].pos_x + Math.random() * 200 - 100;\n                ball.pos_y = snakeball.balls[0].pos_y + Math.random() * 200 - 100;\n                // 减速\n                ball.speed_x /= 5;\n                ball.speed_y /= 5;\n                flicker(ball.ball, \"#9f4df0\"); // 闪烁子弹球颜色\n              } else {\n                // 是火球则正常加分\n                player.score += launcher.types[ball.type].score;\n                ball.destroy();\n              }\n            };\n            // 标识snakeball颜色\n            gsap.set(snakeball.balls, {\n              fill: \"#9f4df0\"\n            });\n            // 储存并清除定时器：防止多次触发、定时器堆叠导致效果时长不够\n            if (launcher.types[\"shadowball\"].timer) clearTimeout(launcher.types[\"shadowball\"].timer);\n            // 一段时间后恢复\n            launcher.types[\"shadowball\"].timer = setTimeout(() => {\n              // 恢复身体碰撞方法:这里不能临时储存方法然后替换回去，如果多次触发的话，会出BUG\n              bulletball.prototype.crash_body = ball => {\n                player.score += launcher.types[ball.type].score;\n                ball.destroy();\n                let trigger_body = launcher.types[ball.type].trigger_body.bind(ball);\n                return trigger_body();\n              };\n              gsap.set(snakeball.balls, {\n                fill: \"\"\n              });\n            }, 3000);\n          },\n          // 短时间后、让所有子弹球随机改变位置\n          trigger_body() {\n            // 设置颜色预警\n            Object.values(launcher.balls).forEach(ball => {\n              gsap.set(ball.ball, {\n                fill: \"#9f4df0\"\n              });\n            });\n            // 一段时间后,随机设置所有子弹球位置\n            setTimeout(() => {\n              Object.values(launcher.balls).forEach(ball => {\n                // 恢复颜色\n                gsap.set(ball.ball, {\n                  fill: \"\"\n                });\n                // 随机子弹球设置xy位置\n                ball.pos_x = Math.random() * innerWidth;\n                ball.pos_y = Math.random() * innerHeight;\n              });\n            }, 500);\n          }\n        },\n        // 隐身球\n        invisibleball: {\n          type: \"invisibleball\",\n          r: 15,\n          color: \" #808080\",\n          score: 10,\n          prob: 0.985,\n          // 短时间内让snakeball隐身，无法碰撞到子弹球\n          trigger_head() {\n            audio_controller.buff.play(); //播放增益效果音效\n            // 临时储存check_crash方法，方便后续替换回去，这里可以用临时储存的方法，因为不存在多次触发的情况\n            let tem_check_crash = bulletball.prototype.check_crash;\n            // 移除子弹球的撞击检测方法：让子弹球无法撞击snakeball\n            bulletball.prototype.check_crash = () => {};\n            // 设置snakeball半透明\n            gsap.set(snakeball.balls, {\n              opacity: 0.5\n            });\n            // 一段时间后恢复\n            setTimeout(() => {\n              // 恢复子弹球撞击检测\n              bulletball.prototype.check_crash = tem_check_crash;\n              // 如果游戏还在进行中：则恢复snakeball透明度\n              if (game_controler.if_gaming) gsap.set(snakeball.balls, {\n                opacity: 1\n              });\n            }, 3000);\n          },\n          // 短时间内让所有子弹球隐身\n          trigger_body() {\n            // 设置所有子弹球透明度为0\n            Object.values(launcher.balls).forEach(ball => {\n              gsap.to(ball.ball, {\n                opacity: 0,\n                duration: 0.5,\n                ease: \"power3.out\"\n              });\n            });\n            // 储存并清除定时器：防止多次触发，造成子弹球闪烁以及隐身时长不够\n            if (launcher.types[\"invisibleball\"].timer) clearTimeout(launcher.types[\"invisibleball\"].timer);\n            // 一段时间后，撤销隐身效果\n            launcher.types[\"invisibleball\"].timer = setTimeout(() => {\n              // 如果游戏还在进行中：恢复所有子弹球透明度\n              if (game_controler.if_gaming) Object.values(launcher.balls).forEach(ball => {\n                gsap.to(ball.ball, {\n                  opacity: 1,\n                  duration: 0.5,\n                  ease: \"power3.out\"\n                });\n              });\n            }, 3000);\n          }\n        },\n        // 信号球\n        signalball: {\n          type: \"signalball\",\n          r: 8,\n          color: \" #ea4fc0\",\n          score: 20,\n          prob: 0.99,\n          // 短时间内生成大量身体，但不增加生命，一段时间后恢复\n          trigger_head() {\n            audio_controller.buff.play(); //播放增益效果音效\n            // 使snakeball有一个顺滑的操控\n            snakeball.duration.act = snakeball.duration.default;\n            snakeball.delay.act = 0.02;\n            // 创建身体\n            for (let i = 0; i < 50; i++) {\n              snakeball.create_ball(\"body\");\n            }\n            // 标识snakeball颜色，一段时间后恢复\n            snakeball.change_color(\"#ea4fc0\", 3, () => {\n              // 移除新增的身体，恢复颜色\n              for (let i = 0; i < 50; i++) {\n                stage.removeChild(snakeball.balls[snakeball.balls.length - 1]);\n                snakeball.balls.pop();\n              }\n            });\n          },\n          // 短时间内，涌出大量子弹球\n          trigger_body() {\n            // 重置launcher的定时器，设置发射频率极高\n            clearInterval(launcher.timer);\n            launcher.timer = setInterval(launcher.launch.bind(launcher), 1);\n            // 设置在大量发射子弹球的时间段里面、不再发射信号球，避免造成超多子弹球，极易让玩家死亡\n            launcher.types[\"signalball\"].prob = 2;\n            // 储存并清除定时器：防止多次触发、定时器堆叠导致效果时长不够\n            if (launcher.types[\"signalball\"].timer) clearTimeout(launcher.types[\"signalball\"].timer);\n            // 短时间后，恢复原始发射频率\n            launcher.types[\"signalball\"].timer = setTimeout(() => {\n              // 恢复信号球发射概率\n              launcher.types[\"signalball\"].prob = 0.99;\n              clearInterval(launcher.timer);\n              // 如果游戏还在进行中：用原频率重新启动炮台，这里一定要确定游戏还在进行，否则会出BUG\n              if (game_controler.if_gaming) launcher.timer = setInterval(launcher.launch.bind(launcher), launcher.frequency);\n            }, 800);\n          }\n        },\n        // 核弹球\n        hball: {\n          type: \"hball\",\n          r: 30,\n          color: \" #046312\",\n          score: 50,\n          prob: 0.995,\n          // 界面范围内所有子弹球爆炸，并获取对应得分\n          trigger_head() {\n            audio_controller.buff.play(); //播放增益效果音效\n            Object.values(launcher.balls).forEach(ball => {\n              player.score += launcher.types[ball.type].score;\n              if (!ball.if_removed) ball.destroy();\n            });\n          },\n          // 直接丢失5条生命值\n          trigger_body() {\n            audio_controller.warn.play(); //播放警示音效\n            for (let i = 0; i <= 5; i++) {\n              // 如果玩家已经死亡：则不执行，否则会报错\n              if (player.lives > 0) snakeball.lost_lives();\n            }\n          }\n        }\n      },\n      balls: {},\n      //所有的子弹球：这里用对象储存以方便查找指定子弹球\n      index: 0,\n      //计数：用于查找子弹球\n      frequency: 250,\n      //发射频率\n      max_speed: 10,\n      //子弹球本局游戏最高可达的移动速度\n      timer: null,\n      //发射定时器\n      // 运行launcher\n      run() {\n        // 更新所有子弹球和index\n        this.balls = {};\n        this.index = 0;\n        // 开启定时器，发射子弹球\n        this.timer = setInterval(this.launch.bind(this), this.frequency);\n      },\n      // 发射子弹球\n      launch() {\n        let r, pos_x, pos_y, speed_x, speed_y, type, color;\n        // 设置随机种类的子弹球\n        Object.values(this.types).forEach(ball => {\n          if (Math.random() > ball.prob) return type = ball.type;\n        });\n        r = this.types[type].r * scale_stander;\n        color = this.types[type].color;\n        // 设置子弹球从界面外部的进入方向\n        let direction = Math.floor(Math.random() * 4);\n        switch (direction) {\n          case 0:\n            // 从左侧进入\n            pos_x = -r; // 球的初始位置在视图左侧外\n            speed_x = Math.random() * this.max_speed * scale_stander + 1; // 速度向右\n            pos_y = Math.random() * innerHeight; // 随机垂直位置\n            speed_y = (Math.random() - 0.5) * 2 * this.max_speed * scale_stander; // 随机垂直速度，可以是向上或向下\n            break;\n          case 1:\n            // 从右侧进入\n            pos_x = innerWidth + r; // 球的初始位置在视图右侧外\n            speed_x = Math.random() * -this.max_speed * scale_stander - 1; // 速度向左\n            pos_y = Math.random() * innerHeight; // 随机垂直位置\n            speed_y = (Math.random() - 0.5) * 2 * this.max_speed * scale_stander; // 随机垂直速度，可以是向上或向下\n            break;\n          case 2:\n            // 从上方进入\n            pos_y = -r; // 球的初始位置在视图上方外\n            speed_y = Math.random() * this.max_speed * scale_stander + 1; // 速度向下\n            pos_x = Math.random() * innerWidth; // 随机水平位置\n            speed_x = (Math.random() - 0.5) * 2 * this.max_speed * scale_stander; // 随机水平速度，可以是向左或向右\n            break;\n          case 3:\n            // 从下方进入\n            pos_y = innerHeight + r; // 球的初始位置在视图下方外\n            speed_y = Math.random() * -this.max_speed * scale_stander - 1; // 速度向上\n            pos_x = Math.random() * innerWidth; // 随机水平位置\n            speed_x = (Math.random() - 0.5) * 2 * this.max_speed * scale_stander; // 随机水平速度，可以是向左或向右\n            break;\n        }\n        // 生成子弹球对象\n        let ball = new bulletball(r, pos_x, pos_y, speed_x, speed_y, type, color);\n        // 将子弹球用index标记，并储存到balls，方便查找\n        ball.index = this.index;\n        this.balls[this.index] = ball;\n        // 创建子弹球\n        ball.create();\n        this.index++;\n      },\n      // 摧毁所有子弹球\n      destroy() {\n        clearInterval(this.timer); //清除发射定时器\n        // 这里只给所有子弹球播放爆炸动画、而不清除，是因为后面再次游戏时，会直接清除整个stage\n        Object.values(this.balls).forEach(ball => {\n          clearInterval(ball.move_timer);\n          gsap.to(ball.ball, {\n            fill: \"#e3d80f\",\n            stroke: \"#dc1130\",\n            strokeWidth: ball.r / 5,\n            //这里用半径计算线条宽度、是为了不让其受屏幕尺寸影响\n            r: 2 * ball.r,\n            opacity: 0,\n            duration: 0.3,\n            ease: \"power3.out\"\n          });\n        });\n      }\n    };\n    // 游戏控制器\n    const game_controler = {\n      // wave关卡控制器\n      waver: {\n        timer: null,\n        //定时器\n        default_time: 40 //每一关的默认时长\n      },\n      initial_lives: 20,\n      //玩家的初始生命值\n      if_gaming: false,\n      //是否在进行游戏中\n      // 创建关卡：一般关卡会在游戏正式开始之前创建\n      create_wave() {\n        stage.innerHTML = \"\"; //清空游戏舞台\n        // 如果玩家未激活：已死亡/首次创建\n        if (!player.if_active) {\n          // 设置默认玩家信息\n          player.if_active = true; //激活玩家\n          player.wave = player.rank = player.score = 0;\n          player.lives = this.initial_lives;\n        }\n        this.upgrade(); //升级游戏：设置关卡难度参数\n        player.time = this.waver.default_time; //重置游戏时间\n        snakeball.create(player.lives); //创建snakeball\n      },\n      // 正式开始游戏\n      start() {\n        this.if_gaming = true;\n        audio_controller.gameing.play(); //播放游戏音乐\n        snakeball.reseter.run(); //启动reseter：开始周期重置snakeball\n        launcher.run(); //开始发射子弹球\n        // 开启waver：进行倒计时，倒计时完成、则结束关卡\n        this.waver.timer = setInterval(() => {\n          player.time--;\n          // 倒计时结束，并且玩家未死亡：游戏关卡胜利\n          if (player.time <= 0 && player.if_active) this.over(true);\n        }, 1000);\n      },\n      // 游戏结束\n      over(if_win) {\n        this.if_gaming = false;\n        // this.post(); //提交玩家数据\n        this.clean(); //清扫游戏舞台\n        // 停止游戏音乐、并播放大厅音乐\n        audio_controller.gameing.stop();\n        audio_controller.hall.play();\n        audio_controller.hall.fade(0, 1, 9000);\n        //显示总结面板\n        summary.value.show();\n        // 游戏关卡胜利\n        if (if_win) audio_controller.win.play();\n        // 游戏关卡失败\n        else {\n          audio_controller.fail.play();\n          // 设置玩家未激活：即死亡，并归零游戏时间\n          player.if_active = false;\n          player.time = 0;\n        }\n      },\n      // 清扫游戏舞台\n      clean() {\n        clearInterval(this.waver.timer);\n        launcher.destroy();\n        snakeball.remove();\n        snakeball.reseter.stop();\n      },\n      // 升级\n      upgrade() {\n        player.wave++;\n        // 升级频率: 频率范围为250-40，增长速度为曲线，先快后慢、最后平稳\n        launcher.frequency = 40 + (250 - 40) * Math.exp(-0.08 * player.wave);\n        // 升级速度: 速度范围为10-25，增长速度同上\n        launcher.max_speed = 10 + (25 - 10) * (1 - Math.exp(-0.08 * player.wave));\n        // 加快游戏音乐，音乐速度范围为1-2\n        audio_controller.gameing.rate(1 + (2 - 1) * (1 - Math.exp(-0.08 * player.wave)));\n      },\n      // 提交玩家数据\n      post() {\n        let data = {\n          id: player.id,\n          name: player.name,\n          wave: player.wave,\n          lives: player.lives,\n          score: player.score\n        };\n        // RAS加密\n        const public_key = forge.pki.publicKeyFromPem(`-----BEGIN PUBLIC KEY-----\nxxxxxxx\n-----END PUBLIC KEY-----`);\n        // 生成加密数据\n        const encrypted_data = public_key.encrypt(JSON.stringify(data), \"RSA-OAEP\", {\n          md: forge.md.sha256.create()\n        });\n        // 将加密数据转换为Base64\n        const encrypted_base64 = forge.util.encode64(encrypted_data);\n        // 发送数据\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", \"https://put_your_server.com/api\", true);\n        xhr.setRequestHeader(\"Content-type\", \"application/json\");\n        xhr.send(JSON.stringify({\n          encrypted_data: encrypted_base64\n        }));\n      }\n    };\n    // 储存全局功能函数\n    store.ready_to_game = () => {\n      // 在准备提示出现前，就创建关卡、可以看到snakeball。准备提示结束之后，才正式开始游戏\n      readytips.value.ready(game_controler.create_wave.bind(game_controler), game_controler.start.bind(game_controler));\n    };\n    onMounted(() => {\n      stage = document.querySelector(\"#stage\");\n      window.addEventListener(\"resize\", resize);\n      resize();\n    });\n    const __returned__ = {\n      store,\n      player,\n      audio_controller,\n      readytips,\n      summary,\n      resettip,\n      get stage() {\n        return stage;\n      },\n      set stage(v) {\n        stage = v;\n      },\n      get scale_stander() {\n        return scale_stander;\n      },\n      set scale_stander(v) {\n        scale_stander = v;\n      },\n      resize,\n      flicker,\n      snakeball,\n      bulletball,\n      launcher,\n      game_controler,\n      get global() {\n        return global;\n      },\n      Resettip,\n      Readytips,\n      Summary,\n      Databox,\n      onMounted,\n      ref,\n      get gsap() {\n        return gsap;\n      },\n      get forge() {\n        return forge;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["global","Resettip","Readytips","Summary","Databox","onMounted","ref","gsap","forge","store","player","audio_controller","readytips","summary","resettip","stage","scale_stander","resize","innerWidth","innerHeight","setAttribute","snakeball","flicker","ball","color","timeline","set","fill","balls","head_radius","act","body_radius","start_x","start_y","distance_x","duration","smooth","unsmooth","default","delay","smooth_prob","reseter","timer","max","min","run","stop","setTimeout","reset","bind","Math","random","clearTimeout","length","forEach","index","create","lives","i","create_ball","bind_events","move","onmousemove","e","x","y","ontouchmove","touches","clientX","clientY","type","document","createElementNS","pos_x","pos_y","appendChild","push","direction_x","set_location","to","cx","cy","ease","value","play","if_duration_smooth","get_lives","lost_lives","removeChild","pop","game_controler","over","remove","stroke","strokeWidth","r","opacity","stagger","change_color","next","onComplete","bulletball","constructor","speed_x","speed_y","move_timer","if_removed","setInterval","check_crash","distance_y","abs","crash_head","crash_body","score","launcher","types","trigger_head","destroy","trigger_body","clearInterval","blasts","parseInt","fireball","prob","warn","medicineball","buff","frozenball","Object","values","if_effected","tem_duration","tem_delay","scaleball","splitball","tem_lives","add_x","add_y","max_speed","magneticball","shadowball","prototype","invisibleball","tem_check_crash","if_gaming","signalball","launch","frequency","hball","direction","floor","waver","default_time","initial_lives","create_wave","innerHTML","if_active","wave","rank","upgrade","time","start","gameing","if_win","clean","hall","fade","show","win","fail","exp","rate","post","data","id","name","public_key","pki","publicKeyFromPem","encrypted_data","encrypt","JSON","stringify","md","sha256","encrypted_base64","util","encode64","xhr","XMLHttpRequest","open","setRequestHeader","send","ready_to_game","ready","querySelector","window","addEventListener"],"sources":["E:/SnakeBall/src/components/game/stage.vue"],"sourcesContent":["<template>\r\n    <svg id=\"stage\" class=\"_fullscreen\" />\r\n    <Resettip ref=\"resettip\" />\r\n    <Readytips ref=\"readytips\" />\r\n    <Summary ref=\"summary\" />\r\n    <Databox />\r\n</template>\r\n\r\n<script setup>\r\nimport { global } from \"@/stores/global\";\r\nimport Resettip from \"@/components/game/resettip.vue\";\r\nimport Readytips from \"@/components/game/readytips.vue\";\r\nimport Summary from \"@/components/game/summary.vue\";\r\nimport Databox from \"@/components/game/databox.vue\";\r\nimport { onMounted, ref } from \"vue\";\r\nimport gsap from \"gsap\";\r\nimport forge from \"node-forge\";\r\nconst store = global();\r\nconst player = store.player;\r\nconst audio_controller = store.audio_controller;\r\n// 组件\r\nconst readytips = ref(null);\r\nconst summary = ref(null);\r\nconst resettip = ref(null);\r\n//游戏舞台SVG\r\nlet stage;\r\nlet scale_stander; //缩放标准系数：用于让舞台在不同尺寸的屏幕上保持一致的大小\r\nfunction resize() {\r\n    // 缩放系数以最短边来计算\r\n    scale_stander = innerWidth <= innerHeight ? innerWidth / 1000 : innerHeight / 1000;\r\n    stage.setAttribute(\"viewBox\", `0 0 ${innerWidth} ${innerHeight}`);\r\n    snakeball.resize();\r\n}\r\n// 闪烁：目标元素改变颜色，短时间后回复\r\nfunction flicker(ball, color) {\r\n    gsap.timeline()\r\n        .set(ball, {\r\n            fill: color,\r\n        })\r\n        .set(\r\n            ball,\r\n            {\r\n                fill: \"\",\r\n            },\r\n            \"<0.5\"\r\n        );\r\n}\r\n// snakeball控制对象\r\nconst snakeball = {\r\n    balls: [], //所有的头部/身体svg元素\r\n    // 头部的参考半径/实际半径：用参考半径是为了让snakeball适应不同的屏幕尺寸\r\n    head_radius: {\r\n        ref: 12,\r\n        act: 0,\r\n    },\r\n    // 身体部分的参考半径/实际半径\r\n    body_radius: {\r\n        ref: 6,\r\n        act: 0,\r\n    },\r\n    // 起始xy位置:设置为屏幕左上方外部\r\n    start_x: -20,\r\n    start_y: -20,\r\n    // 水平方向移动距离：用于控制snakeball在水平方向的身体朝向\r\n    distance_x: 0,\r\n    // 移动时间\r\n    duration: {\r\n        smooth: [0, 0.3], //顺滑的移动值区间\r\n        unsmooth: [0.7, 1], //不顺滑的移动值区间\r\n        default: 0.1, //默认值\r\n        act: 0, //实际值\r\n    },\r\n    // 身体的延迟移动间隔时间\r\n    delay: {\r\n        smooth: [0.05, 0.25],\r\n        // delay的不顺滑值有两段，过快或者过慢都会影响玩家的操纵\r\n        unsmooth: [\r\n            [0, 0.01],\r\n            [0.3, 0.5],\r\n        ],\r\n        default: 0.05,\r\n        act: 0,\r\n    },\r\n    // 每一次reset能够顺滑操控snakeball的概率值：获得顺滑duration和delay的概率\r\n    smooth_prob: 0.85,\r\n    // 重置器\r\n    reseter: {\r\n        timer: null, //定时器\r\n        max: 7000, //最长重置间隔时间\r\n        min: 3000, //最短重置间隔时间\r\n        // 启动重置器\r\n        run() {\r\n            this.stop();\r\n            // 设置随机时间触发reset\r\n            this.timer = setTimeout(\r\n                snakeball.reset.bind(snakeball),\r\n                Math.random() * (this.max - this.min) + this.min\r\n            );\r\n        },\r\n        // 停止重置器\r\n        stop() {\r\n            clearTimeout(this.timer);\r\n        },\r\n    },\r\n    resize() {\r\n        // 重新计算头部和身体的实际半径\r\n        this.head_radius.act = this.head_radius.ref * scale_stander;\r\n        this.body_radius.act = this.body_radius.ref * scale_stander;\r\n        // 如果snakeball已经创建，则更改全部半径\r\n        if (!this.balls.length) return;\r\n        this.balls.forEach((ball, index) => {\r\n            if (index === 0) ball.setAttribute(\"r\", this.head_radius.act);\r\n            else ball.setAttribute(\"r\", this.body_radius.act);\r\n        });\r\n    },\r\n    // 创建snakeball\r\n    create(lives) {\r\n        this.balls = []; //清空所有ball\r\n        // 根据当前生命值创建snakeball\r\n        for (let i = 0; i < lives + 1; i++) {\r\n            this.create_ball(i === 0 ? \"head\" : \"body\");\r\n        }\r\n        // 设置默认duration和delay\r\n        this.duration.act = this.duration.default;\r\n        this.delay.act = this.delay.default;\r\n        this.bind_events(); // 绑定事件\r\n        // 将snakeball移动到屏幕中间，即使玩家未移动鼠标\r\n        this.move(innerWidth / 2, innerHeight / 2);\r\n    },\r\n    // 绑定事件:鼠标/手指移动、可以操控snakeball移动\r\n    bind_events() {\r\n        stage.onmousemove = (e) => {\r\n            this.move(e.x, e.y);\r\n        };\r\n        stage.ontouchmove = (e) => {\r\n            this.move(e.touches[0].clientX, e.touches[0].clientY);\r\n        };\r\n    },\r\n    // 创建小球元素：snakeball的头/身体部分\r\n    create_ball(type) {\r\n        let ball = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\r\n        // 计算xy坐标：用pos_x，pos_y储存位置信息，方便后续不使用DOM方式查找\r\n        ball.pos_x = this.start_x + this.balls.length * this.body_radius.act;\r\n        ball.pos_y = this.start_y;\r\n        // 设置对应DOM属性\r\n        ball.setAttribute(\"fill\", \"var(--color_front)\");\r\n        ball.setAttribute(\"cx\", ball.pos_x);\r\n        ball.setAttribute(\"cy\", ball.pos_y);\r\n        ball.setAttribute(\"r\", type === \"head\" ? this.head_radius.act : this.body_radius.act);\r\n        // 将ball添加到stage和balls数组\r\n        stage.appendChild(ball);\r\n        this.balls.push(ball);\r\n        return ball;\r\n    },\r\n    // 移动snakeball\r\n    move(x, y) {\r\n        let direction_x = x - this.start_x - this.distance_x; //snakeball的水平x轴移动方向\r\n        this.distance_x = x - this.start_x; //更新distance_x\r\n        this.balls.forEach((ball, index) => {\r\n            //计算snakeball的x方向移动距离\r\n            x = this.start_x + index * this.body_radius.act + this.distance_x;\r\n            // 根据移动方向调整身体位置：无论蛇头朝向哪个水平方向，身体总是在蛇头的后面\r\n            if (direction_x > 0 && index !== 0) x -= 2 * index * this.body_radius.act;\r\n            // 移动\r\n            this.set_location(ball, x, y, index);\r\n        });\r\n    },\r\n    // 设置ball的xy坐标位置\r\n    set_location(ball, x, y, index) {\r\n        gsap.to(ball, {\r\n            pos_x: x,\r\n            pos_y: y,\r\n            cx: x,\r\n            cy: y,\r\n            duration: this.duration.act,\r\n            ease: \"linear\",\r\n            delay: index * this.delay.act,\r\n        });\r\n    },\r\n    // 重置snakeball的移动速度、身体延迟移动间隔、以及重置周期\r\n    reset() {\r\n        //播放reset动画和声音\r\n        resettip.value.reset();\r\n        audio_controller.reset.play();\r\n        // 重置duration\r\n        let if_duration_smooth = Math.random() < this.smooth_prob ? \"smooth\" : \"unsmooth\";\r\n        this.duration.act =\r\n            Math.random() *\r\n                (this.duration[if_duration_smooth][1] - this.duration[if_duration_smooth][0]) +\r\n            this.duration[if_duration_smooth][0];\r\n        // 重置delay\r\n        if (Math.random() < this.smooth_prob) {\r\n            // 设置delay为顺滑\r\n            this.delay.act =\r\n                Math.random() * (this.delay.smooth[1] - this.delay.smooth[0]) +\r\n                this.delay.smooth[0];\r\n        } else {\r\n            // 设置delay为不顺滑\r\n            let index = Math.random() >= 0.5 ? 0 : 1; //随机取过快或过慢区间\r\n            this.delay.act =\r\n                Math.random() * (this.delay.unsmooth[index][1] - this.delay.unsmooth[index][0]) +\r\n                this.delay.unsmooth[index][0];\r\n        }\r\n        // 重置reseter\r\n        this.reseter.run();\r\n    },\r\n    // 获得生命值\r\n    get_lives() {\r\n        flicker(this.balls, \"#0ee515\"); // 闪烁颜色\r\n        this.create_ball(\"body\"); // 添加新的身体元素\r\n        player.lives++; //生命值增加\r\n    },\r\n    // 失去生命值\r\n    lost_lives() {\r\n        flicker(this.balls, \"#e3d80f\"); // 闪烁颜色\r\n        // 移除stage以及数组中的ball元素\r\n        stage.removeChild(this.balls[this.balls.length - 1]);\r\n        this.balls.pop();\r\n        player.lives--; //生命值减少\r\n        // 如果生命值小于等于0，则触发游戏失败事件\r\n        if (player.lives <= 0) game_controler.over(false);\r\n    },\r\n    // 摧毁，清除snakeball\r\n    remove() {\r\n        // 移除鼠标事件\r\n        stage.onmousemove = stage.ontouchmove = null;\r\n        // 播放snakeball爆炸动画：这里不清除是因为再开始游戏的时候、会直接清空stage\r\n        gsap.to(this.balls, {\r\n            fill: \"#e3d80f\",\r\n            stroke: \"#dc1130\",\r\n            strokeWidth: this.body_radius.act / 5, //这里用半径计算线条宽度、是为了不让其受屏幕尺寸影响\r\n            r: 2 * this.body_radius.act,\r\n            opacity: 0,\r\n            duration: 0.6,\r\n            ease: \"power3.out\",\r\n            stagger: 0.01,\r\n        });\r\n    },\r\n    // 改变snakeball的颜色，恢复颜色后、执行后续功能\r\n    change_color(color, duration, next) {\r\n        gsap.timeline()\r\n            .set(this.balls, {\r\n                fill: color,\r\n            })\r\n            .set(\r\n                this.balls,\r\n                {\r\n                    fill: \"\",\r\n                    onComplete: () => {\r\n                        if (next) next(); //存在后续功能，则执行\r\n                    },\r\n                },\r\n                `<${duration}` //duration时间后、恢复颜色\r\n            );\r\n    },\r\n};\r\n// 子弹球\r\nclass bulletball {\r\n    constructor(r, pos_x, pos_y, speed_x, speed_y, type, color) {\r\n        this.r = r; //子弹球半径\r\n        this.pos_x = pos_x; // x位置\r\n        this.pos_y = pos_y; // y位置\r\n        this.speed_x = speed_x; //x方向移动速度\r\n        this.speed_y = speed_y; //y方向移动速度\r\n        this.type = type; //子弹球类型\r\n        this.color = color; //子弹球颜色\r\n        this.move_timer = null; //移动定时器\r\n        this.ball = null; ///DOM元素、SVG\r\n        this.if_removed = false; //是否被移除：用于防止子弹球被多次移除导致BUG\r\n    }\r\n    // 创建子弹球\r\n    create() {\r\n        this.ball = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\r\n        // 设置对应DOM属性\r\n        this.ball.setAttribute(\"cx\", this.pos_x);\r\n        this.ball.setAttribute(\"cy\", this.pos_y);\r\n        this.ball.setAttribute(\"r\", this.r);\r\n        this.ball.setAttribute(\"fill\", this.color);\r\n        // 添加到stage\r\n        stage.appendChild(this.ball);\r\n        // 启动移动定时器：移动子弹球\r\n        this.move_timer = setInterval(this.move.bind(this), 30);\r\n    }\r\n    // 移动子弹球\r\n    move() {\r\n        // 更新xy位置\r\n        this.pos_x += this.speed_x;\r\n        this.pos_y += this.speed_y;\r\n        // 移动子弹球\r\n        gsap.set(this.ball, {\r\n            cx: this.pos_x,\r\n            cy: this.pos_y,\r\n        });\r\n        // 每次移动后，检测是否发生撞击\r\n        this.check_crash();\r\n    }\r\n    // 检测是否与snakeball发生了撞击\r\n    check_crash() {\r\n        for (let i = 0; i < snakeball.balls.length; i++) {\r\n            // 计算到snakeball的头/身体的xy距离\r\n            let distance_x = this.pos_x - snakeball.balls[i].pos_x;\r\n            let distance_y = this.pos_y - snakeball.balls[i].pos_y;\r\n            // 如果撞到了头部:\r\n            if (\r\n                i === 0 &&\r\n                Math.abs(distance_x) <= snakeball.head_radius.act + this.r &&\r\n                Math.abs(distance_y) <= snakeball.head_radius.act + this.r\r\n            )\r\n                // 触发撞击头的事件函数\r\n                return this.crash_head(this);\r\n            // 如果撞到了身体部分:\r\n            else if (\r\n                i !== 0 &&\r\n                Math.abs(distance_x) <= snakeball.body_radius.act + this.r &&\r\n                Math.abs(distance_y) <= snakeball.body_radius.act + this.r\r\n            )\r\n                // 触发撞击身体部分的事件函数;\r\n                return this.crash_body(this);\r\n        }\r\n        // 如果子弹球移出界面范围，则直接被移除\r\n        if (\r\n            this.pos_x > innerWidth + this.r ||\r\n            this.pos_x < -this.r ||\r\n            this.pos_y > innerHeight + this.r ||\r\n            this.pos_y < -this.r\r\n        )\r\n            return this.remove();\r\n    }\r\n    // 碰撞到snakeball头部\r\n    crash_head(ball) {\r\n        player.score += launcher.types[this.type].score; //获得对应的分数\r\n        this.remove(); // 子弹球直接被移除\r\n        let trigger_head = launcher.types[this.type].trigger_head.bind(this); //触发撞击头部的事件函数\r\n        return trigger_head();\r\n    }\r\n    // 碰撞到snakeball身体部分\r\n    crash_body(ball) {\r\n        player.score += launcher.types[this.type].score; //获得对应的分数\r\n        this.destroy(); // 子弹球爆炸摧毁并被移除\r\n        let trigger_body = launcher.types[this.type].trigger_body.bind(this); //触发撞击身体的事件功能\r\n        return trigger_body();\r\n    }\r\n    // 摧毁子弹球\r\n    destroy() {\r\n        this.if_removed = true; //标记被移除\r\n        clearInterval(this.move_timer); //清除移动定时器\r\n        // 随机播放爆炸音效\r\n        audio_controller.blasts[parseInt(Math.random() * audio_controller.blasts.length)].play();\r\n        // 播放爆炸动画\r\n        gsap.to(this.ball, {\r\n            fill: \"#e3d80f\",\r\n            stroke: \"#dc1130\",\r\n            strokeWidth: this.r / 5,\r\n            r: 2 * this.r,\r\n            opacity: 1, //恢复透明度：小球爆炸时可能在隐身状态，但是需要其爆炸可以被看到\r\n            duration: 0.3,\r\n            ease: \"power3.out\",\r\n            onComplete: () => {\r\n                this.remove(); // 动画完成之后,再移除子弹球\r\n            },\r\n        });\r\n    }\r\n    // 移除子弹球\r\n    remove() {\r\n        this.if_removed = true; //标记被移除\r\n        clearInterval(this.move_timer); //清除移动定时器\r\n        // 从stage和launcher中移除子弹球\r\n        stage.removeChild(this.ball);\r\n        delete launcher.balls[this.index];\r\n    }\r\n}\r\n// 炮台：子弹球发射器\r\nconst launcher = {\r\n    // 所有种类的子弹球\r\n    types: {\r\n        // 火球：碰撞到头部失去一条生命值\r\n        fireball: {\r\n            type: \"fireball\",\r\n            r: 6, //参考半径\r\n            color: \" #dc1130\", //颜色\r\n            score: 1, //碰撞所获得的得分\r\n            prob: 0, //发射该子弹球的概率\r\n            // 碰到头部触发的事件\r\n            trigger_head() {\r\n                audio_controller.warn.play(); //播放警示音效\r\n                snakeball.lost_lives(); //snakeball失去一条生命\r\n            },\r\n            // 碰到身体部分触发的事件\r\n            trigger_body() {},\r\n        },\r\n        // 医药球：碰撞到头部增加一条生命值\r\n        medicineball: {\r\n            type: \"medicineball\",\r\n            r: 12,\r\n            color: \" #0ee515\",\r\n            score: 3,\r\n            prob: 0.85,\r\n            trigger_head() {\r\n                audio_controller.buff.play(); //播放增益效果音效\r\n                snakeball.get_lives(); //snakeball获得一条生命\r\n            },\r\n            trigger_body() {},\r\n        },\r\n        // 冷冻球\r\n        frozenball: {\r\n            type: \"frozenball\",\r\n            r: 10,\r\n            color: \" #16b7df\",\r\n            score: 5,\r\n            prob: 0.95,\r\n            // 短时间内，减速屏幕内所有子弹球\r\n            trigger_head() {\r\n                audio_controller.buff.play(); //播放增益效果音效\r\n                Object.values(launcher.balls).forEach((ball) => {\r\n                    flicker(ball.ball, \"#16b7df\"); // 闪烁子弹球颜色\r\n                    // 减慢子弹球速度\r\n                    ball.speed_x /= 20;\r\n                    ball.speed_y /= 20;\r\n                    // 一段时间后减速失效\r\n                    setTimeout(() => {\r\n                        ball.speed_x *= 20;\r\n                        ball.speed_y *= 20;\r\n                    }, 1000);\r\n                });\r\n            },\r\n            // 冰冻减速snakeball\r\n            trigger_body() {\r\n                // 判断是否在冰冻生效时间中：临时储存snakeball的duration和delay\r\n                if (!launcher.types[\"frozenball\"].if_effected) {\r\n                    launcher.types[\"frozenball\"].if_effected = true;\r\n                    launcher.types[\"frozenball\"].tem_duration = snakeball.duration.act;\r\n                    launcher.types[\"frozenball\"].tem_delay = snakeball.delay.act;\r\n                } else {\r\n                    // 储存并清除定时器：防止多次触发、定时器堆叠导致效果时长不够\r\n                    if (launcher.types[\"frozenball\"].timer)\r\n                        clearTimeout(launcher.types[\"frozenball\"].timer);\r\n                }\r\n                // 设置最大延迟的duration和delay: 使snakeball移动变慢;\r\n                snakeball.duration.act = snakeball.duration.unsmooth[1];\r\n                snakeball.delay.act = snakeball.delay.unsmooth[1][1];\r\n                // 标识颜色\r\n                gsap.set(snakeball.balls, {\r\n                    fill: \"#16b7df\",\r\n                });\r\n                // 短时间后，恢复原始发射频率\r\n                launcher.types[\"frozenball\"].timer = setTimeout(() => {\r\n                    launcher.types[\"frozenball\"].if_effected = false;\r\n                    // 恢复duration和delay\r\n                    snakeball.duration.act = launcher.types[\"frozenball\"].tem_duration;\r\n                    snakeball.delay.act = launcher.types[\"frozenball\"].tem_delay;\r\n                    // 恢复颜色\r\n                    gsap.set(snakeball.balls, {\r\n                        fill: \"\",\r\n                    });\r\n                }, 800);\r\n            },\r\n        },\r\n        // 伸缩球\r\n        scaleball: {\r\n            type: \"scaleball\",\r\n            r: 15,\r\n            color: \" #a37e22\",\r\n            score: 5,\r\n            prob: 0.96,\r\n            // 短时间内，snakeball半径变小，不容易撞到子弹球\r\n            trigger_head() {\r\n                audio_controller.buff.play(); //播放增益效果音效\r\n                // 缩小snakeball半径\r\n                snakeball.head_radius.act = (snakeball.head_radius.ref * scale_stander) / 2;\r\n                snakeball.body_radius.act = (snakeball.body_radius.ref * scale_stander) / 2;\r\n                // 设置snakeball颜色和半径\r\n                gsap.set(snakeball.balls, {\r\n                    fill: \"#a37e22\",\r\n                    r: (i) => {\r\n                        return i === 0 ? snakeball.head_radius.act : snakeball.body_radius.act;\r\n                    },\r\n                });\r\n                // 储存并清除定时器：防止多次触发、定时器堆叠导致效果时长不够\r\n                if (launcher.types[\"scaleball\"].timer)\r\n                    clearTimeout(launcher.types[\"scaleball\"].timer);\r\n                // 一段时间后，恢复颜色和正常大小\r\n                launcher.types[\"scaleball\"].timer = setTimeout(() => {\r\n                    snakeball.head_radius.act = snakeball.head_radius.ref * scale_stander;\r\n                    snakeball.body_radius.act = snakeball.body_radius.ref * scale_stander;\r\n                    gsap.set(snakeball.balls, {\r\n                        fill: \"\",\r\n                        r: \"\",\r\n                    });\r\n                }, 3000);\r\n            },\r\n            // 界面范围内的所有子弹球变成原来的三倍大\r\n            trigger_body() {\r\n                Object.values(launcher.balls).forEach((ball) => {\r\n                    // 限制子弹球最大为原来半径的9倍，防止该函数多次被触发，子弹球变得过大\r\n                    if (ball.r / launcher.types[ball.type].r / scale_stander >= 9) return;\r\n                    ball.r *= 3;\r\n                    // 更改子弹球半径\r\n                    gsap.set(ball.ball, {\r\n                        r: ball.r,\r\n                    });\r\n                    flicker(ball.ball, \"#a37e22\"); // 闪烁子弹球颜色\r\n                });\r\n            },\r\n        },\r\n        // 分裂球\r\n        splitball: {\r\n            type: \"splitball\",\r\n            r: 12,\r\n            color: \" #ef7706\",\r\n            score: 5,\r\n            prob: 0.96,\r\n            // 分裂一条相同长度的snakeball，与玩家同步运动\r\n            trigger_head() {\r\n                audio_controller.buff.play(); //播放增益效果音效\r\n                let tem_lives = player.lives; //暂存生命，方便后续移除对应生命值\r\n                // 创建新增身体，并设置新增部分颜色\r\n                for (let i = 0; i < tem_lives; i++) {\r\n                    let ball = snakeball.create_ball(\"body\");\r\n                    gsap.set(ball, {\r\n                        fill: \"#ef7706\",\r\n                    });\r\n                }\r\n                // 修改移动方法：使新增身体分裂位移\r\n                snakeball.set_location = (ball, x, y, index) => {\r\n                    // 设置新增身体与原位置偏移\r\n                    let add_x = (parseInt(index / (player.lives + 1)) * innerWidth) / 8;\r\n                    let add_y = (parseInt(index / (player.lives + 1)) * innerHeight) / 8;\r\n                    gsap.to(ball, {\r\n                        pos_x: x + add_x,\r\n                        pos_y: y + add_y,\r\n                        cx: x + add_x,\r\n                        cy: y + add_y,\r\n                        duration: snakeball.duration.act,\r\n                        ease: \"linear\",\r\n                        delay: (index % (player.lives + 1)) * snakeball.delay.act,\r\n                    });\r\n                };\r\n                // 一段时间后恢复\r\n                setTimeout(() => {\r\n                    // 移除新增的身体\r\n                    for (let i = 0; i < tem_lives; i++) {\r\n                        stage.removeChild(snakeball.balls[snakeball.balls.length - 1]);\r\n                        snakeball.balls.pop();\r\n                    }\r\n                    // 恢复移动方法：这里不能临时储存方法然后替换回去，如果多次触发的话，会出BUG\r\n                    snakeball.set_location = (ball, x, y, index) => {\r\n                        gsap.to(ball, {\r\n                            pos_x: x,\r\n                            pos_y: y,\r\n                            cx: x,\r\n                            cy: y,\r\n                            duration: snakeball.duration.act,\r\n                            ease: \"linear\",\r\n                            delay: index * snakeball.delay.act,\r\n                        });\r\n                    };\r\n                }, 3000);\r\n            },\r\n            // 在爆炸处分裂火球\r\n            trigger_body() {\r\n                // 生成随机数个火球\r\n                for (let i = 0; i < Math.random() * 10 + 10; i++) {\r\n                    // 每一次爆炸，必分裂出一个分裂球\r\n                    let type = i === 0 ? \"splitball\" : \"fireball\";\r\n                    // 设置对应属性\r\n                    let r = launcher.types[type].r * scale_stander;\r\n                    let color = launcher.types[type].color;\r\n                    let pos_x = this.pos_x;\r\n                    let pos_y = this.pos_y;\r\n                    let speed_x = (Math.random() - 0.5) * 2 * launcher.max_speed * scale_stander;\r\n                    let speed_y = (Math.random() - 0.5) * 2 * launcher.max_speed * scale_stander;\r\n                    // 生成子弹球对象\r\n                    let ball = new bulletball(r, pos_x, pos_y, speed_x, speed_y, type, color);\r\n                    // 将子弹球用index标记，并储存到balls，方便查找\r\n                    ball.index = launcher.index;\r\n                    launcher.balls[launcher.index] = ball;\r\n                    // 创建子弹球\r\n                    ball.create();\r\n                    launcher.index++;\r\n                }\r\n            },\r\n        },\r\n        // 磁力球\r\n        magneticball: {\r\n            type: \"magneticball\",\r\n            r: 15,\r\n            color: \" #113ede\",\r\n            score: 8,\r\n            prob: 0.985,\r\n            // 界面内范围内的所有子弹球、全部移向snakeball的头部位置\r\n            trigger_head() {\r\n                audio_controller.buff.play(); //播放增益效果音效\r\n                Object.values(launcher.balls).forEach((ball) => {\r\n                    // 计算随机更新子弹球的速度，30毫秒是子弹球移动频率\r\n                    ball.speed_x = (this.pos_x - ball.pos_x) / 30 / (Math.random() * 0.5 + 1);\r\n                    ball.speed_y = (this.pos_y - ball.pos_y) / 30 / (Math.random() * 0.5 + 1);\r\n                    flicker(ball.ball, \"#113ede\"); // 闪烁子弹球颜色\r\n                });\r\n            },\r\n            // snakeball被吸到磁力球爆炸的位置\r\n            trigger_body() {\r\n                // 移除鼠标事件:短时间内无法操控snakeball\r\n                stage.onmousemove = null;\r\n                stage.ontouchmove = null;\r\n                // 移动snakeball到子弹球爆炸位置\r\n                snakeball.move(this.pos_x, this.pos_y);\r\n                // 一段时间后恢复\r\n                snakeball.change_color(\"#113ede\", 1, () => {\r\n                    // 重新绑定事件，可再次操控snakeball\r\n                    snakeball.bind_events();\r\n                });\r\n            },\r\n        },\r\n        // 影子球\r\n        shadowball: {\r\n            type: \"shadowball\",\r\n            r: 10,\r\n            color: \" #9f4df0\",\r\n            score: 8,\r\n            prob: 0.985,\r\n            // 短时间内、让与snakeball碰撞的子弹球、瞬移到snakeball头的周围并减速\r\n            trigger_head() {\r\n                audio_controller.buff.play(); //播放增益效果音效\r\n                // 更改子弹球身体碰撞方法\r\n                bulletball.prototype.crash_body = (ball) => {\r\n                    if (ball.type != \"fireball\") {\r\n                        // 非火球则移动到snakeball头部的位置周围\r\n                        ball.pos_x = snakeball.balls[0].pos_x + Math.random() * 200 - 100;\r\n                        ball.pos_y = snakeball.balls[0].pos_y + Math.random() * 200 - 100;\r\n                        // 减速\r\n                        ball.speed_x /= 5;\r\n                        ball.speed_y /= 5;\r\n                        flicker(ball.ball, \"#9f4df0\"); // 闪烁子弹球颜色\r\n                    } else {\r\n                        // 是火球则正常加分\r\n                        player.score += launcher.types[ball.type].score;\r\n                        ball.destroy();\r\n                    }\r\n                };\r\n                // 标识snakeball颜色\r\n                gsap.set(snakeball.balls, {\r\n                    fill: \"#9f4df0\",\r\n                });\r\n                // 储存并清除定时器：防止多次触发、定时器堆叠导致效果时长不够\r\n                if (launcher.types[\"shadowball\"].timer)\r\n                    clearTimeout(launcher.types[\"shadowball\"].timer);\r\n                // 一段时间后恢复\r\n                launcher.types[\"shadowball\"].timer = setTimeout(() => {\r\n                    // 恢复身体碰撞方法:这里不能临时储存方法然后替换回去，如果多次触发的话，会出BUG\r\n                    bulletball.prototype.crash_body = (ball) => {\r\n                        player.score += launcher.types[ball.type].score;\r\n                        ball.destroy();\r\n                        let trigger_body = launcher.types[ball.type].trigger_body.bind(ball);\r\n                        return trigger_body();\r\n                    };\r\n                    gsap.set(snakeball.balls, {\r\n                        fill: \"\",\r\n                    });\r\n                }, 3000);\r\n            },\r\n            // 短时间后、让所有子弹球随机改变位置\r\n            trigger_body() {\r\n                // 设置颜色预警\r\n                Object.values(launcher.balls).forEach((ball) => {\r\n                    gsap.set(ball.ball, {\r\n                        fill: \"#9f4df0\",\r\n                    });\r\n                });\r\n                // 一段时间后,随机设置所有子弹球位置\r\n                setTimeout(() => {\r\n                    Object.values(launcher.balls).forEach((ball) => {\r\n                        // 恢复颜色\r\n                        gsap.set(ball.ball, {\r\n                            fill: \"\",\r\n                        });\r\n                        // 随机子弹球设置xy位置\r\n                        ball.pos_x = Math.random() * innerWidth;\r\n                        ball.pos_y = Math.random() * innerHeight;\r\n                    });\r\n                }, 500);\r\n            },\r\n        },\r\n        // 隐身球\r\n        invisibleball: {\r\n            type: \"invisibleball\",\r\n            r: 15,\r\n            color: \" #808080\",\r\n            score: 10,\r\n            prob: 0.985,\r\n            // 短时间内让snakeball隐身，无法碰撞到子弹球\r\n            trigger_head() {\r\n                audio_controller.buff.play(); //播放增益效果音效\r\n                // 临时储存check_crash方法，方便后续替换回去，这里可以用临时储存的方法，因为不存在多次触发的情况\r\n                let tem_check_crash = bulletball.prototype.check_crash;\r\n                // 移除子弹球的撞击检测方法：让子弹球无法撞击snakeball\r\n                bulletball.prototype.check_crash = () => {};\r\n                // 设置snakeball半透明\r\n                gsap.set(snakeball.balls, {\r\n                    opacity: 0.5,\r\n                });\r\n                // 一段时间后恢复\r\n                setTimeout(() => {\r\n                    // 恢复子弹球撞击检测\r\n                    bulletball.prototype.check_crash = tem_check_crash;\r\n                    // 如果游戏还在进行中：则恢复snakeball透明度\r\n                    if (game_controler.if_gaming)\r\n                        gsap.set(snakeball.balls, {\r\n                            opacity: 1,\r\n                        });\r\n                }, 3000);\r\n            },\r\n            // 短时间内让所有子弹球隐身\r\n            trigger_body() {\r\n                // 设置所有子弹球透明度为0\r\n                Object.values(launcher.balls).forEach((ball) => {\r\n                    gsap.to(ball.ball, {\r\n                        opacity: 0,\r\n                        duration: 0.5,\r\n                        ease: \"power3.out\",\r\n                    });\r\n                });\r\n                // 储存并清除定时器：防止多次触发，造成子弹球闪烁以及隐身时长不够\r\n                if (launcher.types[\"invisibleball\"].timer)\r\n                    clearTimeout(launcher.types[\"invisibleball\"].timer);\r\n                // 一段时间后，撤销隐身效果\r\n                launcher.types[\"invisibleball\"].timer = setTimeout(() => {\r\n                    // 如果游戏还在进行中：恢复所有子弹球透明度\r\n                    if (game_controler.if_gaming)\r\n                        Object.values(launcher.balls).forEach((ball) => {\r\n                            gsap.to(ball.ball, {\r\n                                opacity: 1,\r\n                                duration: 0.5,\r\n                                ease: \"power3.out\",\r\n                            });\r\n                        });\r\n                }, 3000);\r\n            },\r\n        },\r\n        // 信号球\r\n        signalball: {\r\n            type: \"signalball\",\r\n            r: 8,\r\n            color: \" #ea4fc0\",\r\n            score: 20,\r\n            prob: 0.99,\r\n            // 短时间内生成大量身体，但不增加生命，一段时间后恢复\r\n            trigger_head() {\r\n                audio_controller.buff.play(); //播放增益效果音效\r\n                // 使snakeball有一个顺滑的操控\r\n                snakeball.duration.act = snakeball.duration.default;\r\n                snakeball.delay.act = 0.02;\r\n                // 创建身体\r\n                for (let i = 0; i < 50; i++) {\r\n                    snakeball.create_ball(\"body\");\r\n                }\r\n                // 标识snakeball颜色，一段时间后恢复\r\n                snakeball.change_color(\"#ea4fc0\", 3, () => {\r\n                    // 移除新增的身体，恢复颜色\r\n                    for (let i = 0; i < 50; i++) {\r\n                        stage.removeChild(snakeball.balls[snakeball.balls.length - 1]);\r\n                        snakeball.balls.pop();\r\n                    }\r\n                });\r\n            },\r\n            // 短时间内，涌出大量子弹球\r\n            trigger_body() {\r\n                // 重置launcher的定时器，设置发射频率极高\r\n                clearInterval(launcher.timer);\r\n                launcher.timer = setInterval(launcher.launch.bind(launcher), 1);\r\n                // 设置在大量发射子弹球的时间段里面、不再发射信号球，避免造成超多子弹球，极易让玩家死亡\r\n                launcher.types[\"signalball\"].prob = 2;\r\n                // 储存并清除定时器：防止多次触发、定时器堆叠导致效果时长不够\r\n                if (launcher.types[\"signalball\"].timer)\r\n                    clearTimeout(launcher.types[\"signalball\"].timer);\r\n                // 短时间后，恢复原始发射频率\r\n                launcher.types[\"signalball\"].timer = setTimeout(() => {\r\n                    // 恢复信号球发射概率\r\n                    launcher.types[\"signalball\"].prob = 0.99;\r\n                    clearInterval(launcher.timer);\r\n                    // 如果游戏还在进行中：用原频率重新启动炮台，这里一定要确定游戏还在进行，否则会出BUG\r\n                    if (game_controler.if_gaming)\r\n                        launcher.timer = setInterval(\r\n                            launcher.launch.bind(launcher),\r\n                            launcher.frequency\r\n                        );\r\n                }, 800);\r\n            },\r\n        },\r\n        // 核弹球\r\n        hball: {\r\n            type: \"hball\",\r\n            r: 30,\r\n            color: \" #046312\",\r\n            score: 50,\r\n            prob: 0.995,\r\n            // 界面范围内所有子弹球爆炸，并获取对应得分\r\n            trigger_head() {\r\n                audio_controller.buff.play(); //播放增益效果音效\r\n                Object.values(launcher.balls).forEach((ball) => {\r\n                    player.score += launcher.types[ball.type].score;\r\n                    if (!ball.if_removed) ball.destroy();\r\n                });\r\n            },\r\n            // 直接丢失5条生命值\r\n            trigger_body() {\r\n                audio_controller.warn.play(); //播放警示音效\r\n                for (let i = 0; i <= 5; i++) {\r\n                    // 如果玩家已经死亡：则不执行，否则会报错\r\n                    if (player.lives > 0) snakeball.lost_lives();\r\n                }\r\n            },\r\n        },\r\n    },\r\n    balls: {}, //所有的子弹球：这里用对象储存以方便查找指定子弹球\r\n    index: 0, //计数：用于查找子弹球\r\n    frequency: 250, //发射频率\r\n    max_speed: 10, //子弹球本局游戏最高可达的移动速度\r\n    timer: null, //发射定时器\r\n    // 运行launcher\r\n    run() {\r\n        // 更新所有子弹球和index\r\n        this.balls = {};\r\n        this.index = 0;\r\n        // 开启定时器，发射子弹球\r\n        this.timer = setInterval(this.launch.bind(this), this.frequency);\r\n    },\r\n    // 发射子弹球\r\n    launch() {\r\n        let r, pos_x, pos_y, speed_x, speed_y, type, color;\r\n        // 设置随机种类的子弹球\r\n        Object.values(this.types).forEach((ball) => {\r\n            if (Math.random() > ball.prob) return (type = ball.type);\r\n        });\r\n        r = this.types[type].r * scale_stander;\r\n        color = this.types[type].color;\r\n        // 设置子弹球从界面外部的进入方向\r\n        let direction = Math.floor(Math.random() * 4);\r\n        switch (direction) {\r\n            case 0: // 从左侧进入\r\n                pos_x = -r; // 球的初始位置在视图左侧外\r\n                speed_x = Math.random() * this.max_speed * scale_stander + 1; // 速度向右\r\n                pos_y = Math.random() * innerHeight; // 随机垂直位置\r\n                speed_y = (Math.random() - 0.5) * 2 * this.max_speed * scale_stander; // 随机垂直速度，可以是向上或向下\r\n                break;\r\n            case 1: // 从右侧进入\r\n                pos_x = innerWidth + r; // 球的初始位置在视图右侧外\r\n                speed_x = Math.random() * -this.max_speed * scale_stander - 1; // 速度向左\r\n                pos_y = Math.random() * innerHeight; // 随机垂直位置\r\n                speed_y = (Math.random() - 0.5) * 2 * this.max_speed * scale_stander; // 随机垂直速度，可以是向上或向下\r\n                break;\r\n            case 2: // 从上方进入\r\n                pos_y = -r; // 球的初始位置在视图上方外\r\n                speed_y = Math.random() * this.max_speed * scale_stander + 1; // 速度向下\r\n                pos_x = Math.random() * innerWidth; // 随机水平位置\r\n                speed_x = (Math.random() - 0.5) * 2 * this.max_speed * scale_stander; // 随机水平速度，可以是向左或向右\r\n                break;\r\n            case 3: // 从下方进入\r\n                pos_y = innerHeight + r; // 球的初始位置在视图下方外\r\n                speed_y = Math.random() * -this.max_speed * scale_stander - 1; // 速度向上\r\n                pos_x = Math.random() * innerWidth; // 随机水平位置\r\n                speed_x = (Math.random() - 0.5) * 2 * this.max_speed * scale_stander; // 随机水平速度，可以是向左或向右\r\n                break;\r\n        }\r\n        // 生成子弹球对象\r\n        let ball = new bulletball(r, pos_x, pos_y, speed_x, speed_y, type, color);\r\n        // 将子弹球用index标记，并储存到balls，方便查找\r\n        ball.index = this.index;\r\n        this.balls[this.index] = ball;\r\n        // 创建子弹球\r\n        ball.create();\r\n        this.index++;\r\n    },\r\n    // 摧毁所有子弹球\r\n    destroy() {\r\n        clearInterval(this.timer); //清除发射定时器\r\n        // 这里只给所有子弹球播放爆炸动画、而不清除，是因为后面再次游戏时，会直接清除整个stage\r\n        Object.values(this.balls).forEach((ball) => {\r\n            clearInterval(ball.move_timer);\r\n            gsap.to(ball.ball, {\r\n                fill: \"#e3d80f\",\r\n                stroke: \"#dc1130\",\r\n                strokeWidth: ball.r / 5, //这里用半径计算线条宽度、是为了不让其受屏幕尺寸影响\r\n                r: 2 * ball.r,\r\n                opacity: 0,\r\n                duration: 0.3,\r\n                ease: \"power3.out\",\r\n            });\r\n        });\r\n    },\r\n};\r\n// 游戏控制器\r\nconst game_controler = {\r\n    // wave关卡控制器\r\n    waver: {\r\n        timer: null, //定时器\r\n        default_time: 40, //每一关的默认时长\r\n    },\r\n    initial_lives: 20, //玩家的初始生命值\r\n    if_gaming: false, //是否在进行游戏中\r\n    // 创建关卡：一般关卡会在游戏正式开始之前创建\r\n    create_wave() {\r\n        stage.innerHTML = \"\"; //清空游戏舞台\r\n        // 如果玩家未激活：已死亡/首次创建\r\n        if (!player.if_active) {\r\n            // 设置默认玩家信息\r\n            player.if_active = true; //激活玩家\r\n            player.wave = player.rank = player.score = 0;\r\n            player.lives = this.initial_lives;\r\n        }\r\n        this.upgrade(); //升级游戏：设置关卡难度参数\r\n        player.time = this.waver.default_time; //重置游戏时间\r\n        snakeball.create(player.lives); //创建snakeball\r\n    },\r\n    // 正式开始游戏\r\n    start() {\r\n        this.if_gaming = true;\r\n        audio_controller.gameing.play(); //播放游戏音乐\r\n        snakeball.reseter.run(); //启动reseter：开始周期重置snakeball\r\n        launcher.run(); //开始发射子弹球\r\n        // 开启waver：进行倒计时，倒计时完成、则结束关卡\r\n        this.waver.timer = setInterval(() => {\r\n            player.time--;\r\n            // 倒计时结束，并且玩家未死亡：游戏关卡胜利\r\n            if (player.time <= 0 && player.if_active) this.over(true);\r\n        }, 1000);\r\n    },\r\n    // 游戏结束\r\n    over(if_win) {\r\n        this.if_gaming = false;\r\n        // this.post(); //提交玩家数据\r\n        this.clean(); //清扫游戏舞台\r\n        // 停止游戏音乐、并播放大厅音乐\r\n        audio_controller.gameing.stop();\r\n        audio_controller.hall.play();\r\n        audio_controller.hall.fade(0, 1, 9000);\r\n        //显示总结面板\r\n        summary.value.show();\r\n        // 游戏关卡胜利\r\n        if (if_win) audio_controller.win.play();\r\n        // 游戏关卡失败\r\n        else {\r\n            audio_controller.fail.play();\r\n            // 设置玩家未激活：即死亡，并归零游戏时间\r\n            player.if_active = false;\r\n            player.time = 0;\r\n        }\r\n    },\r\n    // 清扫游戏舞台\r\n    clean() {\r\n        clearInterval(this.waver.timer);\r\n        launcher.destroy();\r\n        snakeball.remove();\r\n        snakeball.reseter.stop();\r\n    },\r\n    // 升级\r\n    upgrade() {\r\n        player.wave++;\r\n        // 升级频率: 频率范围为250-40，增长速度为曲线，先快后慢、最后平稳\r\n        launcher.frequency = 40 + (250 - 40) * Math.exp(-0.08 * player.wave);\r\n        // 升级速度: 速度范围为10-25，增长速度同上\r\n        launcher.max_speed = 10 + (25 - 10) * (1 - Math.exp(-0.08 * player.wave));\r\n        // 加快游戏音乐，音乐速度范围为1-2\r\n        audio_controller.gameing.rate(1 + (2 - 1) * (1 - Math.exp(-0.08 * player.wave)));\r\n    },\r\n    // 提交玩家数据\r\n    post() {\r\n        let data = {\r\n            id: player.id,\r\n            name: player.name,\r\n            wave: player.wave,\r\n            lives: player.lives,\r\n            score: player.score,\r\n        };\r\n        // RAS加密\r\n        const public_key = forge.pki.publicKeyFromPem(`-----BEGIN PUBLIC KEY-----\r\nxxxxxxx\r\n-----END PUBLIC KEY-----`);\r\n        // 生成加密数据\r\n        const encrypted_data = public_key.encrypt(JSON.stringify(data), \"RSA-OAEP\", {\r\n            md: forge.md.sha256.create(),\r\n        });\r\n        // 将加密数据转换为Base64\r\n        const encrypted_base64 = forge.util.encode64(encrypted_data);\r\n        // 发送数据\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://put_your_server.com/api\", true);\r\n        xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n        xhr.send(JSON.stringify({ encrypted_data: encrypted_base64 }));\r\n    },\r\n};\r\n// 储存全局功能函数\r\nstore.ready_to_game = () => {\r\n    // 在准备提示出现前，就创建关卡、可以看到snakeball。准备提示结束之后，才正式开始游戏\r\n    readytips.value.ready(\r\n        game_controler.create_wave.bind(game_controler),\r\n        game_controler.start.bind(game_controler)\r\n    );\r\n};\r\nonMounted(() => {\r\n    stage = document.querySelector(\"#stage\");\r\n    window.addEventListener(\"resize\", resize);\r\n    resize();\r\n});\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}